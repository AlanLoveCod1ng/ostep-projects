        -:    0:Source:memcached.c
        -:    0:Graph:memcached.gcno
        -:    0:Data:memcached.gcda
        -:    0:Runs:382
        -:    1:/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */
        -:    2:/*
        -:    3: *  memcached - memory caching daemon
        -:    4: *
        -:    5: *       https://www.memcached.org/
        -:    6: *
        -:    7: *  Copyright 2003 Danga Interactive, Inc.  All rights reserved.
        -:    8: *
        -:    9: *  Use and distribution licensed under the BSD license.  See
        -:   10: *  the LICENSE file for full text.
        -:   11: *
        -:   12: *  Authors:
        -:   13: *      Anatoly Vorobey <mellon@pobox.com>
        -:   14: *      Brad Fitzpatrick <brad@danga.com>
        -:   15: */
        -:   16:#include "memcached.h"
        -:   17:#include "storage.h"
        -:   18:#include "authfile.h"
        -:   19:#include "restart.h"
        -:   20:#include <sys/stat.h>
        -:   21:#include <sys/socket.h>
        -:   22:#include <sys/un.h>
        -:   23:#include <signal.h>
        -:   24:#include <sys/param.h>
        -:   25:#include <sys/resource.h>
        -:   26:#include <sys/uio.h>
        -:   27:#include <ctype.h>
        -:   28:#include <stdarg.h>
        -:   29:
        -:   30:/* some POSIX systems need the following definition
        -:   31: * to get mlockall flags out of sys/mman.h.  */
        -:   32:#ifndef _P1003_1B_VISIBLE
        -:   33:#define _P1003_1B_VISIBLE
        -:   34:#endif
        -:   35:#include <pwd.h>
        -:   36:#include <sys/mman.h>
        -:   37:#include <fcntl.h>
        -:   38:#include <netinet/tcp.h>
        -:   39:#include <arpa/inet.h>
        -:   40:#include <errno.h>
        -:   41:#include <stdlib.h>
        -:   42:#include <stdio.h>
        -:   43:#include <string.h>
        -:   44:#include <time.h>
        -:   45:#include <assert.h>
        -:   46:#include <sysexits.h>
        -:   47:#include <stddef.h>
        -:   48:
        -:   49:#ifdef HAVE_GETOPT_LONG
        -:   50:#include <getopt.h>
        -:   51:#endif
        -:   52:
        -:   53:#ifdef TLS
        -:   54:#include "tls.h"
        -:   55:#endif
        -:   56:
        -:   57:#include "proto_text.h"
        -:   58:#include "proto_bin.h"
        -:   59:#include "proto_proxy.h"
        -:   60:
        -:   61:#if defined(__FreeBSD__)
        -:   62:#include <sys/sysctl.h>
        -:   63:#endif
        -:   64:
        -:   65:/*
        -:   66: * forward declarations
        -:   67: */
        -:   68:static void drive_machine(conn *c);
        -:   69:static int new_socket(struct addrinfo *ai);
        -:   70:static ssize_t tcp_read(conn *arg, void *buf, size_t count);
        -:   71:static ssize_t tcp_sendmsg(conn *arg, struct msghdr *msg, int flags);
        -:   72:static ssize_t tcp_write(conn *arg, void *buf, size_t count);
        -:   73:
        -:   74:enum try_read_result {
        -:   75:    READ_DATA_RECEIVED,
        -:   76:    READ_NO_DATA_RECEIVED,
        -:   77:    READ_ERROR,            /** an error occurred (on the socket) (or client closed connection) */
        -:   78:    READ_MEMORY_ERROR      /** failed to allocate more memory */
        -:   79:};
        -:   80:
        -:   81:static int try_read_command_negotiate(conn *c);
        -:   82:static int try_read_command_udp(conn *c);
        -:   83:
        -:   84:static enum try_read_result try_read_network(conn *c);
        -:   85:static enum try_read_result try_read_udp(conn *c);
        -:   86:
        -:   87:static int start_conn_timeout_thread();
        -:   88:
        -:   89:/* stats */
        -:   90:static void stats_init(void);
        -:   91:static void conn_to_str(const conn *c, char *addr, char *svr_addr);
        -:   92:
        -:   93:/* defaults */
        -:   94:static void settings_init(void);
        -:   95:
        -:   96:/* event handling, network IO */
        -:   97:static void event_handler(const evutil_socket_t fd, const short which, void *arg);
        -:   98:static void conn_close(conn *c);
        -:   99:static void conn_init(void);
        -:  100:static bool update_event(conn *c, const int new_flags);
        -:  101:static void complete_nread(conn *c);
        -:  102:
        -:  103:static void conn_free(conn *c);
        -:  104:
        -:  105:/** exported globals **/
        -:  106:struct stats stats;
        -:  107:struct stats_state stats_state;
        -:  108:struct settings settings;
        -:  109:time_t process_started;     /* when the process was started */
        -:  110:conn **conns;
        -:  111:
        -:  112:struct slab_rebalance slab_rebal;
        -:  113:volatile int slab_rebalance_signal;
        -:  114:#ifdef EXTSTORE
        -:  115:/* hoping this is temporary; I'd prefer to cut globals, but will complete this
        -:  116: * battle another day.
        -:  117: */
        -:  118:void *ext_storage = NULL;
        -:  119:#endif
        -:  120:/** file scope variables **/
        -:  121:static conn *listen_conn = NULL;
        -:  122:static int max_fds;
        -:  123:static struct event_base *main_base;
        -:  124:
        -:  125:enum transmit_result {
        -:  126:    TRANSMIT_COMPLETE,   /** All done writing. */
        -:  127:    TRANSMIT_INCOMPLETE, /** More data remaining to write. */
        -:  128:    TRANSMIT_SOFT_ERROR, /** Can't write any more right now. */
        -:  129:    TRANSMIT_HARD_ERROR  /** Can't write (c->state is set to conn_closing) */
        -:  130:};
        -:  131:
        -:  132:/* Default methods to read from/ write to a socket */
   563153:  133:ssize_t tcp_read(conn *c, void *buf, size_t count) {
  563153*:  134:    assert (c != NULL);
   563153:  135:    return read(c->sfd, buf, count);
        -:  136:}
        -:  137:
   410716:  138:ssize_t tcp_sendmsg(conn *c, struct msghdr *msg, int flags) {
  410716*:  139:    assert (c != NULL);
   410716:  140:    return sendmsg(c->sfd, msg, flags);
        -:  141:}
        -:  142:
       76:  143:ssize_t tcp_write(conn *c, void *buf, size_t count) {
      76*:  144:    assert (c != NULL);
       76:  145:    return write(c->sfd, buf, count);
        -:  146:}
        -:  147:
        -:  148:static enum transmit_result transmit(conn *c);
        -:  149:
        -:  150:/* This reduces the latency without adding lots of extra wiring to be able to
        -:  151: * notify the listener thread of when to listen again.
        -:  152: * Also, the clock timer could be broken out into its own thread and we
        -:  153: * can block the listener via a condition.
        -:  154: */
        -:  155:static volatile bool allow_new_conns = true;
        -:  156:static int stop_main_loop = NOT_STOP;
        -:  157:static struct event maxconnsevent;
    #####:  158:static void maxconns_handler(const evutil_socket_t fd, const short which, void *arg) {
    #####:  159:    struct timeval t = {.tv_sec = 0, .tv_usec = 10000};
        -:  160:
    #####:  161:    if (fd == -42 || allow_new_conns == false) {
        -:  162:        /* reschedule in 10ms if we need to keep polling */
    #####:  163:        evtimer_set(&maxconnsevent, maxconns_handler, 0);
    #####:  164:        event_base_set(main_base, &maxconnsevent);
    #####:  165:        evtimer_add(&maxconnsevent, &t);
        -:  166:    } else {
    #####:  167:        evtimer_del(&maxconnsevent);
    #####:  168:        accept_new_conns(true);
        -:  169:    }
    #####:  170:}
        -:  171:
        -:  172:/*
        -:  173: * given time value that's either unix time or delta from current unix time, return
        -:  174: * unix time. Use the fact that delta can't exceed one month (and real time value can't
        -:  175: * be that low).
        -:  176: */
   328020:  177:rel_time_t realtime(const time_t exptime) {
        -:  178:    /* no. of seconds in 30 days - largest possible delta exptime */
        -:  179:
   328020:  180:    if (exptime == 0) return 0; /* 0 means never expire */
        -:  181:
     1662:  182:    if (exptime > REALTIME_MAXDELTA) {
        -:  183:        /* if item expiration is at/before the server started, give it an
        -:  184:           expiration time of 1 second after the server started.
        -:  185:           (because 0 means don't expire).  without this, we'd
        -:  186:           underflow and wrap around to some large value way in the
        -:  187:           future, effectively making items expiring in the past
        -:  188:           really expiring never */
       13:  189:        if (exptime <= process_started)
        -:  190:            return (rel_time_t)1;
        8:  191:        return (rel_time_t)(exptime - process_started);
        -:  192:    } else {
     1649:  193:        return (rel_time_t)(exptime + current_time);
        -:  194:    }
        -:  195:}
        -:  196:
      104:  197:static void stats_init(void) {
      104:  198:    memset(&stats, 0, sizeof(struct stats));
      104:  199:    memset(&stats_state, 0, sizeof(struct stats_state));
      104:  200:    stats_state.accepting_conns = true; /* assuming we start in this state. */
        -:  201:
        -:  202:    /* make the time we started always be 2 seconds before we really
        -:  203:       did, so time(0) - time.started is never zero.  if so, things
        -:  204:       like 'settings.oldest_live' which act as booleans as well as
        -:  205:       values are now false in boolean context... */
      104:  206:    process_started = time(0) - ITEM_UPDATE_INTERVAL - 2;
      104:  207:    stats_prefix_init(settings.prefix_delimiter);
      104:  208:}
        -:  209:
        3:  210:void stats_reset(void) {
        3:  211:    STATS_LOCK();
        3:  212:    memset(&stats, 0, sizeof(struct stats));
        3:  213:    stats_prefix_clear();
        3:  214:    STATS_UNLOCK();
        3:  215:    threadlocal_stats_reset();
        3:  216:    item_stats_reset();
        3:  217:}
        -:  218:
      381:  219:static void settings_init(void) {
      381:  220:    settings.use_cas = true;
      381:  221:    settings.access = 0700;
      381:  222:    settings.port = 11212;
      381:  223:    settings.udpport = 0;
        -:  224:#ifdef TLS
        -:  225:    settings.ssl_enabled = false;
        -:  226:    settings.ssl_ctx = NULL;
        -:  227:    settings.ssl_chain_cert = NULL;
        -:  228:    settings.ssl_key = NULL;
        -:  229:    settings.ssl_verify_mode = SSL_VERIFY_NONE;
        -:  230:    settings.ssl_keyformat = SSL_FILETYPE_PEM;
        -:  231:    settings.ssl_ciphers = NULL;
        -:  232:    settings.ssl_ca_cert = NULL;
        -:  233:    settings.ssl_last_cert_refresh_time = current_time;
        -:  234:    settings.ssl_wbuf_size = 16 * 1024; // default is 16KB (SSL max frame size is 17KB)
        -:  235:    settings.ssl_session_cache = false;
        -:  236:    settings.ssl_kernel_tls = false;
        -:  237:    settings.ssl_min_version = TLS1_2_VERSION;
        -:  238:#endif
        -:  239:    /* By default this string should be NULL for getaddrinfo() */
      381:  240:    settings.inter = NULL;
      381:  241:    settings.maxbytes = 64 * 1024 * 1024; /* default is 64MB */
      381:  242:    settings.maxconns = 1024;         /* to limit connections-related memory to about 5MB */
      381:  243:    settings.verbose = 0;
      381:  244:    settings.oldest_live = 0;
      381:  245:    settings.oldest_cas = 0;          /* supplements accuracy of oldest_live */
      381:  246:    settings.evict_to_free = 1;       /* push old items out of cache when memory runs out */
      381:  247:    settings.socketpath = NULL;       /* by default, not using a unix socket */
      381:  248:    settings.auth_file = NULL;        /* by default, not using ASCII authentication tokens */
      381:  249:    settings.factor = 1.25;
      381:  250:    settings.chunk_size = 48;         /* space for a modest key and value */
      381:  251:    settings.num_threads = 4;         /* N workers */
      381:  252:    settings.num_threads_per_udp = 0;
      381:  253:    settings.prefix_delimiter = ':';
      381:  254:    settings.detail_enabled = 0;
      381:  255:    settings.reqs_per_event = 20;
      381:  256:    settings.backlog = 1024;
      381:  257:    settings.binding_protocol = negotiating_prot;
      381:  258:    settings.item_size_max = 1024 * 1024; /* The famous 1MB upper limit. */
      381:  259:    settings.slab_page_size = 1024 * 1024; /* chunks are split from 1MB pages. */
      381:  260:    settings.slab_chunk_size_max = settings.slab_page_size / 2;
      381:  261:    settings.sasl = false;
      381:  262:    settings.maxconns_fast = true;
      381:  263:    settings.lru_crawler = false;
      381:  264:    settings.lru_crawler_sleep = 100;
      381:  265:    settings.lru_crawler_tocrawl = 0;
      381:  266:    settings.lru_maintainer_thread = false;
      381:  267:    settings.lru_segmented = true;
      381:  268:    settings.hot_lru_pct = 20;
      381:  269:    settings.warm_lru_pct = 40;
      381:  270:    settings.hot_max_factor = 0.2;
      381:  271:    settings.warm_max_factor = 2.0;
      381:  272:    settings.temp_lru = false;
      381:  273:    settings.temporary_ttl = 61;
      381:  274:    settings.idle_timeout = 0; /* disabled */
      381:  275:    settings.hashpower_init = 0;
      381:  276:    settings.slab_reassign = true;
      381:  277:    settings.slab_automove = 1;
      381:  278:    settings.slab_automove_ratio = 0.8;
      381:  279:    settings.slab_automove_window = 30;
      381:  280:    settings.shutdown_command = false;
      381:  281:    settings.tail_repair_time = TAIL_REPAIR_TIME_DEFAULT;
      381:  282:    settings.flush_enabled = true;
      381:  283:    settings.dump_enabled = true;
      381:  284:    settings.crawls_persleep = 1000;
      381:  285:    settings.logger_watcher_buf_size = LOGGER_WATCHER_BUF_SIZE;
      381:  286:    settings.logger_buf_size = LOGGER_BUF_SIZE;
      381:  287:    settings.drop_privileges = false;
      381:  288:    settings.watch_enabled = true;
      381:  289:    settings.read_buf_mem_limit = 0;
        -:  290:#ifdef MEMCACHED_DEBUG
      381:  291:    settings.relaxed_privileges = false;
        -:  292:#endif
      381:  293:    settings.num_napi_ids = 0;
      381:  294:    settings.memory_file = NULL;
        -:  295:#ifdef SOCK_COOKIE_ID
      381:  296:    settings.sock_cookie_id = 0;
        -:  297:#endif
      381:  298:}
        -:  299:
        -:  300:extern pthread_mutex_t conn_lock;
        -:  301:
        -:  302:/* Connection timeout thread bits */
        -:  303:static pthread_t conn_timeout_tid;
        -:  304:static int do_run_conn_timeout_thread;
        -:  305:static pthread_cond_t conn_timeout_cond = PTHREAD_COND_INITIALIZER;
        -:  306:static pthread_mutex_t conn_timeout_lock = PTHREAD_MUTEX_INITIALIZER;
        -:  307:
        -:  308:#define CONNS_PER_SLICE 100
        1:  309:static void *conn_timeout_thread(void *arg) {
        1:  310:    int i;
        1:  311:    conn *c;
        1:  312:    rel_time_t oldest_last_cmd;
        1:  313:    int sleep_time;
        1:  314:    int sleep_slice = max_fds / CONNS_PER_SLICE;
        1:  315:    if (sleep_slice == 0)
    #####:  316:        sleep_slice = CONNS_PER_SLICE;
        -:  317:
        1:  318:    useconds_t timeslice = 1000000 / sleep_slice;
        -:  319:
        1:  320:    mutex_lock(&conn_timeout_lock);
        5:  321:    while(do_run_conn_timeout_thread) {
        4:  322:        if (settings.verbose > 2)
    #####:  323:            fprintf(stderr, "idle timeout thread at top of connection list\n");
        -:  324:
        4:  325:        oldest_last_cmd = current_time;
        -:  326:
     4100:  327:        for (i = 0; i < max_fds; i++) {
     4096:  328:            if ((i % CONNS_PER_SLICE) == 0) {
       44:  329:                if (settings.verbose > 2)
    #####:  330:                    fprintf(stderr, "idle timeout thread sleeping for %ulus\n",
        -:  331:                        (unsigned int)timeslice);
       44:  332:                usleep(timeslice);
        -:  333:            }
        -:  334:
     4096:  335:            if (!conns[i])
     4073:  336:                continue;
        -:  337:
       23:  338:            c = conns[i];
        -:  339:
       23:  340:            if (!IS_TCP(c->transport))
       16:  341:                continue;
        -:  342:
        7:  343:            if (c->state != conn_new_cmd && c->state != conn_read)
        5:  344:                continue;
        -:  345:
        2:  346:            if ((current_time - c->last_cmd_time) > settings.idle_timeout) {
        1:  347:                timeout_conn(c);
        -:  348:            } else {
        1:  349:                if (c->last_cmd_time < oldest_last_cmd)
        -:  350:                    oldest_last_cmd = c->last_cmd_time;
        -:  351:            }
        -:  352:        }
        -:  353:
        -:  354:        /* This is the soonest we could have another connection time out */
        4:  355:        sleep_time = settings.idle_timeout - (current_time - oldest_last_cmd) + 1;
        4:  356:        if (sleep_time <= 0)
        -:  357:            sleep_time = 1;
        -:  358:
        4:  359:        if (settings.verbose > 2)
    #####:  360:            fprintf(stderr,
        -:  361:                    "idle timeout thread finished pass, sleeping for %ds\n",
        -:  362:                    sleep_time);
        -:  363:
        4:  364:        struct timeval now;
        4:  365:        struct timespec to_sleep;
        4:  366:        gettimeofday(&now, NULL);
        4:  367:        to_sleep.tv_sec = now.tv_sec + sleep_time;
        4:  368:        to_sleep.tv_nsec = 0;
        -:  369:
        4:  370:        pthread_cond_timedwait(&conn_timeout_cond, &conn_timeout_lock, &to_sleep);
        -:  371:    }
        -:  372:
        1:  373:    mutex_unlock(&conn_timeout_lock);
        1:  374:    return NULL;
        -:  375:}
        -:  376:
        1:  377:static int start_conn_timeout_thread() {
        1:  378:    int ret;
        -:  379:
        1:  380:    if (settings.idle_timeout == 0)
        -:  381:        return -1;
        -:  382:
        1:  383:    do_run_conn_timeout_thread = 1;
        1:  384:    if ((ret = pthread_create(&conn_timeout_tid, NULL,
        -:  385:        conn_timeout_thread, NULL)) != 0) {
    #####:  386:        fprintf(stderr, "Can't create idle connection timeout thread: %s\n",
        -:  387:            strerror(ret));
    #####:  388:        return -1;
        -:  389:    }
        -:  390:
        -:  391:    return 0;
        -:  392:}
        -:  393:
      102:  394:int stop_conn_timeout_thread(void) {
      102:  395:    if (!do_run_conn_timeout_thread)
        -:  396:        return -1;
        1:  397:    mutex_lock(&conn_timeout_lock);
        1:  398:    do_run_conn_timeout_thread = 0;
        1:  399:    pthread_cond_signal(&conn_timeout_cond);
        1:  400:    mutex_unlock(&conn_timeout_lock);
        1:  401:    pthread_join(conn_timeout_tid, NULL);
        1:  402:    return 0;
        -:  403:}
        -:  404:
        -:  405:/*
        -:  406: * read buffer cache helper functions
        -:  407: */
   452252:  408:static void rbuf_release(conn *c) {
   452252:  409:    if (c->rbuf != NULL && c->rbytes == 0 && !IS_UDP(c->transport)) {
   448347:  410:        if (c->rbuf_malloced) {
        3:  411:            free(c->rbuf);
        3:  412:            c->rbuf_malloced = false;
        -:  413:        } else {
   448344:  414:            do_cache_free(c->thread->rbuf_cache, c->rbuf);
        -:  415:        }
   448347:  416:        c->rsize = 0;
   448347:  417:        c->rbuf = NULL;
   448347:  418:        c->rcurr = NULL;
        -:  419:    }
   452252:  420:}
        -:  421:
   452053:  422:static bool rbuf_alloc(conn *c) {
   452053:  423:    if (c->rbuf == NULL) {
   448347:  424:        c->rbuf = do_cache_alloc(c->thread->rbuf_cache);
   448347:  425:        if (!c->rbuf) {
    #####:  426:            THR_STATS_LOCK(c);
    #####:  427:            c->thread->stats.read_buf_oom++;
    #####:  428:            THR_STATS_UNLOCK(c);
    #####:  429:            return false;
        -:  430:        }
   448347:  431:        c->rsize = READ_BUFFER_SIZE;
   448347:  432:        c->rcurr = c->rbuf;
        -:  433:    }
        -:  434:    return true;
        -:  435:}
        -:  436:
        -:  437:// Just for handling huge ASCII multigets.
        -:  438:// The previous system was essentially the same; realloc'ing until big enough,
        -:  439:// then realloc'ing back down after the request finished.
        3:  440:bool rbuf_switch_to_malloc(conn *c) {
        -:  441:    // Might as well start with x2 and work from there.
        3:  442:    size_t size = c->rsize * 2;
        3:  443:    char *tmp = malloc(size);
        3:  444:    if (!tmp)
        -:  445:        return false;
        -:  446:
        3:  447:    memcpy(tmp, c->rcurr, c->rbytes);
        3:  448:    do_cache_free(c->thread->rbuf_cache, c->rbuf);
        -:  449:
        3:  450:    c->rcurr = c->rbuf = tmp;
        3:  451:    c->rsize = size;
        3:  452:    c->rbuf_malloced = true;
        3:  453:    return true;
        -:  454:}
        -:  455:
        -:  456:/*
        -:  457: * Initializes the connections array. We don't actually allocate connection
        -:  458: * structures until they're needed, so as to avoid wasting memory when the
        -:  459: * maximum connection count is much higher than the actual number of
        -:  460: * connections.
        -:  461: *
        -:  462: * This does end up wasting a few pointers' worth of memory for FDs that are
        -:  463: * used for things other than connections, but that's worth it in exchange for
        -:  464: * being able to directly index the conns array by FD.
        -:  465: */
      104:  466:static void conn_init(void) {
        -:  467:    /* We're unlikely to see an FD much higher than maxconns. */
      104:  468:    int next_fd = dup(1);
      104:  469:    if (next_fd < 0) {
    #####:  470:        perror("Failed to duplicate file descriptor\n");
    #####:  471:        exit(1);
        -:  472:    }
      104:  473:    int headroom = 10;      /* account for extra unexpected open FDs */
      104:  474:    struct rlimit rl;
        -:  475:
      104:  476:    max_fds = settings.maxconns + headroom + next_fd;
        -:  477:
        -:  478:    /* But if possible, get the actual highest FD we can possibly ever see. */
      104:  479:    if (getrlimit(RLIMIT_NOFILE, &rl) == 0) {
      104:  480:        max_fds = rl.rlim_max;
        -:  481:    } else {
    #####:  482:        fprintf(stderr, "Failed to query maximum file descriptor; "
        -:  483:                        "falling back to maxconns\n");
        -:  484:    }
        -:  485:
      104:  486:    close(next_fd);
        -:  487:
      104:  488:    if ((conns = calloc(max_fds, sizeof(conn *))) == NULL) {
    #####:  489:        fprintf(stderr, "Failed to allocate connection structures\n");
        -:  490:        /* This is unrecoverable so bail out early. */
    #####:  491:        exit(1);
        -:  492:    }
      104:  493:}
        -:  494:
     293*:  495:static const char *prot_text(enum protocol prot) {
     293*:  496:    char *rv = "unknown";
     293*:  497:    switch(prot) {
       2*:  498:        case ascii_prot:
       2*:  499:            rv = "ascii";
       2*:  500:            break;
       1*:  501:        case binary_prot:
       1*:  502:            rv = "binary";
       1*:  503:            break;
     290*:  504:        case negotiating_prot:
     290*:  505:            rv = "auto-negotiate";
     290*:  506:            break;
        -:  507:#ifdef PROXY
        -:  508:        case proxy_prot:
        -:  509:            rv = "proxy";
        -:  510:            break;
        -:  511:#endif
        -:  512:    }
     293*:  513:    return rv;
        -:  514:}
        -:  515:
        1:  516:void conn_close_idle(conn *c) {
        1:  517:    if (settings.idle_timeout > 0 &&
        1:  518:        (current_time - c->last_cmd_time) > settings.idle_timeout) {
        1:  519:        if (c->state != conn_new_cmd && c->state != conn_read) {
    #####:  520:            if (settings.verbose > 1)
    #####:  521:                fprintf(stderr,
        -:  522:                    "fd %d wants to timeout, but isn't in read state", c->sfd);
    #####:  523:            return;
        -:  524:        }
        -:  525:
        1:  526:        if (settings.verbose > 1)
    #####:  527:            fprintf(stderr, "Closing idle fd %d\n", c->sfd);
        -:  528:
        1:  529:        pthread_mutex_lock(&c->thread->stats.mutex);
        1:  530:        c->thread->stats.idle_kicks++;
        1:  531:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  532:
        1:  533:        c->close_reason = IDLE_TIMEOUT_CLOSE;
        -:  534:
        1:  535:        conn_set_state(c, conn_closing);
        1:  536:        drive_machine(c);
        -:  537:    }
        -:  538:}
        -:  539:
        -:  540:/* bring conn back from a sidethread. could have had its event base moved. */
      394:  541:void conn_worker_readd(conn *c) {
      394:  542:    if (c->state == conn_io_queue) {
      383:  543:        c->io_queues_submitted--;
        -:  544:        // If we're still waiting for other queues to return, don't re-add the
        -:  545:        // connection yet.
      383:  546:        if (c->io_queues_submitted != 0) {
        -:  547:            return;
        -:  548:        }
        -:  549:    }
      394:  550:    c->ev_flags = EV_READ | EV_PERSIST;
      394:  551:    event_set(&c->event, c->sfd, c->ev_flags, event_handler, (void *)c);
      394:  552:    event_base_set(c->thread->base, &c->event);
        -:  553:
        -:  554:    // TODO: call conn_cleanup/fail/etc
      394:  555:    if (event_add(&c->event, 0) == -1) {
    #####:  556:        perror("event_add");
        -:  557:    }
        -:  558:
        -:  559:    // side thread wanted us to close immediately.
      394:  560:    if (c->state == conn_closing) {
        9:  561:        drive_machine(c);
        9:  562:        return;
      385:  563:    } else if (c->state == conn_io_queue) {
        -:  564:        // machine will know how to return based on secondary state.
      383:  565:        drive_machine(c);
        -:  566:    } else {
        2:  567:        conn_set_state(c, conn_new_cmd);
        -:  568:    }
        -:  569:}
        -:  570:
      468:  571:void thread_io_queue_add(LIBEVENT_THREAD *t, int type, void *ctx, io_queue_stack_cb cb, io_queue_stack_cb com_cb, io_queue_cb ret_cb, io_queue_cb fin_cb) {
      468:  572:    io_queue_cb_t *q = t->io_queues;
      496:  573:    while (q->type != IO_QUEUE_NONE) {
       28:  574:        q++;
        -:  575:    }
      468:  576:    q->type = type;
      468:  577:    q->ctx = ctx;
      468:  578:    q->submit_cb = cb;
      468:  579:    q->complete_cb = com_cb;
      468:  580:    q->finalize_cb = fin_cb;
      468:  581:    q->return_cb   = ret_cb;
      468:  582:    return;
        -:  583:}
        -:  584:
      161:  585:void conn_io_queue_setup(conn *c) {
      161:  586:    io_queue_cb_t *qcb = c->thread->io_queues;
      161:  587:    io_queue_t *q = c->io_queues;
      169:  588:    while (qcb->type != IO_QUEUE_NONE) {
        8:  589:        q->type = qcb->type;
        8:  590:        q->ctx = qcb->ctx;
        8:  591:        q->stack_ctx = NULL;
        8:  592:        q->count = 0;
        8:  593:        qcb++;
        8:  594:        q++;
        -:  595:    }
      161:  596:}
        -:  597:
        -:  598:// To be called from conn_release_items to ensure the stack ptrs are reset.
       27:  599:static void conn_io_queue_reset(conn *c) {
       29:  600:    for (io_queue_t *q = c->io_queues; q->type != IO_QUEUE_NONE; q++) {
       2*:  601:        assert(q->count == 0);
        2:  602:        q->stack_ctx = NULL;
        -:  603:    }
       27:  604:}
        -:  605:
     771*:  606:io_queue_cb_t *thread_io_queue_get(LIBEVENT_THREAD *t, int type) {
     771*:  607:    io_queue_cb_t *q = t->io_queues;
     771*:  608:    while (q->type != IO_QUEUE_NONE) {
     771*:  609:        if (q->type == type) {
    #####:  610:            return q;
        -:  611:        }
    #####:  612:        q++;
        -:  613:    }
        -:  614:    return NULL;
        -:  615:}
        -:  616:
      777:  617:io_queue_t *conn_io_queue_get(conn *c, int type) {
      777:  618:    io_queue_t *q = c->io_queues;
      777:  619:    while (q->type != IO_QUEUE_NONE) {
      777:  620:        if (q->type == type) {
      777:  621:            return q;
        -:  622:        }
    #####:  623:        q++;
        -:  624:    }
        -:  625:    return NULL;
        -:  626:}
        -:  627:
        -:  628:// called after returning to the main worker thread.
        -:  629:// users of the queue need to distinguish if the IO was actually consumed or
        -:  630:// not and handle appropriately.
      383:  631:static void conn_io_queue_complete(conn *c) {
      383:  632:    io_queue_t *q = c->io_queues;
      383:  633:    io_queue_cb_t *qcb = c->thread->io_queues;
      766:  634:    while (q->type != IO_QUEUE_NONE) {
      383:  635:        if (q->stack_ctx) {
      383:  636:            qcb->complete_cb(q);
        -:  637:        }
      383:  638:        qcb++;
      383:  639:        q++;
        -:  640:    }
      383:  641:}
        -:  642:
        -:  643:// called to return a single IO object to the original worker thread.
    #####:  644:void conn_io_queue_return(io_pending_t *io) {
    #####:  645:    io_queue_cb_t *q = thread_io_queue_get(io->thread, io->io_queue_type);
    #####:  646:    q->return_cb(io);
    #####:  647:    return;
        -:  648:}
        -:  649:
      266:  650:conn *conn_new(const int sfd, enum conn_states init_state,
        -:  651:                const int event_flags,
        -:  652:                const int read_buffer_size, enum network_transport transport,
        -:  653:                struct event_base *base, void *ssl, uint64_t conntag,
        -:  654:                enum protocol bproto) {
      266:  655:    conn *c;
        -:  656:
     266*:  657:    assert(sfd >= 0 && sfd < max_fds);
      266:  658:    c = conns[sfd];
        -:  659:
      266:  660:    if (NULL == c) {
      255:  661:        if (!(c = (conn *)calloc(1, sizeof(conn)))) {
    #####:  662:            STATS_LOCK();
    #####:  663:            stats.malloc_fails++;
    #####:  664:            STATS_UNLOCK();
    #####:  665:            fprintf(stderr, "Failed to allocate connection object\n");
    #####:  666:            return NULL;
        -:  667:        }
      255:  668:        MEMCACHED_CONN_CREATE(c);
      255:  669:        c->read = NULL;
      255:  670:        c->sendmsg = NULL;
      255:  671:        c->write = NULL;
      255:  672:        c->rbuf = NULL;
        -:  673:
      255:  674:        c->rsize = read_buffer_size;
        -:  675:
        -:  676:        // UDP connections use a persistent static buffer.
      255:  677:        if (c->rsize) {
      129:  678:            c->rbuf = (char *)malloc((size_t)c->rsize);
        -:  679:        }
        -:  680:
      255:  681:        if (c->rsize && c->rbuf == NULL) {
    #####:  682:            conn_free(c);
    #####:  683:            STATS_LOCK();
    #####:  684:            stats.malloc_fails++;
    #####:  685:            STATS_UNLOCK();
    #####:  686:            fprintf(stderr, "Failed to allocate buffers for connection\n");
    #####:  687:            return NULL;
        -:  688:        }
        -:  689:
        -:  690:
      255:  691:        STATS_LOCK();
      255:  692:        stats_state.conn_structs++;
      255:  693:        STATS_UNLOCK();
        -:  694:
      255:  695:        c->sfd = sfd;
      255:  696:        conns[sfd] = c;
        -:  697:    }
        -:  698:
      266:  699:    c->transport = transport;
      266:  700:    c->protocol = bproto;
      266:  701:    c->tag = conntag;
        -:  702:
        -:  703:    /* unix socket mode doesn't need this, so zeroed out.  but why
        -:  704:     * is this done for every command?  presumably for UDP
        -:  705:     * mode.  */
      266:  706:    if (!settings.socketpath) {
       56:  707:        c->request_addr_size = sizeof(c->request_addr);
        -:  708:    } else {
      210:  709:        c->request_addr_size = 0;
        -:  710:    }
        -:  711:
      266:  712:    if (transport == tcp_transport && init_state == conn_new_cmd) {
       20:  713:        if (getpeername(sfd, (struct sockaddr *) &c->request_addr,
        -:  714:                        &c->request_addr_size)) {
    #####:  715:            perror("getpeername");
    #####:  716:            memset(&c->request_addr, 0, sizeof(c->request_addr));
        -:  717:        }
        -:  718:    }
        -:  719:
      266:  720:    if (init_state == conn_new_cmd) {
      137:  721:        LOGGER_LOG(NULL, LOG_CONNEVENTS, LOGGER_CONNECTION_NEW, NULL,
        -:  722:                &c->request_addr, c->request_addr_size, c->transport, 0, sfd);
        -:  723:    }
        -:  724:
      266:  725:    if (settings.verbose > 1) {
        6:  726:        if (init_state == conn_listening) {
        6:  727:            fprintf(stderr, "<%d server listening (%s)\n", sfd,
        -:  728:                prot_text(c->protocol));
        3:  729:        } else if (IS_UDP(transport)) {
    #####:  730:            fprintf(stderr, "<%d server listening (udp)\n", sfd);
        3:  731:        } else if (c->protocol == negotiating_prot) {
        1:  732:            fprintf(stderr, "<%d new auto-negotiating client connection\n",
        -:  733:                    sfd);
        2:  734:        } else if (c->protocol == ascii_prot) {
        1:  735:            fprintf(stderr, "<%d new ascii client connection.\n", sfd);
        1:  736:        } else if (c->protocol == binary_prot) {
        1:  737:            fprintf(stderr, "<%d new binary client connection.\n", sfd);
        -:  738:#ifdef PROXY
        -:  739:        } else if (c->protocol == proxy_prot) {
        -:  740:            fprintf(stderr, "<%d new proxy client connection.\n", sfd);
        -:  741:#endif
        -:  742:        } else {
    #####:  743:            fprintf(stderr, "<%d new unknown (%d) client connection\n",
        -:  744:                sfd, c->protocol);
    #####:  745:            assert(false);
        -:  746:        }
        -:  747:    }
        -:  748:
        -:  749:#ifdef TLS
        -:  750:    c->ssl = NULL;
        -:  751:    c->ssl_wbuf = NULL;
        -:  752:    c->ssl_enabled = false;
        -:  753:#endif
      266:  754:    c->state = init_state;
      266:  755:    c->rlbytes = 0;
      266:  756:    c->cmd = -1;
      266:  757:    c->rbytes = 0;
      266:  758:    c->rcurr = c->rbuf;
      266:  759:    c->ritem = 0;
      266:  760:    c->rbuf_malloced = false;
      266:  761:    c->item_malloced = false;
      266:  762:    c->sasl_started = false;
      266:  763:    c->set_stale = false;
      266:  764:    c->mset_res = false;
      266:  765:    c->close_after_write = false;
      266:  766:    c->last_cmd_time = current_time; /* initialize for idle kicker */
        -:  767:    // wipe all queues.
      266:  768:    memset(c->io_queues, 0, sizeof(c->io_queues));
      266:  769:    c->io_queues_submitted = 0;
        -:  770:
      266:  771:    c->item = 0;
        -:  772:
      266:  773:    c->noreply = false;
        -:  774:
        -:  775:#ifdef TLS
        -:  776:    if (ssl) {
        -:  777:        c->ssl = (SSL*)ssl;
        -:  778:        c->read = ssl_read;
        -:  779:        c->sendmsg = ssl_sendmsg;
        -:  780:        c->write = ssl_write;
        -:  781:        c->ssl_enabled = true;
        -:  782:        SSL_set_info_callback(c->ssl, ssl_callback);
        -:  783:    } else
        -:  784:#else
        -:  785:    // This must be NULL if TLS is not enabled.
     266*:  786:    assert(ssl == NULL);
        -:  787:#endif
        -:  788:    {
      266:  789:        c->read = tcp_read;
      266:  790:        c->sendmsg = tcp_sendmsg;
      266:  791:        c->write = tcp_write;
        -:  792:    }
        -:  793:
      266:  794:    if (IS_UDP(transport)) {
       24:  795:        c->try_read_command = try_read_command_udp;
        -:  796:    } else {
      242:  797:        switch (c->protocol) {
        7:  798:            case ascii_prot:
        7:  799:                if (settings.auth_file == NULL) {
        4:  800:                    c->authenticated = true;
        4:  801:                    c->try_read_command = try_read_command_ascii;
        -:  802:                } else {
        3:  803:                    c->authenticated = false;
        3:  804:                    c->try_read_command = try_read_command_asciiauth;
        -:  805:                }
        -:  806:                break;
        6:  807:            case binary_prot:
        -:  808:                // binprot handles its own authentication via SASL parsing.
        6:  809:                c->authenticated = false;
        6:  810:                c->try_read_command = try_read_command_binary;
        6:  811:                break;
      229:  812:            case negotiating_prot:
      229:  813:                c->try_read_command = try_read_command_negotiate;
      229:  814:                break;
        -:  815:#ifdef PROXY
        -:  816:            case proxy_prot:
        -:  817:                c->try_read_command = try_read_command_proxy;
        -:  818:                break;
        -:  819:#endif
        -:  820:        }
        -:  821:    }
        -:  822:
      266:  823:    event_set(&c->event, sfd, event_flags, event_handler, (void *)c);
      266:  824:    event_base_set(base, &c->event);
      266:  825:    c->ev_flags = event_flags;
        -:  826:
      266:  827:    if (event_add(&c->event, 0) == -1) {
    #####:  828:        perror("event_add");
    #####:  829:        return NULL;
        -:  830:    }
        -:  831:
      266:  832:    STATS_LOCK();
      266:  833:    stats_state.curr_conns++;
      266:  834:    stats.total_conns++;
      266:  835:    STATS_UNLOCK();
        -:  836:
      266:  837:    MEMCACHED_CONN_ALLOCATE(c->sfd);
        -:  838:
      266:  839:    return c;
        -:  840:}
        -:  841:
   460198:  842:void conn_release_items(conn *c) {
  460198*:  843:    assert(c != NULL);
        -:  844:
   460198:  845:    if (c->item) {
        2:  846:        if (c->item_malloced) {
    #####:  847:            free(c->item);
    #####:  848:            c->item_malloced = false;
        -:  849:        } else {
        2:  850:            item_remove(c->item);
        -:  851:        }
        2:  852:        c->item = 0;
        -:  853:    }
        -:  854:
        -:  855:    // Cull any unsent responses.
   460198:  856:    if (c->resp_head) {
        -:  857:        mc_resp *resp = c->resp_head;
        -:  858:        // r_f() handles the chain maintenance.
      120:  859:        while (resp) {
        -:  860:            // temporary by default. hide behind a debug flag in the future:
        -:  861:            // double free detection. Transmit loops can drop out early, but
        -:  862:            // here we could infinite loop.
       93:  863:            if (resp->free) {
    #####:  864:                fprintf(stderr, "ERROR: double free detected during conn_release_items(): [%d] [%s]\n",
    #####:  865:                        c->sfd, c->protocol == binary_prot ? "binary" : "ascii");
        -:  866:                // Since this is a critical failure, just leak the memory.
        -:  867:                // If these errors are seen, an abort() can be used instead.
    #####:  868:                c->resp_head = NULL;
    #####:  869:                c->resp = NULL;
    #####:  870:                break;
        -:  871:            }
       93:  872:            resp = resp_finish(c, resp);
        -:  873:        }
       27:  874:        conn_io_queue_reset(c);
        -:  875:    }
   460198:  876:}
        -:  877:
      266:  878:static void conn_cleanup(conn *c) {
     266*:  879:    assert(c != NULL);
        -:  880:
      266:  881:    conn_release_items(c);
        -:  882:#ifdef PROXY
        -:  883:    if (c->proxy_coro_ref) {
        -:  884:        proxy_cleanup_conn(c);
        -:  885:    }
        -:  886:#endif
      266:  887:    if (c->sasl_conn) {
    #####:  888:        assert(settings.sasl);
    #####:  889:        sasl_dispose(&c->sasl_conn);
    #####:  890:        c->sasl_conn = NULL;
        -:  891:    }
        -:  892:
      266:  893:    if (IS_UDP(c->transport)) {
       24:  894:        conn_set_state(c, conn_read);
        -:  895:    }
      266:  896:}
        -:  897:
        -:  898:/*
        -:  899: * Frees a connection.
        -:  900: */
    #####:  901:void conn_free(conn *c) {
    #####:  902:    if (c) {
    #####:  903:        assert(c != NULL);
    #####:  904:        assert(c->sfd >= 0 && c->sfd < max_fds);
        -:  905:
    #####:  906:        MEMCACHED_CONN_DESTROY(c);
    #####:  907:        conns[c->sfd] = NULL;
    #####:  908:        if (c->rbuf)
    #####:  909:            free(c->rbuf);
        -:  910:#ifdef TLS
        -:  911:        if (c->ssl_wbuf)
        -:  912:            c->ssl_wbuf = NULL;
        -:  913:#endif
        -:  914:
    #####:  915:        free(c);
        -:  916:    }
    #####:  917:}
        -:  918:
      266:  919:static void conn_close(conn *c) {
     266*:  920:    assert(c != NULL);
        -:  921:
      266:  922:    if (c->thread) {
     161*:  923:        LOGGER_LOG(c->thread->l, LOG_CONNEVENTS, LOGGER_CONNECTION_CLOSE, NULL,
        -:  924:                &c->request_addr, c->request_addr_size, c->transport,
        -:  925:                c->close_reason, c->sfd);
        -:  926:    }
        -:  927:
        -:  928:    /* delete the event, the socket and the conn */
      266:  929:    event_del(&c->event);
        -:  930:
      266:  931:    if (settings.verbose > 1)
        6:  932:        fprintf(stderr, "<%d connection closed.\n", c->sfd);
        -:  933:
      266:  934:    conn_cleanup(c);
        -:  935:
        -:  936:    // force release of read buffer.
      266:  937:    if (c->thread) {
      161:  938:        c->rbytes = 0;
      161:  939:        rbuf_release(c);
        -:  940:    }
        -:  941:
      266:  942:    MEMCACHED_CONN_RELEASE(c->sfd);
      266:  943:    conn_set_state(c, conn_closed);
        -:  944:#ifdef TLS
        -:  945:    if (c->ssl) {
        -:  946:        SSL_shutdown(c->ssl);
        -:  947:        SSL_free(c->ssl);
        -:  948:    }
        -:  949:#endif
      266:  950:    close(c->sfd);
      266:  951:    c->close_reason = 0;
      266:  952:    pthread_mutex_lock(&conn_lock);
      266:  953:    allow_new_conns = true;
      266:  954:    pthread_mutex_unlock(&conn_lock);
        -:  955:
      266:  956:    STATS_LOCK();
      266:  957:    stats_state.curr_conns--;
      266:  958:    STATS_UNLOCK();
        -:  959:
      266:  960:    return;
        -:  961:}
        -:  962:
        -:  963:// Since some connections might be off on side threads and some are managed as
        -:  964:// listeners we need to walk through them all from a central point.
        -:  965:// Must be called with all worker threads hung or in the process of closing.
      102:  966:void conn_close_all(void) {
      102:  967:    int i;
   104550:  968:    for (i = 0; i < max_fds; i++) {
   104448:  969:        if (conns[i] && conns[i]->state != conn_closed) {
      136:  970:            conn_close(conns[i]);
        -:  971:        }
        -:  972:    }
      102:  973:}
        -:  974:
        -:  975:/**
        -:  976: * Convert a state name to a human readable form.
        -:  977: */
       16:  978:static const char *state_text(enum conn_states state) {
       16:  979:    const char* const statenames[] = { "conn_listening",
        -:  980:                                       "conn_new_cmd",
        -:  981:                                       "conn_waiting",
        -:  982:                                       "conn_read",
        -:  983:                                       "conn_parse_cmd",
        -:  984:                                       "conn_write",
        -:  985:                                       "conn_nread",
        -:  986:                                       "conn_swallow",
        -:  987:                                       "conn_closing",
        -:  988:                                       "conn_mwrite",
        -:  989:                                       "conn_closed",
        -:  990:                                       "conn_watch",
        -:  991:                                       "conn_io_queue" };
       16:  992:    return statenames[state];
        -:  993:}
        -:  994:
        -:  995:/*
        -:  996: * Sets a connection's current state in the state machine. Any special
        -:  997: * processing that needs to happen on certain state transitions can
        -:  998: * happen here.
        -:  999: */
  3230137: 1000:void conn_set_state(conn *c, enum conn_states state) {
 3230137*: 1001:    assert(c != NULL);
 3230137*: 1002:    assert(state >= conn_listening && state < conn_max_state);
        -: 1003:
  3230137: 1004:    if (state != c->state) {
  3230112: 1005:        if (settings.verbose > 2) {
    #####: 1006:            fprintf(stderr, "%d: going from %s to %s\n",
        -: 1007:                    c->sfd, state_text(c->state),
        -: 1008:                    state_text(state));
        -: 1009:        }
        -: 1010:
  3230112: 1011:        if (state == conn_write || state == conn_mwrite) {
  3230112: 1012:            MEMCACHED_PROCESS_COMMAND_END(c->sfd, c->resp->wbuf, c->resp->wbytes);
        -: 1013:        }
  3230112: 1014:        c->state = state;
        -: 1015:    }
  3230137: 1016:}
        -: 1017:
        -: 1018:/*
        -: 1019: * response object helper functions
        -: 1020: */
   460026: 1021:void resp_reset(mc_resp *resp) {
   460026: 1022:    if (resp->item) {
    #####: 1023:        item_remove(resp->item);
    #####: 1024:        resp->item = NULL;
        -: 1025:    }
   460026: 1026:    if (resp->write_and_free) {
    #####: 1027:        free(resp->write_and_free);
    #####: 1028:        resp->write_and_free = NULL;
        -: 1029:    }
   460026: 1030:    resp->wbytes = 0;
   460026: 1031:    resp->tosend = 0;
   460026: 1032:    resp->iovcnt = 0;
   460026: 1033:    resp->chunked_data_iov = 0;
   460026: 1034:    resp->chunked_total = 0;
   460026: 1035:    resp->skip = false;
   460026: 1036:}
        -: 1037:
   527133: 1038:void resp_add_iov(mc_resp *resp, const void *buf, int len) {
  527133*: 1039:    assert(resp->iovcnt < MC_RESP_IOVCOUNT);
   527133: 1040:    int x = resp->iovcnt;
   527133: 1041:    resp->iov[x].iov_base = (void *)buf;
   527133: 1042:    resp->iov[x].iov_len = len;
   527133: 1043:    resp->iovcnt++;
   527133: 1044:    resp->tosend += len;
   527133: 1045:}
        -: 1046:
        -: 1047:// Notes that an IOV should be handled as a chunked item header.
        -: 1048:// TODO: I'm hoping this isn't a permanent abstraction while I learn what the
        -: 1049:// API should be.
    18975: 1050:void resp_add_chunked_iov(mc_resp *resp, const void *buf, int len) {
    18975: 1051:    resp->chunked_data_iov = resp->iovcnt;
    18975: 1052:    resp->chunked_total = len;
    18975: 1053:    resp_add_iov(resp, buf, len);
    18975: 1054:}
        -: 1055:
        -: 1056:// resp_allocate and resp_free are a wrapper around read buffers which makes
        -: 1057:// read buffers the only network memory to track.
        -: 1058:// Normally this would be too excessive. In this case it allows end users to
        -: 1059:// track a single memory limit for ephemeral connection buffers.
        -: 1060:// Fancy bit twiddling tricks are avoided to help keep this straightforward.
   613960: 1061:static mc_resp* resp_allocate(conn *c) {
   613960: 1062:    LIBEVENT_THREAD *th = c->thread;
   613960: 1063:    mc_resp *resp = NULL;
   613960: 1064:    mc_resp_bundle *b = th->open_bundle;
        -: 1065:
   613960: 1066:    if (b != NULL) {
  607569*: 1067:        for (int i = 0; i < MAX_RESP_PER_BUNDLE; i++) {
        -: 1068:            // loop around starting from the most likely to be free
   607569: 1069:            int x = (i + b->next_check) % MAX_RESP_PER_BUNDLE;
   607569: 1070:            if (b->r[x].free) {
   607569: 1071:                resp = &b->r[x];
   607569: 1072:                b->next_check = x+1;
   607569: 1073:                break;
        -: 1074:            }
        -: 1075:        }
        -: 1076:
   607569: 1077:        if (resp != NULL) {
   607569: 1078:            b->refcount++;
   607569: 1079:            resp->free = false;
   607569: 1080:            if (b->refcount == MAX_RESP_PER_BUNDLE) {
    6280*: 1081:                assert(b->prev == NULL);
        -: 1082:                // We only allocate off the head. Assign new head.
     6280: 1083:                th->open_bundle = b->next;
        -: 1084:                // Remove ourselves from the list.
     6280: 1085:                if (b->next) {
    #####: 1086:                    b->next->prev = 0;
    #####: 1087:                    b->next = 0;
        -: 1088:                }
        -: 1089:            }
        -: 1090:        }
        -: 1091:    }
        -: 1092:
   607569: 1093:    if (resp == NULL) {
    6391*: 1094:        assert(th->open_bundle == NULL);
     6391: 1095:        b = do_cache_alloc(th->rbuf_cache);
     6391: 1096:        if (b) {
     6389: 1097:            THR_STATS_LOCK(c);
     6389: 1098:            c->thread->stats.response_obj_bytes += READ_BUFFER_SIZE;
     6389: 1099:            THR_STATS_UNLOCK(c);
     6389: 1100:            b->next_check = 1;
     6389: 1101:            b->refcount = 1;
    89446: 1102:            for (int i = 0; i < MAX_RESP_PER_BUNDLE; i++) {
    83057: 1103:                b->r[i].bundle = b;
    83057: 1104:                b->r[i].free = true;
        -: 1105:            }
     6389: 1106:            b->next = 0;
     6389: 1107:            b->prev = 0;
     6389: 1108:            th->open_bundle = b;
     6389: 1109:            resp = &b->r[0];
     6389: 1110:            resp->free = false;
        -: 1111:        } else {
        -: 1112:            return NULL;
        -: 1113:        }
        -: 1114:    }
        -: 1115:
        -: 1116:    return resp;
        -: 1117:}
        -: 1118:
   613958: 1119:static void resp_free(conn *c, mc_resp *resp) {
   613958: 1120:    LIBEVENT_THREAD *th = c->thread;
   613958: 1121:    mc_resp_bundle *b = resp->bundle;
        -: 1122:
   613958: 1123:    resp->free = true;
   613958: 1124:    b->refcount--;
   613958: 1125:    if (b->refcount == 0) {
   466221: 1126:        if (b == th->open_bundle && b->next == 0) {
        -: 1127:            // This is the final bundle. Just hold and reuse to skip init loop
  459953*: 1128:            assert(b->prev == 0);
   459953: 1129:            b->next_check = 0;
        -: 1130:        } else {
        -: 1131:            // Assert that we're either in the list or at the head.
    6268*: 1132:            assert((b->next || b->prev) || b == th->open_bundle);
        -: 1133:
        -: 1134:            // unlink from list.
     6268: 1135:            mc_resp_bundle **head = &th->open_bundle;
     6268: 1136:            if (*head == b) *head = b->next;
        -: 1137:            // Not tracking the tail.
    6268*: 1138:            assert(b->next != b && b->prev != b);
        -: 1139:
     6268: 1140:            if (b->next) b->next->prev = b->prev;
    6268*: 1141:            if (b->prev) b->prev->next = b->next;
        -: 1142:
        -: 1143:            // Now completely done with this buffer.
     6268: 1144:            do_cache_free(th->rbuf_cache, b);
     6268: 1145:            THR_STATS_LOCK(c);
     6268: 1146:            c->thread->stats.response_obj_bytes -= READ_BUFFER_SIZE;
     6268: 1147:            THR_STATS_UNLOCK(c);
        -: 1148:        }
        -: 1149:    } else {
   147737: 1150:        mc_resp_bundle **head = &th->open_bundle;
        -: 1151:        // NOTE: since we're not tracking tail, latest free ends up in head.
   147737: 1152:        if (b == th->open_bundle || (b->prev || b->next)) {
        -: 1153:            // If we're already linked, leave it in place to save CPU.
        -: 1154:        } else {
        -: 1155:            // Non-zero refcount, need to link into the freelist.
     6280: 1156:            b->prev = 0;
     6280: 1157:            b->next = *head;
     6280: 1158:            if (b->next) b->next->prev = b;
     6280: 1159:            *head = b;
        -: 1160:        }
        -: 1161:
        -: 1162:    }
   613958: 1163:}
        -: 1164:
   613960: 1165:bool resp_start(conn *c) {
   613960: 1166:    mc_resp *resp = resp_allocate(c);
   613960: 1167:    if (!resp) {
        2: 1168:        THR_STATS_LOCK(c);
        2: 1169:        c->thread->stats.response_obj_oom++;
        2: 1170:        THR_STATS_UNLOCK(c);
        2: 1171:        return false;
        -: 1172:    }
        -: 1173:    // handling the stats counters here to simplify testing
   613958: 1174:    THR_STATS_LOCK(c);
   613958: 1175:    c->thread->stats.response_obj_count++;
   613958: 1176:    THR_STATS_UNLOCK(c);
        -: 1177:    // Skip zeroing the bundle pointer at the start.
        -: 1178:    // TODO: this line is here temporarily to make the code easy to disable.
        -: 1179:    // when it's more mature, move the memset into resp_allocate() and have it
        -: 1180:    // set the bundle pointer on allocate so this line isn't as complex.
   613958: 1181:    memset((char *)resp + sizeof(mc_resp_bundle*), 0, sizeof(*resp) - sizeof(mc_resp_bundle*));
        -: 1182:    // TODO: this next line works. memset _does_ show up significantly under
        -: 1183:    // perf reports due to zeroing out the entire resp->wbuf. before swapping
        -: 1184:    // the lines more validation work should be done to ensure wbuf's aren't
        -: 1185:    // accidentally reused without being written to.
        -: 1186:    //memset((char *)resp + sizeof(mc_resp_bundle*), 0, offsetof(mc_resp, wbuf));
   613958: 1187:    if (!c->resp_head) {
   459955: 1188:        c->resp_head = resp;
        -: 1189:    }
   613958: 1190:    if (!c->resp) {
   459955: 1191:        c->resp = resp;
        -: 1192:    } else {
   154003: 1193:        c->resp->next = resp;
   154003: 1194:        c->resp = resp;
        -: 1195:    }
   613958: 1196:    if (IS_UDP(c->transport)) {
        -: 1197:        // need to hold on to some data for async responses.
       18: 1198:        c->resp->request_id = c->request_id;
       18: 1199:        c->resp->request_addr = c->request_addr;
       18: 1200:        c->resp->request_addr_size = c->request_addr_size;
        -: 1201:    }
        -: 1202:    return true;
        -: 1203:}
        -: 1204:
        -: 1205:// returns next response in chain.
   613958: 1206:mc_resp* resp_finish(conn *c, mc_resp *resp) {
   613958: 1207:    mc_resp *next = resp->next;
   613958: 1208:    if (resp->item) {
        -: 1209:        // TODO: cache hash value in resp obj?
    55029: 1210:        item_remove(resp->item);
    55029: 1211:        resp->item = NULL;
        -: 1212:    }
   613958: 1213:    if (resp->write_and_free) {
     1629: 1214:        free(resp->write_and_free);
        -: 1215:    }
   613958: 1216:    if (resp->io_pending) {
        -: 1217:        // If we had a pending IO, tell it to internally clean up then return
        -: 1218:        // the main object back to our thread cache.
      388: 1219:        io_queue_cb_t *qcb = thread_io_queue_get(c->thread, resp->io_pending->io_queue_type);
      388: 1220:        qcb->finalize_cb(resp->io_pending);
      388: 1221:        do_cache_free(c->thread->io_cache, resp->io_pending);
      388: 1222:        resp->io_pending = NULL;
        -: 1223:    }
   613958: 1224:    if (c->resp_head == resp) {
   613958: 1225:        c->resp_head = next;
        -: 1226:    }
   613958: 1227:    if (c->resp == resp) {
   459955: 1228:        c->resp = NULL;
        -: 1229:    }
   613958: 1230:    resp_free(c, resp);
   613958: 1231:    THR_STATS_LOCK(c);
   613958: 1232:    c->thread->stats.response_obj_count--;
   613958: 1233:    THR_STATS_UNLOCK(c);
   613958: 1234:    return next;
        -: 1235:}
        -: 1236:
        -: 1237:// tells if connection has a depth of response objects to process.
       13: 1238:bool resp_has_stack(conn *c) {
       13: 1239:    return c->resp_head->next != NULL ? true : false;
        -: 1240:}
        -: 1241:
   445076: 1242:void out_string(conn *c, const char *str) {
   445076: 1243:    size_t len;
  445076*: 1244:    assert(c != NULL);
   445076: 1245:    mc_resp *resp = c->resp;
        -: 1246:
        -: 1247:    // if response was original filled with something, but we're now writing
        -: 1248:    // out an error or similar, have to reset the object first.
        -: 1249:    // TODO: since this is often redundant with allocation, how many callers
        -: 1250:    // are actually requiring it be reset? Can we fast test by just looking at
        -: 1251:    // tosend and reset if nonzero?
   445076: 1252:    resp_reset(resp);
        -: 1253:
   445076: 1254:    if (c->noreply) {
        -: 1255:        // TODO: just invalidate the response since nothing's been attempted
        -: 1256:        // to send yet?
   162854: 1257:        resp->skip = true;
   162854: 1258:        if (settings.verbose > 1)
    #####: 1259:            fprintf(stderr, ">%d NOREPLY %s\n", c->sfd, str);
   162854: 1260:        conn_set_state(c, conn_new_cmd);
   162854: 1261:        return;
        -: 1262:    }
        -: 1263:
   282222: 1264:    if (settings.verbose > 1)
    #####: 1265:        fprintf(stderr, ">%d %s\n", c->sfd, str);
        -: 1266:
        -: 1267:    // Fill response object with static string.
        -: 1268:
   282222: 1269:    len = strlen(str);
   282222: 1270:    if ((len + 2) > WRITE_BUFFER_SIZE) {
        -: 1271:        /* ought to be always enough. just fail for simplicity */
    #####: 1272:        str = "SERVER_ERROR output line too long";
    #####: 1273:        len = strlen(str);
        -: 1274:    }
        -: 1275:
   282222: 1276:    memcpy(resp->wbuf, str, len);
   282222: 1277:    memcpy(resp->wbuf + len, "\r\n", 2);
   282222: 1278:    resp_add_iov(resp, resp->wbuf, len + 2);
        -: 1279:
   282222: 1280:    conn_set_state(c, conn_new_cmd);
   282222: 1281:    return;
        -: 1282:}
        -: 1283:
        -: 1284:// For metaget-style ASCII commands. Ignores noreply, ensuring clients see
        -: 1285:// protocol level errors.
        4: 1286:void out_errstring(conn *c, const char *str) {
        4: 1287:    c->noreply = false;
        4: 1288:    out_string(c, str);
        4: 1289:}
        -: 1290:
        -: 1291:/*
        -: 1292: * Outputs a protocol-specific "out of memory" error. For ASCII clients,
        -: 1293: * this is equivalent to out_string().
        -: 1294: */
        7: 1295:void out_of_memory(conn *c, char *ascii_error) {
        7: 1296:    const static char error_prefix[] = "SERVER_ERROR ";
        7: 1297:    const static int error_prefix_len = sizeof(error_prefix) - 1;
        -: 1298:
        7: 1299:    if (c->protocol == binary_prot) {
        -: 1300:        /* Strip off the generic error prefix; it's irrelevant in binary */
    #####: 1301:        if (!strncmp(ascii_error, error_prefix, error_prefix_len)) {
    #####: 1302:            ascii_error += error_prefix_len;
        -: 1303:        }
    #####: 1304:        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, ascii_error, 0);
        -: 1305:    } else {
        7: 1306:        out_string(c, ascii_error);
        -: 1307:    }
        7: 1308:}
        -: 1309:
     2562: 1310:static void append_bin_stats(const char *key, const uint16_t klen,
        -: 1311:                             const char *val, const uint32_t vlen,
        -: 1312:                             conn *c) {
     2562: 1313:    char *buf = c->stats.buffer + c->stats.offset;
     2562: 1314:    uint32_t bodylen = klen + vlen;
     2562: 1315:    protocol_binary_response_header header = {
        -: 1316:        .response.magic = (uint8_t)PROTOCOL_BINARY_RES,
        -: 1317:        .response.opcode = PROTOCOL_BINARY_CMD_STAT,
     2562: 1318:        .response.keylen = (uint16_t)htons(klen),
        -: 1319:        .response.datatype = (uint8_t)PROTOCOL_BINARY_RAW_BYTES,
     2562: 1320:        .response.bodylen = htonl(bodylen),
     2562: 1321:        .response.opaque = c->opaque
        -: 1322:    };
        -: 1323:
     2562: 1324:    memcpy(buf, header.bytes, sizeof(header.response));
     2562: 1325:    buf += sizeof(header.response);
        -: 1326:
     2562: 1327:    if (klen > 0) {
     2526: 1328:        memcpy(buf, key, klen);
     2526: 1329:        buf += klen;
        -: 1330:
     2526: 1331:        if (vlen > 0) {
     2526: 1332:            memcpy(buf, val, vlen);
        -: 1333:        }
        -: 1334:    }
        -: 1335:
     2562: 1336:    c->stats.offset += sizeof(header.response) + bodylen;
     2562: 1337:}
        -: 1338:
   140854: 1339:static void append_ascii_stats(const char *key, const uint16_t klen,
        -: 1340:                               const char *val, const uint32_t vlen,
        -: 1341:                               conn *c) {
   140854: 1342:    char *pos = c->stats.buffer + c->stats.offset;
   140854: 1343:    uint32_t nbytes = 0;
   140854: 1344:    int remaining = c->stats.size - c->stats.offset;
   140854: 1345:    int room = remaining - 1;
        -: 1346:
   140854: 1347:    if (klen == 0 && vlen == 0) {
     1583: 1348:        nbytes = snprintf(pos, room, "END\r\n");
   139271: 1349:    } else if (vlen == 0) {
    #####: 1350:        nbytes = snprintf(pos, room, "STAT %s\r\n", key);
        -: 1351:    } else {
   139271: 1352:        nbytes = snprintf(pos, room, "STAT %s %s\r\n", key, val);
        -: 1353:    }
        -: 1354:
   140854: 1355:    c->stats.offset += nbytes;
   140854: 1356:}
        -: 1357:
   143416: 1358:static bool grow_stats_buf(conn *c, size_t needed) {
   143416: 1359:    size_t nsize = c->stats.size;
   143416: 1360:    size_t available = nsize - c->stats.offset;
   143416: 1361:    bool rv = true;
        -: 1362:
        -: 1363:    /* Special case: No buffer -- need to allocate fresh */
   143416: 1364:    if (c->stats.buffer == NULL) {
     1619: 1365:        nsize = 1024;
     1619: 1366:        available = c->stats.size = c->stats.offset = 0;
        -: 1367:    }
        -: 1368:
   146496: 1369:    while (needed > available) {
    3080*: 1370:        assert(nsize > 0);
     3080: 1371:        nsize = nsize << 1;
     3080: 1372:        available = nsize - c->stats.offset;
        -: 1373:    }
        -: 1374:
   143416: 1375:    if (nsize != c->stats.size) {
     3080: 1376:        char *ptr = realloc(c->stats.buffer, nsize);
     3080: 1377:        if (ptr) {
     3080: 1378:            c->stats.buffer = ptr;
     3080: 1379:            c->stats.size = nsize;
        -: 1380:        } else {
    #####: 1381:            STATS_LOCK();
    #####: 1382:            stats.malloc_fails++;
    #####: 1383:            STATS_UNLOCK();
    #####: 1384:            rv = false;
        -: 1385:        }
        -: 1386:    }
        -: 1387:
   143416: 1388:    return rv;
        -: 1389:}
        -: 1390:
   143416: 1391:void append_stats(const char *key, const uint16_t klen,
        -: 1392:                  const char *val, const uint32_t vlen,
        -: 1393:                  const void *cookie)
        -: 1394:{
        -: 1395:    /* value without a key is invalid */
   143416: 1396:    if (klen == 0 && vlen > 0) {
        -: 1397:        return;
        -: 1398:    }
        -: 1399:
   143416: 1400:    conn *c = (conn*)cookie;
        -: 1401:
   143416: 1402:    if (c->protocol == binary_prot) {
     2562: 1403:        size_t needed = vlen + klen + sizeof(protocol_binary_response_header);
     2562: 1404:        if (!grow_stats_buf(c, needed)) {
        -: 1405:            return;
        -: 1406:        }
     2562: 1407:        append_bin_stats(key, klen, val, vlen, c);
        -: 1408:    } else {
   140854: 1409:        size_t needed = vlen + klen + 10; // 10 == "STAT = \r\n"
   140854: 1410:        if (!grow_stats_buf(c, needed)) {
        -: 1411:            return;
        -: 1412:        }
   140854: 1413:        append_ascii_stats(key, klen, val, vlen, c);
        -: 1414:    }
        -: 1415:
  143416*: 1416:    assert(c->stats.offset <= c->stats.size);
        -: 1417:}
        -: 1418:
   932486: 1419:static void reset_cmd_handler(conn *c) {
   932486: 1420:    c->cmd = -1;
   932486: 1421:    c->substate = bin_no_state;
   932486: 1422:    if (c->item != NULL) {
        -: 1423:        // TODO: Any other way to get here?
        -: 1424:        // SASL auth was mistakenly using it. Nothing else should?
    #####: 1425:        if (c->item_malloced) {
    #####: 1426:            free(c->item);
    #####: 1427:            c->item_malloced = false;
        -: 1428:        } else {
    #####: 1429:            item_remove(c->item);
        -: 1430:        }
    #####: 1431:        c->item = NULL;
        -: 1432:    }
   932486: 1433:    if (c->rbytes > 0) {
   149891: 1434:        conn_set_state(c, conn_parse_cmd);
   782595: 1435:    } else if (c->resp_head) {
   334223: 1436:        conn_set_state(c, conn_mwrite);
        -: 1437:    } else {
   448372: 1438:        conn_set_state(c, conn_waiting);
        -: 1439:    }
   932486: 1440:}
        -: 1441:
   325878: 1442:static void complete_nread(conn *c) {
  325878*: 1443:    assert(c != NULL);
        -: 1444:#ifdef PROXY
        -: 1445:    assert(c->protocol == ascii_prot
        -: 1446:           || c->protocol == binary_prot
        -: 1447:           || c->protocol == proxy_prot);
        -: 1448:#else
  325878*: 1449:    assert(c->protocol == ascii_prot
        -: 1450:           || c->protocol == binary_prot);
        -: 1451:#endif
   325878: 1452:    if (c->protocol == ascii_prot) {
   301552: 1453:        complete_nread_ascii(c);
    24326: 1454:    } else if (c->protocol == binary_prot) {
    24326: 1455:        complete_nread_binary(c);
        -: 1456:#ifdef PROXY
        -: 1457:    } else if (c->protocol == proxy_prot) {
        -: 1458:        complete_nread_proxy(c);
        -: 1459:#endif
        -: 1460:    }
   325878: 1461:}
        -: 1462:
        -: 1463:/* Destination must always be chunked */
        -: 1464:/* This should be part of item.c */
    27032: 1465:static int _store_item_copy_chunks(item *d_it, item *s_it, const int len) {
    27032: 1466:    item_chunk *dch = (item_chunk *) ITEM_schunk(d_it);
        -: 1467:    /* Advance dch until we find free space */
    77099: 1468:    while (dch->size == dch->used) {
    77099: 1469:        if (dch->next) {
        -: 1470:            dch = dch->next;
        -: 1471:        } else {
        -: 1472:            break;
        -: 1473:        }
        -: 1474:    }
        -: 1475:
    27032: 1476:    if (s_it->it_flags & ITEM_CHUNKED) {
    13516: 1477:        int remain = len;
    13516: 1478:        item_chunk *sch = (item_chunk *) ITEM_schunk(s_it);
    13516: 1479:        int copied = 0;
        -: 1480:        /* Fills dch's to capacity, not straight copy sch in case data is
        -: 1481:         * being added or removed (ie append/prepend)
        -: 1482:         */
   136671: 1483:        while (sch && dch && remain) {
  123155*: 1484:            assert(dch->used <= dch->size);
   123155: 1485:            int todo = (dch->size - dch->used < sch->used - copied)
        -: 1486:                ? dch->size - dch->used : sch->used - copied;
   123155: 1487:            if (remain < todo)
        -: 1488:                todo = remain;
   123155: 1489:            memcpy(dch->data + dch->used, sch->data + copied, todo);
   123155: 1490:            dch->used += todo;
   123155: 1491:            copied += todo;
   123155: 1492:            remain -= todo;
  123155*: 1493:            assert(dch->used <= dch->size);
   123155: 1494:            if (dch->size == dch->used) {
    73103: 1495:                item_chunk *tch = do_item_alloc_chunk(dch, remain);
    73103: 1496:                if (tch) {
        -: 1497:                    dch = tch;
        -: 1498:                } else {
        -: 1499:                    return -1;
        -: 1500:                }
        -: 1501:            }
  123155*: 1502:            assert(copied <= sch->used);
   123155: 1503:            if (copied == sch->used) {
    93361: 1504:                copied = 0;
    93361: 1505:                sch = sch->next;
        -: 1506:            }
        -: 1507:        }
        -: 1508:        /* assert that the destination had enough space for the source */
   13516*: 1509:        assert(remain == 0);
        -: 1510:    } else {
        -: 1511:        int done = 0;
        -: 1512:        /* Fill dch's via a non-chunked item. */
    40548: 1513:        while (len > done && dch) {
    27032: 1514:            int todo = (dch->size - dch->used < len - done)
        -: 1515:                ? dch->size - dch->used : len - done;
        -: 1516:            //assert(dch->size - dch->used != 0);
    27032: 1517:            memcpy(dch->data + dch->used, ITEM_data(s_it) + done, todo);
    27032: 1518:            done += todo;
    27032: 1519:            dch->used += todo;
   27032*: 1520:            assert(dch->used <= dch->size);
    27032: 1521:            if (dch->size == dch->used) {
    27032: 1522:                item_chunk *tch = do_item_alloc_chunk(dch, len - done);
    27032: 1523:                if (tch) {
        -: 1524:                    dch = tch;
        -: 1525:                } else {
        -: 1526:                    return -1;
        -: 1527:                }
        -: 1528:            }
        -: 1529:        }
   13516*: 1530:        assert(len == done);
        -: 1531:    }
        -: 1532:    return 0;
        -: 1533:}
        -: 1534:
    16014: 1535:static int _store_item_copy_data(int comm, item *old_it, item *new_it, item *add_it) {
    16014: 1536:    if (comm == NREAD_APPEND) {
     8007: 1537:        if (new_it->it_flags & ITEM_CHUNKED) {
    13516: 1538:            if (_store_item_copy_chunks(new_it, old_it, old_it->nbytes - 2) == -1 ||
     6758: 1539:                _store_item_copy_chunks(new_it, add_it, add_it->nbytes) == -1) {
    #####: 1540:                return -1;
        -: 1541:            }
        -: 1542:        } else {
     1249: 1543:            memcpy(ITEM_data(new_it), ITEM_data(old_it), old_it->nbytes);
     1249: 1544:            memcpy(ITEM_data(new_it) + old_it->nbytes - 2 /* CRLF */, ITEM_data(add_it), add_it->nbytes);
        -: 1545:        }
        -: 1546:    } else {
        -: 1547:        /* NREAD_PREPEND */
     8007: 1548:        if (new_it->it_flags & ITEM_CHUNKED) {
    13516: 1549:            if (_store_item_copy_chunks(new_it, add_it, add_it->nbytes - 2) == -1 ||
     6758: 1550:                _store_item_copy_chunks(new_it, old_it, old_it->nbytes) == -1) {
    #####: 1551:                return -1;
        -: 1552:            }
        -: 1553:        } else {
     1249: 1554:            memcpy(ITEM_data(new_it), ITEM_data(add_it), add_it->nbytes);
     1249: 1555:            memcpy(ITEM_data(new_it) + add_it->nbytes - 2 /* CRLF */, ITEM_data(old_it), old_it->nbytes);
        -: 1556:        }
        -: 1557:    }
        -: 1558:    return 0;
        -: 1559:}
        -: 1560:
        -: 1561:/*
        -: 1562: * Stores an item in the cache according to the semantics of one of the set
        -: 1563: * commands. Protected by the item lock.
        -: 1564: *
        -: 1565: * Returns the state of storage.
        -: 1566: */
   325947: 1567:enum store_item_type do_store_item(item *it, int comm, conn *c, const uint32_t hv) {
   325947: 1568:    char *key = ITEM_key(it);
   325947: 1569:    item *old_it = do_item_get(key, it->nkey, hv, c, DONT_UPDATE);
   325947: 1570:    enum store_item_type stored = NOT_STORED;
        -: 1571:
   325947: 1572:    enum cas_result { CAS_NONE, CAS_MATCH, CAS_BADVAL, CAS_STALE, CAS_MISS };
        -: 1573:
   325947: 1574:    item *new_it = NULL;
   325947: 1575:    uint32_t flags;
        -: 1576:
        -: 1577:    /* Do the CAS test up front so we can apply to all store modes */
   325947: 1578:    enum cas_result cas_res = CAS_NONE;
        -: 1579:
   325947: 1580:    bool do_store = false;
   325947: 1581:    if (old_it != NULL) {
        -: 1582:        // Most of the CAS work requires something to compare to.
    36403: 1583:        uint64_t it_cas = ITEM_get_cas(it);
    36403: 1584:        uint64_t old_cas = ITEM_get_cas(old_it);
    36403: 1585:        if (it_cas == 0) {
        -: 1586:            cas_res = CAS_NONE;
       20: 1587:        } else if (it_cas == old_cas) {
        -: 1588:            cas_res = CAS_MATCH;
        9: 1589:        } else if (c->set_stale && it_cas < old_cas) {
        -: 1590:            cas_res = CAS_STALE;
        -: 1591:        } else {
        8: 1592:            cas_res = CAS_BADVAL;
        -: 1593:        }
        -: 1594:
    36403: 1595:        switch (comm) {
      648: 1596:            case NREAD_ADD:
        -: 1597:                /* add only adds a nonexistent item, but promote to head of LRU */
      648: 1598:                do_item_update(old_it);
      648: 1599:                break;
       22: 1600:            case NREAD_CAS:
       22: 1601:                if (cas_res == CAS_MATCH) {
        -: 1602:                    // cas validates
        -: 1603:                    // it and old_it may belong to different classes.
        -: 1604:                    // I'm updating the stats for the one that's getting pushed out
       11: 1605:                    pthread_mutex_lock(&c->thread->stats.mutex);
       11: 1606:                    c->thread->stats.slab_stats[ITEM_clsid(old_it)].cas_hits++;
       11: 1607:                    pthread_mutex_unlock(&c->thread->stats.mutex);
       11: 1608:                    do_store = true;
       11: 1609:                } else if (cas_res == CAS_STALE) {
        -: 1610:                    // if we're allowed to set a stale value, CAS must be lower than
        -: 1611:                    // the current item's CAS.
        -: 1612:                    // This replaces the value, but should preserve TTL, and stale
        -: 1613:                    // item marker bit + token sent if exists.
        1: 1614:                    it->exptime = old_it->exptime;
        1: 1615:                    it->it_flags |= ITEM_STALE;
        1: 1616:                    if (old_it->it_flags & ITEM_TOKEN_SENT) {
        1: 1617:                        it->it_flags |= ITEM_TOKEN_SENT;
        -: 1618:                    }
        -: 1619:
        1: 1620:                    pthread_mutex_lock(&c->thread->stats.mutex);
        1: 1621:                    c->thread->stats.slab_stats[ITEM_clsid(old_it)].cas_hits++;
        1: 1622:                    pthread_mutex_unlock(&c->thread->stats.mutex);
        1: 1623:                    do_store = true;
        -: 1624:                } else {
        -: 1625:                    // NONE or BADVAL are the same for CAS cmd
       10: 1626:                    pthread_mutex_lock(&c->thread->stats.mutex);
       10: 1627:                    c->thread->stats.slab_stats[ITEM_clsid(old_it)].cas_badval++;
       10: 1628:                    pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1629:
       10: 1630:                    if (settings.verbose > 1) {
    #####: 1631:                        fprintf(stderr, "CAS:  failure: expected %llu, got %llu\n",
    #####: 1632:                                (unsigned long long)ITEM_get_cas(old_it),
    #####: 1633:                                (unsigned long long)ITEM_get_cas(it));
        -: 1634:                    }
        -: 1635:                    stored = EXISTS;
        -: 1636:                }
        -: 1637:                break;
    16016: 1638:            case NREAD_APPEND:
        -: 1639:            case NREAD_PREPEND:
    16016: 1640:                if (cas_res != CAS_NONE && cas_res != CAS_MATCH) {
        -: 1641:                    stored = EXISTS;
        -: 1642:                    break;
        -: 1643:                }
        -: 1644:#ifdef EXTSTORE
    16016: 1645:                if ((old_it->it_flags & ITEM_HDR) != 0) {
        -: 1646:                    /* block append/prepend from working with extstore-d items.
        -: 1647:                     * leave response code to NOT_STORED default */
        -: 1648:                    break;
        -: 1649:                }
        -: 1650:#endif
        -: 1651:                /* we have it and old_it here - alloc memory to hold both */
    16014: 1652:                FLAGS_CONV(old_it, flags);
    16014: 1653:                new_it = do_item_alloc(key, it->nkey, flags, old_it->exptime, it->nbytes + old_it->nbytes - 2 /* CRLF */);
        -: 1654:
        -: 1655:                // OOM trying to copy.
    16014: 1656:                if (new_it == NULL)
        -: 1657:                    break;
        -: 1658:                /* copy data from it and old_it to new_it */
    16014: 1659:                if (_store_item_copy_data(comm, old_it, new_it, it) == -1) {
        -: 1660:                    // failed data copy
        -: 1661:                    break;
        -: 1662:                } else {
        -: 1663:                    // refcount of new_it is 1 here. will end up 2 after link.
        -: 1664:                    // it's original ref is managed outside of this function
    16014: 1665:                    it = new_it;
    16014: 1666:                    do_store = true;
        -: 1667:                }
    16014: 1668:                break;
    19717: 1669:            case NREAD_REPLACE:
        -: 1670:            case NREAD_SET:
    19717: 1671:                do_store = true;
    19717: 1672:                break;
        -: 1673:        }
        -: 1674:
    36403: 1675:        if (do_store) {
    35743: 1676:            STORAGE_delete(c->thread->storage, old_it);
    35743: 1677:            item_replace(old_it, it, hv);
    35743: 1678:            stored = STORED;
        -: 1679:        }
        -: 1680:
    36403: 1681:        do_item_remove(old_it);         /* release our reference */
    36403: 1682:        if (new_it != NULL) {
        -: 1683:            // append/prepend end up with an extra reference for new_it.
    16014: 1684:            do_item_remove(new_it);
        -: 1685:        }
        -: 1686:    } else {
        -: 1687:        /* No pre-existing item to replace or compare to. */
   289544: 1688:        if (ITEM_get_cas(it) != 0) {
        -: 1689:            /* Asked for a CAS match but nothing to compare it to. */
   289544: 1690:            cas_res = CAS_MISS;
        -: 1691:        }
        -: 1692:
   289544: 1693:        switch (comm) {
        -: 1694:            case NREAD_ADD:
        -: 1695:            case NREAD_SET:
   289442: 1696:                do_store = true;
   289442: 1697:                break;
        3: 1698:            case NREAD_CAS:
        -: 1699:                // LRU expired
        3: 1700:                stored = NOT_FOUND;
        3: 1701:                pthread_mutex_lock(&c->thread->stats.mutex);
        3: 1702:                c->thread->stats.cas_misses++;
        3: 1703:                pthread_mutex_unlock(&c->thread->stats.mutex);
        3: 1704:                break;
        -: 1705:            case NREAD_REPLACE:
        -: 1706:            case NREAD_APPEND:
        -: 1707:            case NREAD_PREPEND:
        -: 1708:                /* Requires an existing item. */
        -: 1709:                break;
        -: 1710:        }
        -: 1711:
        3: 1712:        if (do_store) {
   289442: 1713:            do_item_link(it, hv);
   289442: 1714:            stored = STORED;
        -: 1715:        }
        -: 1716:    }
        -: 1717:
   325947: 1718:    if (stored == STORED) {
   325185: 1719:        c->cas = ITEM_get_cas(it);
        -: 1720:    }
  325947*: 1721:    LOGGER_LOG(c->thread->l, LOG_MUTATIONS, LOGGER_ITEM_STORE, NULL,
        -: 1722:            stored, comm, ITEM_key(it), it->nkey, it->nbytes, it->exptime,
        -: 1723:            ITEM_clsid(it), c->sfd);
        -: 1724:
   325947: 1725:    return stored;
        -: 1726:}
        -: 1727:
        -: 1728:/* set up a connection to write a buffer then free it, used for stats */
     1629: 1729:void write_and_free(conn *c, char *buf, int bytes) {
     1629: 1730:    if (buf) {
     1629: 1731:        mc_resp *resp = c->resp;
     1629: 1732:        resp->write_and_free = buf;
     1629: 1733:        resp_add_iov(resp, buf, bytes);
     1629: 1734:        conn_set_state(c, conn_new_cmd);
        -: 1735:    } else {
    #####: 1736:        out_of_memory(c, "SERVER_ERROR out of memory writing stats");
        -: 1737:    }
     1629: 1738:}
        -: 1739:
   135888: 1740:void append_stat(const char *name, ADD_STAT add_stats, conn *c,
        -: 1741:                 const char *fmt, ...) {
   135888: 1742:    char val_str[STAT_VAL_LEN];
   135888: 1743:    int vlen;
   135888: 1744:    va_list ap;
        -: 1745:
  135888*: 1746:    assert(name);
  135888*: 1747:    assert(add_stats);
  135888*: 1748:    assert(c);
  135888*: 1749:    assert(fmt);
        -: 1750:
   135888: 1751:    va_start(ap, fmt);
   135888: 1752:    vlen = vsnprintf(val_str, sizeof(val_str) - 1, fmt, ap);
   135888: 1753:    va_end(ap);
        -: 1754:
   135888: 1755:    add_stats(name, strlen(name), val_str, vlen, c);
   135888: 1756:}
        -: 1757:
        -: 1758:/* return server specific stats only */
     1459: 1759:void server_stats(ADD_STAT add_stats, conn *c) {
     1459: 1760:    pid_t pid = getpid();
     1459: 1761:    rel_time_t now = current_time;
        -: 1762:
     1459: 1763:    struct thread_stats thread_stats;
     1459: 1764:    threadlocal_stats_aggregate(&thread_stats);
     1459: 1765:    struct slab_stats slab_stats;
     1459: 1766:    slab_stats_aggregate(&thread_stats, &slab_stats);
        -: 1767:#ifndef WIN32
     1459: 1768:    struct rusage usage;
     1459: 1769:    getrusage(RUSAGE_SELF, &usage);
        -: 1770:#endif /* !WIN32 */
        -: 1771:
     1459: 1772:    STATS_LOCK();
        -: 1773:
     1459: 1774:    APPEND_STAT("pid", "%lu", (long)pid);
     1459: 1775:    APPEND_STAT("uptime", "%u", now - ITEM_UPDATE_INTERVAL);
     1459: 1776:    APPEND_STAT("time", "%ld", now + (long)process_started);
     1459: 1777:    APPEND_STAT("version", "%s", VERSION);
     1459: 1778:    APPEND_STAT("libevent", "%s", event_get_version());
     1459: 1779:    APPEND_STAT("pointer_size", "%d", (int)(8 * sizeof(void *)));
        -: 1780:
        -: 1781:#ifndef WIN32
     1459: 1782:    append_stat("rusage_user", add_stats, c, "%ld.%06ld",
     1459: 1783:                (long)usage.ru_utime.tv_sec,
     1459: 1784:                (long)usage.ru_utime.tv_usec);
     1459: 1785:    append_stat("rusage_system", add_stats, c, "%ld.%06ld",
     1459: 1786:                (long)usage.ru_stime.tv_sec,
     1459: 1787:                (long)usage.ru_stime.tv_usec);
        -: 1788:#endif /* !WIN32 */
        -: 1789:
     1459: 1790:    APPEND_STAT("max_connections", "%d", settings.maxconns);
     1459: 1791:    APPEND_STAT("curr_connections", "%llu", (unsigned long long)stats_state.curr_conns - 1);
     1459: 1792:    APPEND_STAT("total_connections", "%llu", (unsigned long long)stats.total_conns);
     1459: 1793:    if (settings.maxconns_fast) {
     1449: 1794:        APPEND_STAT("rejected_connections", "%llu", (unsigned long long)stats.rejected_conns);
        -: 1795:    }
     1459: 1796:    APPEND_STAT("connection_structures", "%u", stats_state.conn_structs);
     1459: 1797:    APPEND_STAT("response_obj_oom", "%llu", (unsigned long long)thread_stats.response_obj_oom);
     1459: 1798:    APPEND_STAT("response_obj_count", "%llu", (unsigned long long)thread_stats.response_obj_count);
     1459: 1799:    APPEND_STAT("response_obj_bytes", "%llu", (unsigned long long)thread_stats.response_obj_bytes);
     1459: 1800:    APPEND_STAT("read_buf_count", "%llu", (unsigned long long)thread_stats.read_buf_count);
     1459: 1801:    APPEND_STAT("read_buf_bytes", "%llu", (unsigned long long)thread_stats.read_buf_bytes);
     1459: 1802:    APPEND_STAT("read_buf_bytes_free", "%llu", (unsigned long long)thread_stats.read_buf_bytes_free);
     1459: 1803:    APPEND_STAT("read_buf_oom", "%llu", (unsigned long long)thread_stats.read_buf_oom);
     1459: 1804:    APPEND_STAT("reserved_fds", "%u", stats_state.reserved_fds);
        -: 1805:#ifdef PROXY
        -: 1806:    if (settings.proxy_enabled) {
        -: 1807:        APPEND_STAT("proxy_conn_requests", "%llu", (unsigned long long)thread_stats.proxy_conn_requests);
        -: 1808:        APPEND_STAT("proxy_conn_errors", "%llu", (unsigned long long)thread_stats.proxy_conn_errors);
        -: 1809:        APPEND_STAT("proxy_conn_oom", "%llu", (unsigned long long)thread_stats.proxy_conn_oom);
        -: 1810:        APPEND_STAT("proxy_req_active", "%llu", (unsigned long long)thread_stats.proxy_req_active);
        -: 1811:    }
        -: 1812:#endif
     1459: 1813:    APPEND_STAT("cmd_get", "%llu", (unsigned long long)thread_stats.get_cmds);
     1459: 1814:    APPEND_STAT("cmd_set", "%llu", (unsigned long long)slab_stats.set_cmds);
     1459: 1815:    APPEND_STAT("cmd_flush", "%llu", (unsigned long long)thread_stats.flush_cmds);
     1459: 1816:    APPEND_STAT("cmd_touch", "%llu", (unsigned long long)thread_stats.touch_cmds);
     1459: 1817:    APPEND_STAT("cmd_meta", "%llu", (unsigned long long)thread_stats.meta_cmds);
     1459: 1818:    APPEND_STAT("get_hits", "%llu", (unsigned long long)slab_stats.get_hits);
     1459: 1819:    APPEND_STAT("get_misses", "%llu", (unsigned long long)thread_stats.get_misses);
     1459: 1820:    APPEND_STAT("get_expired", "%llu", (unsigned long long)thread_stats.get_expired);
     1459: 1821:    APPEND_STAT("get_flushed", "%llu", (unsigned long long)thread_stats.get_flushed);
        -: 1822:#ifdef EXTSTORE
     1459: 1823:    if (c->thread->storage) {
       28: 1824:        APPEND_STAT("get_extstore", "%llu", (unsigned long long)thread_stats.get_extstore);
       28: 1825:        APPEND_STAT("get_aborted_extstore", "%llu", (unsigned long long)thread_stats.get_aborted_extstore);
       28: 1826:        APPEND_STAT("get_oom_extstore", "%llu", (unsigned long long)thread_stats.get_oom_extstore);
       28: 1827:        APPEND_STAT("recache_from_extstore", "%llu", (unsigned long long)thread_stats.recache_from_extstore);
       28: 1828:        APPEND_STAT("miss_from_extstore", "%llu", (unsigned long long)thread_stats.miss_from_extstore);
       28: 1829:        APPEND_STAT("badcrc_from_extstore", "%llu", (unsigned long long)thread_stats.badcrc_from_extstore);
        -: 1830:    }
        -: 1831:#endif
     1459: 1832:    APPEND_STAT("delete_misses", "%llu", (unsigned long long)thread_stats.delete_misses);
     1459: 1833:    APPEND_STAT("delete_hits", "%llu", (unsigned long long)slab_stats.delete_hits);
     1459: 1834:    APPEND_STAT("incr_misses", "%llu", (unsigned long long)thread_stats.incr_misses);
     1459: 1835:    APPEND_STAT("incr_hits", "%llu", (unsigned long long)slab_stats.incr_hits);
     1459: 1836:    APPEND_STAT("decr_misses", "%llu", (unsigned long long)thread_stats.decr_misses);
     1459: 1837:    APPEND_STAT("decr_hits", "%llu", (unsigned long long)slab_stats.decr_hits);
     1459: 1838:    APPEND_STAT("cas_misses", "%llu", (unsigned long long)thread_stats.cas_misses);
     1459: 1839:    APPEND_STAT("cas_hits", "%llu", (unsigned long long)slab_stats.cas_hits);
     1459: 1840:    APPEND_STAT("cas_badval", "%llu", (unsigned long long)slab_stats.cas_badval);
     1459: 1841:    APPEND_STAT("touch_hits", "%llu", (unsigned long long)slab_stats.touch_hits);
     1459: 1842:    APPEND_STAT("touch_misses", "%llu", (unsigned long long)thread_stats.touch_misses);
     1459: 1843:    APPEND_STAT("store_too_large", "%llu", (unsigned long long)thread_stats.store_too_large);
     1459: 1844:    APPEND_STAT("store_no_memory", "%llu", (unsigned long long)thread_stats.store_no_memory);
     1459: 1845:    APPEND_STAT("auth_cmds", "%llu", (unsigned long long)thread_stats.auth_cmds);
     1459: 1846:    APPEND_STAT("auth_errors", "%llu", (unsigned long long)thread_stats.auth_errors);
     1459: 1847:    if (settings.idle_timeout) {
        9: 1848:        APPEND_STAT("idle_kicks", "%llu", (unsigned long long)thread_stats.idle_kicks);
        -: 1849:    }
     1459: 1850:    APPEND_STAT("bytes_read", "%llu", (unsigned long long)thread_stats.bytes_read);
     1459: 1851:    APPEND_STAT("bytes_written", "%llu", (unsigned long long)thread_stats.bytes_written);
     1459: 1852:    APPEND_STAT("limit_maxbytes", "%llu", (unsigned long long)settings.maxbytes);
     1459: 1853:    APPEND_STAT("accepting_conns", "%u", stats_state.accepting_conns);
     1459: 1854:    APPEND_STAT("listen_disabled_num", "%llu", (unsigned long long)stats.listen_disabled_num);
     1459: 1855:    APPEND_STAT("time_in_listen_disabled_us", "%llu", stats.time_in_listen_disabled_us);
     1459: 1856:    APPEND_STAT("threads", "%d", settings.num_threads);
     1459: 1857:    APPEND_STAT("conn_yields", "%llu", (unsigned long long)thread_stats.conn_yields);
     1459: 1858:    APPEND_STAT("hash_power_level", "%u", stats_state.hash_power_level);
     1459: 1859:    APPEND_STAT("hash_bytes", "%llu", (unsigned long long)stats_state.hash_bytes);
     1459: 1860:    APPEND_STAT("hash_is_expanding", "%u", stats_state.hash_is_expanding);
     1459: 1861:    if (settings.slab_reassign) {
     1449: 1862:        APPEND_STAT("slab_reassign_rescues", "%llu", stats.slab_reassign_rescues);
     1449: 1863:        APPEND_STAT("slab_reassign_chunk_rescues", "%llu", stats.slab_reassign_chunk_rescues);
     1449: 1864:        APPEND_STAT("slab_reassign_evictions_nomem", "%llu", stats.slab_reassign_evictions_nomem);
     1449: 1865:        APPEND_STAT("slab_reassign_inline_reclaim", "%llu", stats.slab_reassign_inline_reclaim);
     1449: 1866:        APPEND_STAT("slab_reassign_busy_items", "%llu", stats.slab_reassign_busy_items);
     1449: 1867:        APPEND_STAT("slab_reassign_busy_deletes", "%llu", stats.slab_reassign_busy_deletes);
     1449: 1868:        APPEND_STAT("slab_reassign_running", "%u", stats_state.slab_reassign_running);
     1449: 1869:        APPEND_STAT("slabs_moved", "%llu", stats.slabs_moved);
        -: 1870:    }
     1459: 1871:    if (settings.lru_crawler) {
     1425: 1872:        APPEND_STAT("lru_crawler_running", "%u", stats_state.lru_crawler_running);
     1425: 1873:        APPEND_STAT("lru_crawler_starts", "%u", stats.lru_crawler_starts);
        -: 1874:    }
     1459: 1875:    if (settings.lru_maintainer_thread) {
     1433: 1876:        APPEND_STAT("lru_maintainer_juggles", "%llu", (unsigned long long)stats.lru_maintainer_juggles);
        -: 1877:    }
     1459: 1878:    APPEND_STAT("malloc_fails", "%llu",
     1459: 1879:                (unsigned long long)stats.malloc_fails);
     1459: 1880:    APPEND_STAT("log_worker_dropped", "%llu", (unsigned long long)stats.log_worker_dropped);
     1459: 1881:    APPEND_STAT("log_worker_written", "%llu", (unsigned long long)stats.log_worker_written);
     1459: 1882:    APPEND_STAT("log_watcher_skipped", "%llu", (unsigned long long)stats.log_watcher_skipped);
     1459: 1883:    APPEND_STAT("log_watcher_sent", "%llu", (unsigned long long)stats.log_watcher_sent);
     1459: 1884:    APPEND_STAT("log_watchers", "%llu", (unsigned long long)stats_state.log_watchers);
     1459: 1885:    STATS_UNLOCK();
        -: 1886:#ifdef EXTSTORE
     1459: 1887:    storage_stats(add_stats, c);
        -: 1888:#endif
        -: 1889:#ifdef PROXY
        -: 1890:    proxy_stats(add_stats, c);
        -: 1891:#endif
        -: 1892:#ifdef TLS
        -: 1893:    if (settings.ssl_enabled) {
        -: 1894:        if (settings.ssl_session_cache) {
        -: 1895:            APPEND_STAT("ssl_new_sessions", "%llu", (unsigned long long)stats.ssl_new_sessions);
        -: 1896:        }
        -: 1897:        APPEND_STAT("ssl_handshake_errors", "%llu", (unsigned long long)stats.ssl_handshake_errors);
        -: 1898:        APPEND_STAT("time_since_server_cert_refresh", "%u", now - settings.ssl_last_cert_refresh_time);
        -: 1899:    }
        -: 1900:#endif
     1459: 1901:    APPEND_STAT("unexpected_napi_ids", "%llu", (unsigned long long)stats.unexpected_napi_ids);
     1459: 1902:    APPEND_STAT("round_robin_fallback", "%llu", (unsigned long long)stats.round_robin_fallback);
     1459: 1903:}
        -: 1904:
       19: 1905:void process_stat_settings(ADD_STAT add_stats, void *c) {
      19*: 1906:    assert(add_stats);
       19: 1907:    APPEND_STAT("maxbytes", "%llu", (unsigned long long)settings.maxbytes);
       19: 1908:    APPEND_STAT("maxconns", "%d", settings.maxconns);
       19: 1909:    APPEND_STAT("tcpport", "%d", settings.port);
       19: 1910:    APPEND_STAT("udpport", "%d", settings.udpport);
       19: 1911:    APPEND_STAT("inter", "%s", settings.inter ? settings.inter : "NULL");
       19: 1912:    APPEND_STAT("verbosity", "%d", settings.verbose);
       19: 1913:    APPEND_STAT("oldest", "%lu", (unsigned long)settings.oldest_live);
       19: 1914:    APPEND_STAT("evictions", "%s", settings.evict_to_free ? "on" : "off");
       38: 1915:    APPEND_STAT("domain_socket", "%s",
       19: 1916:                settings.socketpath ? settings.socketpath : "NULL");
       19: 1917:    APPEND_STAT("umask", "%o", settings.access);
       38: 1918:    APPEND_STAT("shutdown_command", "%s",
       19: 1919:                settings.shutdown_command ? "yes" : "no");
       19: 1920:    APPEND_STAT("growth_factor", "%.2f", settings.factor);
       19: 1921:    APPEND_STAT("chunk_size", "%d", settings.chunk_size);
       19: 1922:    APPEND_STAT("num_threads", "%d", settings.num_threads);
       19: 1923:    APPEND_STAT("num_threads_per_udp", "%d", settings.num_threads_per_udp);
       19: 1924:    APPEND_STAT("stat_key_prefix", "%c", settings.prefix_delimiter);
       37: 1925:    APPEND_STAT("detail_enabled", "%s",
       19: 1926:                settings.detail_enabled ? "yes" : "no");
       19: 1927:    APPEND_STAT("reqs_per_event", "%d", settings.reqs_per_event);
       20: 1928:    APPEND_STAT("cas_enabled", "%s", settings.use_cas ? "yes" : "no");
       19: 1929:    APPEND_STAT("tcp_backlog", "%d", settings.backlog);
       38: 1930:    APPEND_STAT("binding_protocol", "%s",
       19: 1931:                prot_text(settings.binding_protocol));
       38: 1932:    APPEND_STAT("auth_enabled_sasl", "%s", settings.sasl ? "yes" : "no");
       19: 1933:    APPEND_STAT("auth_enabled_ascii", "%s", settings.auth_file ? settings.auth_file : "no");
       19: 1934:    APPEND_STAT("item_size_max", "%d", settings.item_size_max);
       23: 1935:    APPEND_STAT("maxconns_fast", "%s", settings.maxconns_fast ? "yes" : "no");
       19: 1936:    APPEND_STAT("hashpower_init", "%d", settings.hashpower_init);
       23: 1937:    APPEND_STAT("slab_reassign", "%s", settings.slab_reassign ? "yes" : "no");
       19: 1938:    APPEND_STAT("slab_automove", "%d", settings.slab_automove);
       19: 1939:    APPEND_STAT("slab_automove_ratio", "%.2f", settings.slab_automove_ratio);
       19: 1940:    APPEND_STAT("slab_automove_window", "%u", settings.slab_automove_window);
       19: 1941:    APPEND_STAT("slab_chunk_max", "%d", settings.slab_chunk_size_max);
       23: 1942:    APPEND_STAT("lru_crawler", "%s", settings.lru_crawler ? "yes" : "no");
       19: 1943:    APPEND_STAT("lru_crawler_sleep", "%d", settings.lru_crawler_sleep);
       19: 1944:    APPEND_STAT("lru_crawler_tocrawl", "%lu", (unsigned long)settings.lru_crawler_tocrawl);
       19: 1945:    APPEND_STAT("tail_repair_time", "%d", settings.tail_repair_time);
       19: 1946:    APPEND_STAT("flush_enabled", "%s", settings.flush_enabled ? "yes" : "no");
       19: 1947:    APPEND_STAT("dump_enabled", "%s", settings.dump_enabled ? "yes" : "no");
       19: 1948:    APPEND_STAT("hash_algorithm", "%s", settings.hash_algorithm);
       24: 1949:    APPEND_STAT("lru_maintainer_thread", "%s", settings.lru_maintainer_thread ? "yes" : "no");
       24: 1950:    APPEND_STAT("lru_segmented", "%s", settings.lru_segmented ? "yes" : "no");
       19: 1951:    APPEND_STAT("hot_lru_pct", "%d", settings.hot_lru_pct);
       19: 1952:    APPEND_STAT("warm_lru_pct", "%d", settings.warm_lru_pct);
       19: 1953:    APPEND_STAT("hot_max_factor", "%.2f", settings.hot_max_factor);
       19: 1954:    APPEND_STAT("warm_max_factor", "%.2f", settings.warm_max_factor);
       37: 1955:    APPEND_STAT("temp_lru", "%s", settings.temp_lru ? "yes" : "no");
       19: 1956:    APPEND_STAT("temporary_ttl", "%u", settings.temporary_ttl);
       19: 1957:    APPEND_STAT("idle_timeout", "%d", settings.idle_timeout);
       19: 1958:    APPEND_STAT("watcher_logbuf_size", "%u", settings.logger_watcher_buf_size);
       19: 1959:    APPEND_STAT("worker_logbuf_size", "%u", settings.logger_buf_size);
       19: 1960:    APPEND_STAT("read_buf_mem_limit", "%u", settings.read_buf_mem_limit);
       38: 1961:    APPEND_STAT("track_sizes", "%s", item_stats_sizes_status() ? "yes" : "no");
       19: 1962:    APPEND_STAT("inline_ascii_response", "%s", "no"); // setting is dead, cannot be yes.
        -: 1963:#ifdef HAVE_DROP_PRIVILEGES
        -: 1964:    APPEND_STAT("drop_privileges", "%s", settings.drop_privileges ? "yes" : "no");
        -: 1965:#endif
        -: 1966:#ifdef EXTSTORE
       19: 1967:    APPEND_STAT("ext_item_size", "%u", settings.ext_item_size);
       19: 1968:    APPEND_STAT("ext_item_age", "%u", settings.ext_item_age);
       19: 1969:    APPEND_STAT("ext_low_ttl", "%u", settings.ext_low_ttl);
       19: 1970:    APPEND_STAT("ext_recache_rate", "%u", settings.ext_recache_rate);
       19: 1971:    APPEND_STAT("ext_wbuf_size", "%u", settings.ext_wbuf_size);
       19: 1972:    APPEND_STAT("ext_compact_under", "%u", settings.ext_compact_under);
       19: 1973:    APPEND_STAT("ext_drop_under", "%u", settings.ext_drop_under);
       19: 1974:    APPEND_STAT("ext_max_sleep", "%u", settings.ext_max_sleep);
       19: 1975:    APPEND_STAT("ext_max_frag", "%.2f", settings.ext_max_frag);
       19: 1976:    APPEND_STAT("slab_automove_freeratio", "%.3f", settings.slab_automove_freeratio);
       38: 1977:    APPEND_STAT("ext_drop_unread", "%s", settings.ext_drop_unread ? "yes" : "no");
        -: 1978:#endif
        -: 1979:#ifdef TLS
        -: 1980:    APPEND_STAT("ssl_enabled", "%s", settings.ssl_enabled ? "yes" : "no");
        -: 1981:    APPEND_STAT("ssl_chain_cert", "%s", settings.ssl_chain_cert);
        -: 1982:    APPEND_STAT("ssl_key", "%s", settings.ssl_key);
        -: 1983:    APPEND_STAT("ssl_verify_mode", "%d", settings.ssl_verify_mode);
        -: 1984:    APPEND_STAT("ssl_keyformat", "%d", settings.ssl_keyformat);
        -: 1985:    APPEND_STAT("ssl_ciphers", "%s", settings.ssl_ciphers ? settings.ssl_ciphers : "NULL");
        -: 1986:    APPEND_STAT("ssl_ca_cert", "%s", settings.ssl_ca_cert ? settings.ssl_ca_cert : "NULL");
        -: 1987:    APPEND_STAT("ssl_wbuf_size", "%u", settings.ssl_wbuf_size);
        -: 1988:    APPEND_STAT("ssl_session_cache", "%s", settings.ssl_session_cache ? "yes" : "no");
        -: 1989:    APPEND_STAT("ssl_kernel_tls", "%s", settings.ssl_kernel_tls ? "yes" : "no");
        -: 1990:    APPEND_STAT("ssl_min_version", "%s", ssl_proto_text(settings.ssl_min_version));
        -: 1991:#endif
        -: 1992:#ifdef PROXY
        -: 1993:    APPEND_STAT("proxy_enabled", "%s", settings.proxy_enabled ? "yes" : "no");
        -: 1994:    APPEND_STAT("proxy_uring_enabled", "%s", settings.proxy_uring ? "yes" : "no");
        -: 1995:#endif
       19: 1996:    APPEND_STAT("num_napi_ids", "%s", settings.num_napi_ids);
       19: 1997:    APPEND_STAT("memory_file", "%s", settings.memory_file);
       19: 1998:}
        -: 1999:
      163: 2000:static int nz_strcmp(int nzlength, const char *nz, const char *z) {
      163: 2001:    int zlength=strlen(z);
      163: 2002:    return (zlength == nzlength) && (strncmp(nz, z, zlength) == 0) ? 0 : -1;
        -: 2003:}
        -: 2004:
     1594: 2005:bool get_stats(const char *stat_type, int nkey, ADD_STAT add_stats, void *c) {
     1594: 2006:    bool ret = true;
        -: 2007:
     1594: 2008:    if (add_stats != NULL) {
     1594: 2009:        if (!stat_type) {
        -: 2010:            /* prepare general statistics for the engine */
     1459: 2011:            STATS_LOCK();
     1459: 2012:            APPEND_STAT("bytes", "%llu", (unsigned long long)stats_state.curr_bytes);
     1459: 2013:            APPEND_STAT("curr_items", "%llu", (unsigned long long)stats_state.curr_items);
     1459: 2014:            APPEND_STAT("total_items", "%llu", (unsigned long long)stats.total_items);
     1459: 2015:            STATS_UNLOCK();
     1459: 2016:            APPEND_STAT("slab_global_page_pool", "%u", global_page_pool_size(NULL));
     1459: 2017:            item_stats_totals(add_stats, c);
      135: 2018:        } else if (nz_strcmp(nkey, stat_type, "items") == 0) {
      107: 2019:            item_stats(add_stats, c);
       28: 2020:        } else if (nz_strcmp(nkey, stat_type, "slabs") == 0) {
       28: 2021:            slabs_stats(add_stats, c);
    #####: 2022:        } else if (nz_strcmp(nkey, stat_type, "sizes") == 0) {
    #####: 2023:            item_stats_sizes(add_stats, c);
    #####: 2024:        } else if (nz_strcmp(nkey, stat_type, "sizes_enable") == 0) {
    #####: 2025:            item_stats_sizes_enable(add_stats, c);
    #####: 2026:        } else if (nz_strcmp(nkey, stat_type, "sizes_disable") == 0) {
    #####: 2027:            item_stats_sizes_disable(add_stats, c);
        -: 2028:        } else {
        -: 2029:            ret = false;
        -: 2030:        }
        -: 2031:    } else {
        -: 2032:        ret = false;
        -: 2033:    }
        -: 2034:
     1594: 2035:    return ret;
        -: 2036:}
        -: 2037:
       24: 2038:static inline void get_conn_text(const conn *c, const int af,
        -: 2039:                char* addr, struct sockaddr *sock_addr) {
       24: 2040:    char addr_text[MAXPATHLEN];
       24: 2041:    addr_text[0] = '\0';
       24: 2042:    const char *protoname = "?";
       24: 2043:    unsigned short port = 0;
        -: 2044:
       24: 2045:    switch (af) {
        9: 2046:        case AF_INET:
        9: 2047:            (void) inet_ntop(af,
        9: 2048:                    &((struct sockaddr_in *)sock_addr)->sin_addr,
        -: 2049:                    addr_text,
        -: 2050:                    sizeof(addr_text) - 1);
        9: 2051:            port = ntohs(((struct sockaddr_in *)sock_addr)->sin_port);
        9: 2052:            protoname = IS_UDP(c->transport) ? "udp" : "tcp";
        -: 2053:            break;
        -: 2054:
    #####: 2055:        case AF_INET6:
    #####: 2056:            addr_text[0] = '[';
    #####: 2057:            addr_text[1] = '\0';
    #####: 2058:            if (inet_ntop(af,
    #####: 2059:                    &((struct sockaddr_in6 *)sock_addr)->sin6_addr,
        -: 2060:                    addr_text + 1,
        -: 2061:                    sizeof(addr_text) - 2)) {
    #####: 2062:                strncat(addr_text, "]", 2);
        -: 2063:            }
    #####: 2064:            port = ntohs(((struct sockaddr_in6 *)sock_addr)->sin6_port);
    #####: 2065:            protoname = IS_UDP(c->transport) ? "udp6" : "tcp6";
        -: 2066:            break;
        -: 2067:
        -: 2068:#ifndef DISABLE_UNIX_SOCKET
        -: 2069:        case AF_UNIX:
        -: 2070:        {
        9: 2071:            size_t pathlen = 0;
        -: 2072:            // this strncpy call originally could piss off an address
        -: 2073:            // sanitizer; we supplied the size of the dest buf as a limiter,
        -: 2074:            // but optimized versions of strncpy could read past the end of
        -: 2075:            // *src while looking for a null terminator. Since buf and
        -: 2076:            // sun_path here are both on the stack they could even overlap,
        -: 2077:            // which is "undefined". In all OSS versions of strncpy I could
        -: 2078:            // find this has no effect; it'll still only copy until the first null
        -: 2079:            // terminator is found. Thus it's possible to get the OS to
        -: 2080:            // examine past the end of sun_path but it's unclear to me if this
        -: 2081:            // can cause any actual problem.
        -: 2082:            //
        -: 2083:            // We need a safe_strncpy util function but I'll punt on figuring
        -: 2084:            // that out for now.
        9: 2085:            pathlen = sizeof(((struct sockaddr_un *)sock_addr)->sun_path);
        9: 2086:            if (MAXPATHLEN <= pathlen) {
        -: 2087:                pathlen = MAXPATHLEN - 1;
        -: 2088:            }
        9: 2089:            strncpy(addr_text,
        9: 2090:                    ((struct sockaddr_un *)sock_addr)->sun_path,
        -: 2091:                    pathlen);
        9: 2092:            addr_text[pathlen] = '\0';
        9: 2093:            protoname = "unix";
        -: 2094:        }
        9: 2095:            break;
        -: 2096:#endif /* #ifndef DISABLE_UNIX_SOCKET */
        -: 2097:    }
        -: 2098:
       24: 2099:    if (strlen(addr_text) < 2) {
        -: 2100:        /* Most likely this is a connected UNIX-domain client which
        -: 2101:         * has no peer socket address, but there's no portable way
        -: 2102:         * to tell for sure.
        -: 2103:         */
        6: 2104:        snprintf(addr_text, MAXPATHLEN, "<AF %d>", af);
        -: 2105:    }
        -: 2106:
       24: 2107:    if (port) {
        9: 2108:        snprintf(addr, MAXPATHLEN + 11, "%s:%s:%u", protoname, addr_text, port);
        -: 2109:    } else {
       15: 2110:        snprintf(addr, MAXPATHLEN + 11, "%s:%s", protoname, addr_text);
        -: 2111:    }
       24: 2112:}
        -: 2113:
       16: 2114:static void conn_to_str(const conn *c, char *addr, char *svr_addr) {
       16: 2115:    if (!c) {
    #####: 2116:        memcpy(addr, "<null>", 6);
       16: 2117:    } else if (c->state == conn_closed) {
    #####: 2118:        memcpy(addr, "<closed>", 8);
        -: 2119:    } else {
       16: 2120:        struct sockaddr_in6 local_addr;
       16: 2121:        struct sockaddr *sock_addr = (void *)&c->request_addr;
        -: 2122:
        -: 2123:        /* For listen ports and idle UDP ports, show listen address */
       16: 2124:        if (c->state == conn_listening ||
       12: 2125:                (IS_UDP(c->transport) &&
        -: 2126:                 c->state == conn_read)) {
        8: 2127:            socklen_t local_addr_len = sizeof(local_addr);
        -: 2128:
        8: 2129:            if (getsockname(c->sfd,
        -: 2130:                        (struct sockaddr *)&local_addr,
        -: 2131:                        &local_addr_len) == 0) {
        8: 2132:                sock_addr = (struct sockaddr *)&local_addr;
        -: 2133:            }
        -: 2134:        }
       16: 2135:        get_conn_text(c, sock_addr->sa_family, addr, sock_addr);
        -: 2136:
       16: 2137:        if (c->state != conn_listening && !(IS_UDP(c->transport) &&
        -: 2138:                 c->state == conn_read)) {
        8: 2139:            struct sockaddr_storage svr_sock_addr;
        8: 2140:            socklen_t svr_addr_len = sizeof(svr_sock_addr);
        8: 2141:            getsockname(c->sfd, (struct sockaddr *)&svr_sock_addr, &svr_addr_len);
        8: 2142:            get_conn_text(c, svr_sock_addr.ss_family, svr_addr, (struct sockaddr *)&svr_sock_addr);
        -: 2143:        }
        -: 2144:    }
       16: 2145:}
        -: 2146:
        4: 2147:void process_stats_conns(ADD_STAT add_stats, void *c) {
        4: 2148:    int i;
        4: 2149:    char key_str[STAT_KEY_LEN];
        4: 2150:    char val_str[STAT_VAL_LEN];
        4: 2151:    size_t extras_len = sizeof(":unix:") + sizeof("65535");
        4: 2152:    char addr[MAXPATHLEN + extras_len];
        4: 2153:    char svr_addr[MAXPATHLEN + extras_len];
        4: 2154:    memset(addr, 0, sizeof(addr));
        4: 2155:    memset(svr_addr, 0, sizeof(svr_addr));
        4: 2156:    int klen = 0, vlen = 0;
        -: 2157:
       4*: 2158:    assert(add_stats);
        -: 2159:
     4100: 2160:    for (i = 0; i < max_fds; i++) {
     4096: 2161:        if (conns[i]) {
        -: 2162:            /* This is safe to do unlocked because conns are never freed; the
        -: 2163:             * worst that'll happen will be a minor inconsistency in the
        -: 2164:             * output -- not worth the complexity of the locking that'd be
        -: 2165:             * required to prevent it.
        -: 2166:             */
       16: 2167:            if (IS_UDP(conns[i]->transport)) {
        4: 2168:                APPEND_NUM_STAT(i, "UDP", "%s", "UDP");
        -: 2169:            }
       16: 2170:            if (conns[i]->state != conn_closed) {
       16: 2171:                conn_to_str(conns[i], addr, svr_addr);
        -: 2172:
       16: 2173:                APPEND_NUM_STAT(i, "addr", "%s", addr);
       16: 2174:                if (conns[i]->state != conn_listening &&
       12: 2175:                    !(IS_UDP(conns[i]->transport) && conns[i]->state == conn_read)) {
        8: 2176:                    APPEND_NUM_STAT(i, "listen_addr", "%s", svr_addr);
        -: 2177:                }
       16: 2178:                APPEND_NUM_STAT(i, "state", "%s",
       16: 2179:                        state_text(conns[i]->state));
       16: 2180:                APPEND_NUM_STAT(i, "secs_since_last_cmd", "%d",
     4096: 2181:                        current_time - conns[i]->last_cmd_time);
        -: 2182:            }
        -: 2183:        }
        -: 2184:    }
        4: 2185:}
        -: 2186:
        -: 2187:#define IT_REFCOUNT_LIMIT 60000
   132201: 2188:item* limited_get(char *key, size_t nkey, conn *c, uint32_t exptime, bool should_touch, bool do_update, bool *overflow) {
   132201: 2189:    item *it;
   132201: 2190:    if (should_touch) {
        8: 2191:        it = item_touch(key, nkey, exptime, c);
        -: 2192:    } else {
   132193: 2193:        it = item_get(key, nkey, c, do_update);
        -: 2194:    }
   132201: 2195:    if (it && it->refcount > IT_REFCOUNT_LIMIT) {
    #####: 2196:        item_remove(it);
    #####: 2197:        it = NULL;
    #####: 2198:        *overflow = true;
        -: 2199:    } else {
   132201: 2200:        *overflow = false;
        -: 2201:    }
   132201: 2202:    return it;
        -: 2203:}
        -: 2204:
        -: 2205:// Semantics are different than limited_get; since the item is returned
        -: 2206:// locked, caller can directly change what it needs.
        -: 2207:// though it might eventually be a better interface to sink it all into
        -: 2208:// items.c.
       14: 2209:item* limited_get_locked(char *key, size_t nkey, conn *c, bool do_update, uint32_t *hv, bool *overflow) {
       14: 2210:    item *it;
       14: 2211:    it = item_get_locked(key, nkey, c, do_update, hv);
       14: 2212:    if (it && it->refcount > IT_REFCOUNT_LIMIT) {
    #####: 2213:        do_item_remove(it);
    #####: 2214:        it = NULL;
    #####: 2215:        item_unlock(*hv);
    #####: 2216:        *overflow = true;
        -: 2217:    } else {
       14: 2218:        *overflow = false;
        -: 2219:    }
       14: 2220:    return it;
        -: 2221:}
        -: 2222:
        -: 2223:/*
        -: 2224: * adds a delta value to a numeric item.
        -: 2225: *
        -: 2226: * c     connection requesting the operation
        -: 2227: * it    item to adjust
        -: 2228: * incr  true to increment value, false to decrement
        -: 2229: * delta amount to adjust value by
        -: 2230: * buf   buffer for response string
        -: 2231: *
        -: 2232: * returns a response string to send back to the client.
        -: 2233: */
      414: 2234:enum delta_result_type do_add_delta(conn *c, const char *key, const size_t nkey,
        -: 2235:                                    const bool incr, const int64_t delta,
        -: 2236:                                    char *buf, uint64_t *cas,
        -: 2237:                                    const uint32_t hv,
        -: 2238:                                    item **it_ret) {
      414: 2239:    char *ptr;
      414: 2240:    uint64_t value;
      414: 2241:    int res;
      414: 2242:    item *it;
        -: 2243:
      414: 2244:    it = do_item_get(key, nkey, hv, c, DONT_UPDATE);
      414: 2245:    if (!it) {
        -: 2246:        return DELTA_ITEM_NOT_FOUND;
        -: 2247:    }
        -: 2248:
        -: 2249:    /* Can't delta zero byte values. 2-byte are the "\r\n" */
        -: 2250:    /* Also can't delta for chunked items. Too large to be a number */
        -: 2251:#ifdef EXTSTORE
      339: 2252:    if (it->nbytes <= 2 || (it->it_flags & (ITEM_CHUNKED|ITEM_HDR)) != 0) {
        -: 2253:#else
        -: 2254:    if (it->nbytes <= 2 || (it->it_flags & (ITEM_CHUNKED)) != 0) {
        -: 2255:#endif
        1: 2256:        do_item_remove(it);
        1: 2257:        return NON_NUMERIC;
        -: 2258:    }
        -: 2259:
      338: 2260:    if (cas != NULL && *cas != 0 && ITEM_get_cas(it) != *cas) {
        1: 2261:        do_item_remove(it);
        1: 2262:        return DELTA_ITEM_CAS_MISMATCH;
        -: 2263:    }
        -: 2264:
      337: 2265:    ptr = ITEM_data(it);
        -: 2266:
      337: 2267:    if (!safe_strtoull(ptr, &value)) {
        6: 2268:        do_item_remove(it);
        6: 2269:        return NON_NUMERIC;
        -: 2270:    }
        -: 2271:
      331: 2272:    if (incr) {
      297: 2273:        value += delta;
      297: 2274:        MEMCACHED_COMMAND_INCR(c->sfd, ITEM_key(it), it->nkey, value);
        -: 2275:    } else {
       34: 2276:        if(delta > value) {
        5: 2277:            value = 0;
        -: 2278:        } else {
       29: 2279:            value -= delta;
        -: 2280:        }
      331: 2281:        MEMCACHED_COMMAND_DECR(c->sfd, ITEM_key(it), it->nkey, value);
        -: 2282:    }
        -: 2283:
      331: 2284:    pthread_mutex_lock(&c->thread->stats.mutex);
      331: 2285:    if (incr) {
      297: 2286:        c->thread->stats.slab_stats[ITEM_clsid(it)].incr_hits++;
        -: 2287:    } else {
       34: 2288:        c->thread->stats.slab_stats[ITEM_clsid(it)].decr_hits++;
        -: 2289:    }
      331: 2290:    pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2291:
      331: 2292:    itoa_u64(value, buf);
      331: 2293:    res = strlen(buf);
        -: 2294:    /* refcount == 2 means we are the only ones holding the item, and it is
        -: 2295:     * linked. We hold the item's lock in this function, so refcount cannot
        -: 2296:     * increase. */
      331: 2297:    if (res + 2 <= it->nbytes && it->refcount == 2) { /* replace in-place */
        -: 2298:        /* When changing the value without replacing the item, we
        -: 2299:           need to update the CAS on the existing item. */
        -: 2300:        /* We also need to fiddle it in the sizes tracker in case the tracking
        -: 2301:         * was enabled at runtime, since it relies on the CAS value to know
        -: 2302:         * whether to remove an item or not. */
       77: 2303:        item_stats_sizes_remove(it);
       77: 2304:        ITEM_set_cas(it, (settings.use_cas) ? get_cas_id() : 0);
       77: 2305:        item_stats_sizes_add(it);
       77: 2306:        memcpy(ITEM_data(it), buf, res);
       77: 2307:        memset(ITEM_data(it) + res, ' ', it->nbytes - res - 2);
       77: 2308:        do_item_update(it);
      254: 2309:    } else if (it->refcount > 1) {
      254: 2310:        item *new_it;
      254: 2311:        uint32_t flags;
     254*: 2312:        FLAGS_CONV(it, flags);
      254: 2313:        new_it = do_item_alloc(ITEM_key(it), it->nkey, flags, it->exptime, res + 2);
      254: 2314:        if (new_it == 0) {
    #####: 2315:            do_item_remove(it);
    #####: 2316:            return EOM;
        -: 2317:        }
      254: 2318:        memcpy(ITEM_data(new_it), buf, res);
      254: 2319:        memcpy(ITEM_data(new_it) + res, "\r\n", 2);
      254: 2320:        item_replace(it, new_it, hv);
        -: 2321:        // Overwrite the older item's CAS with our new CAS since we're
        -: 2322:        // returning the CAS of the old item below.
      254: 2323:        ITEM_set_cas(it, (settings.use_cas) ? ITEM_get_cas(new_it) : 0);
      254: 2324:        do_item_remove(new_it);       /* release our reference */
        -: 2325:    } else {
        -: 2326:        /* Should never get here. This means we somehow fetched an unlinked
        -: 2327:         * item. TODO: Add a counter? */
    #####: 2328:        if (settings.verbose) {
    #####: 2329:            fprintf(stderr, "Tried to do incr/decr on invalid item\n");
        -: 2330:        }
    #####: 2331:        if (it->refcount == 1)
    #####: 2332:            do_item_remove(it);
    #####: 2333:        return DELTA_ITEM_NOT_FOUND;
        -: 2334:    }
        -: 2335:
      331: 2336:    if (cas) {
       64: 2337:        *cas = ITEM_get_cas(it);    /* swap the incoming CAS value */
        -: 2338:    }
      331: 2339:    if (it_ret != NULL) {
        8: 2340:        *it_ret = it;
        -: 2341:    } else {
      323: 2342:        do_item_remove(it);         /* release our reference */
        -: 2343:    }
        -: 2344:    return OK;
        -: 2345:}
        -: 2346:
    #####: 2347:enum delta_result_type do_mul_delta(conn *c, const char *key, const size_t nkey,
        -: 2348:                                    const bool mul, const int64_t delta,
        -: 2349:                                    char *buf, uint64_t *cas,
        -: 2350:                                    const uint32_t hv,
        -: 2351:                                    item **it_ret) {
    #####: 2352:    char *ptr;
    #####: 2353:    uint64_t value;
    #####: 2354:    int res;
    #####: 2355:    item *it;
        -: 2356:
    #####: 2357:    it = do_item_get(key, nkey, hv, c, DONT_UPDATE);
    #####: 2358:    if (!it) {
        -: 2359:        return DELTA_ITEM_NOT_FOUND;
        -: 2360:    }
        -: 2361:
        -: 2362:    /* Can't delta zero byte values. 2-byte are the "\r\n" */
        -: 2363:    /* Also can't delta for chunked items. Too large to be a number */
        -: 2364:#ifdef EXTSTORE
    #####: 2365:    if (it->nbytes <= 2 || (it->it_flags & (ITEM_CHUNKED|ITEM_HDR)) != 0) {
        -: 2366:#else
        -: 2367:    if (it->nbytes <= 2 || (it->it_flags & (ITEM_CHUNKED)) != 0) {
        -: 2368:#endif
    #####: 2369:        do_item_remove(it);
    #####: 2370:        return NON_NUMERIC;
        -: 2371:    }
        -: 2372:
    #####: 2373:    if (cas != NULL && *cas != 0 && ITEM_get_cas(it) != *cas) {
    #####: 2374:        do_item_remove(it);
    #####: 2375:        return DELTA_ITEM_CAS_MISMATCH;
        -: 2376:    }
        -: 2377:
    #####: 2378:    ptr = ITEM_data(it);
        -: 2379:
    #####: 2380:    if (!safe_strtoull(ptr, &value)) {
    #####: 2381:        do_item_remove(it);
    #####: 2382:        return NON_NUMERIC;
        -: 2383:    }
        -: 2384:
    #####: 2385:    if (mul) {
    #####: 2386:        value *= delta;
    #####: 2387:        MEMCACHED_COMMAND_MUL(c->sfd, ITEM_key(it), it->nkey, value);
        -: 2388:    } else {
    #####: 2389:        if(delta != 0) {
    #####: 2390:            value /= delta;
        -: 2391:        } else {
        -: 2392:            return NON_NUMERIC;
        -: 2393:        }
    #####: 2394:        MEMCACHED_COMMAND_DIV(c->sfd, ITEM_key(it), it->nkey, value);
        -: 2395:    }
        -: 2396:
    #####: 2397:    pthread_mutex_lock(&c->thread->stats.mutex);
    #####: 2398:    if (mul) {
    #####: 2399:        c->thread->stats.slab_stats[ITEM_clsid(it)].mul_hits++;
        -: 2400:    } else {
    #####: 2401:        c->thread->stats.slab_stats[ITEM_clsid(it)].div_hits++;
        -: 2402:    }
    #####: 2403:    pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2404:
    #####: 2405:    itoa_u64(value, buf);
    #####: 2406:    res = strlen(buf);
        -: 2407:    /* refcount == 2 means we are the only ones holding the item, and it is
        -: 2408:     * linked. We hold the item's lock in this function, so refcount cannot
        -: 2409:     * increase. */
    #####: 2410:    if (res + 2 <= it->nbytes && it->refcount == 2) { /* replace in-place */
        -: 2411:        /* When changing the value without replacing the item, we
        -: 2412:           need to update the CAS on the existing item. */
        -: 2413:        /* We also need to fiddle it in the sizes tracker in case the tracking
        -: 2414:         * was enabled at runtime, since it relies on the CAS value to know
        -: 2415:         * whether to remove an item or not. */
    #####: 2416:        item_stats_sizes_remove(it);
    #####: 2417:        ITEM_set_cas(it, (settings.use_cas) ? get_cas_id() : 0);
    #####: 2418:        item_stats_sizes_add(it);
    #####: 2419:        memcpy(ITEM_data(it), buf, res);
    #####: 2420:        memset(ITEM_data(it) + res, ' ', it->nbytes - res - 2);
    #####: 2421:        do_item_update(it);
    #####: 2422:    } else if (it->refcount > 1) {
    #####: 2423:        item *new_it;
    #####: 2424:        uint32_t flags;
    #####: 2425:        FLAGS_CONV(it, flags);
    #####: 2426:        new_it = do_item_alloc(ITEM_key(it), it->nkey, flags, it->exptime, res + 2);
    #####: 2427:        if (new_it == 0) {
    #####: 2428:            do_item_remove(it);
    #####: 2429:            return EOM;
        -: 2430:        }
    #####: 2431:        memcpy(ITEM_data(new_it), buf, res);
    #####: 2432:        memcpy(ITEM_data(new_it) + res, "\r\n", 2);
    #####: 2433:        item_replace(it, new_it, hv);
        -: 2434:        // Overwrite the older item's CAS with our new CAS since we're
        -: 2435:        // returning the CAS of the old item below.
    #####: 2436:        ITEM_set_cas(it, (settings.use_cas) ? ITEM_get_cas(new_it) : 0);
    #####: 2437:        do_item_remove(new_it);       /* release our reference */
        -: 2438:    } else {
        -: 2439:        /* Should never get here. This means we somehow fetched an unlinked
        -: 2440:         * item. TODO: Add a counter? */
    #####: 2441:        if (settings.verbose) {
    #####: 2442:            fprintf(stderr, "Tried to do incr/decr on invalid item\n");
        -: 2443:        }
    #####: 2444:        if (it->refcount == 1)
    #####: 2445:            do_item_remove(it);
    #####: 2446:        return DELTA_ITEM_NOT_FOUND;
        -: 2447:    }
        -: 2448:
    #####: 2449:    if (cas) {
    #####: 2450:        *cas = ITEM_get_cas(it);    /* swap the incoming CAS value */
        -: 2451:    }
    #####: 2452:    if (it_ret != NULL) {
    #####: 2453:        *it_ret = it;
        -: 2454:    } else {
    #####: 2455:        do_item_remove(it);         /* release our reference */
        -: 2456:    }
        -: 2457:    return OK;
        -: 2458:}
        -: 2459:
      121: 2460:static int try_read_command_negotiate(conn *c) {
     121*: 2461:    assert(c != NULL);
     121*: 2462:    assert(c->protocol == negotiating_prot);
     121*: 2463:    assert(c->rcurr <= (c->rbuf + c->rsize));
     121*: 2464:    assert(c->rbytes > 0);
        -: 2465:
      121: 2466:    if ((unsigned char)c->rbuf[0] == (unsigned char)PROTOCOL_BINARY_REQ) {
        9: 2467:        c->protocol = binary_prot;
        9: 2468:        c->try_read_command = try_read_command_binary;
        -: 2469:    } else {
        -: 2470:        // authentication doesn't work with negotiated protocol.
      112: 2471:        c->protocol = ascii_prot;
      112: 2472:        c->try_read_command = try_read_command_ascii;
        -: 2473:    }
        -: 2474:
      121: 2475:    if (settings.verbose > 1) {
    #####: 2476:        fprintf(stderr, "%d: Client using the %s protocol\n", c->sfd,
        -: 2477:                prot_text(c->protocol));
        -: 2478:    }
        -: 2479:
      121: 2480:    return c->try_read_command(c);
        -: 2481:}
        -: 2482:
       18: 2483:static int try_read_command_udp(conn *c) {
      18*: 2484:    assert(c != NULL);
      18*: 2485:    assert(c->rcurr <= (c->rbuf + c->rsize));
      18*: 2486:    assert(c->rbytes > 0);
        -: 2487:
       18: 2488:    if ((unsigned char)c->rbuf[0] == (unsigned char)PROTOCOL_BINARY_REQ) {
        7: 2489:        c->protocol = binary_prot;
        7: 2490:        return try_read_command_binary(c);
        -: 2491:    } else {
       11: 2492:        c->protocol = ascii_prot;
       11: 2493:        return try_read_command_ascii(c);
        -: 2494:    }
        -: 2495:}
        -: 2496:
        -: 2497:/*
        -: 2498: * read a UDP request.
        -: 2499: */
       31: 2500:static enum try_read_result try_read_udp(conn *c) {
       31: 2501:    int res;
        -: 2502:
      31*: 2503:    assert(c != NULL);
        -: 2504:
       31: 2505:    c->request_addr_size = sizeof(c->request_addr);
       62: 2506:    res = recvfrom(c->sfd, c->rbuf, c->rsize,
       31: 2507:                   0, (struct sockaddr *)&c->request_addr,
        -: 2508:                   &c->request_addr_size);
       31: 2509:    if (res > 8) {
       18: 2510:        unsigned char *buf = (unsigned char *)c->rbuf;
       18: 2511:        pthread_mutex_lock(&c->thread->stats.mutex);
       18: 2512:        c->thread->stats.bytes_read += res;
       18: 2513:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2514:
        -: 2515:        /* Beginning of UDP packet is the request ID; save it. */
       18: 2516:        c->request_id = buf[0] * 256 + buf[1];
        -: 2517:
        -: 2518:        /* If this is a multi-packet request, drop it. */
       18: 2519:        if (buf[4] != 0 || buf[5] != 1) {
        -: 2520:            return READ_NO_DATA_RECEIVED;
        -: 2521:        }
        -: 2522:
        -: 2523:        /* Don't care about any of the rest of the header. */
       18: 2524:        res -= 8;
       18: 2525:        memmove(c->rbuf, c->rbuf + 8, res);
        -: 2526:
       18: 2527:        c->rbytes = res;
       18: 2528:        c->rcurr = c->rbuf;
       18: 2529:        return READ_DATA_RECEIVED;
        -: 2530:    }
        -: 2531:    return READ_NO_DATA_RECEIVED;
        -: 2532:}
        -: 2533:
        -: 2534:/*
        -: 2535: * read from network as much as we can, handle buffer overflow and connection
        -: 2536: * close.
        -: 2537: * before reading, move the remaining incomplete fragment of a command
        -: 2538: * (if any) to the beginning of the buffer.
        -: 2539: *
        -: 2540: * To protect us from someone flooding a connection with bogus data causing
        -: 2541: * the connection to eat up all available memory, break out and start looking
        -: 2542: * at the data I've got after a number of reallocs...
        -: 2543: *
        -: 2544: * @return enum try_read_result
        -: 2545: */
   452053: 2546:static enum try_read_result try_read_network(conn *c) {
   452053: 2547:    enum try_read_result gotdata = READ_NO_DATA_RECEIVED;
   452053: 2548:    int res;
   452053: 2549:    int num_allocs = 0;
  452053*: 2550:    assert(c != NULL);
        -: 2551:
   452053: 2552:    if (c->rcurr != c->rbuf) {
     3701: 2553:        if (c->rbytes != 0) /* otherwise there's nothing to copy */
     3701: 2554:            memmove(c->rbuf, c->rcurr, c->rbytes);
     3701: 2555:        c->rcurr = c->rbuf;
        -: 2556:    }
        -: 2557:
   452056: 2558:    while (1) {
        -: 2559:        // TODO: move to rbuf_* func?
   452056: 2560:        if (c->rbytes >= c->rsize && c->rbuf_malloced) {
        3: 2561:            if (num_allocs == 4) {
    #####: 2562:                return gotdata;
        -: 2563:            }
        3: 2564:            ++num_allocs;
        3: 2565:            char *new_rbuf = realloc(c->rbuf, c->rsize * 2);
        3: 2566:            if (!new_rbuf) {
    #####: 2567:                STATS_LOCK();
    #####: 2568:                stats.malloc_fails++;
    #####: 2569:                STATS_UNLOCK();
    #####: 2570:                if (settings.verbose > 0) {
    #####: 2571:                    fprintf(stderr, "Couldn't realloc input buffer\n");
        -: 2572:                }
    #####: 2573:                c->rbytes = 0; /* ignore what we read */
    #####: 2574:                out_of_memory(c, "SERVER_ERROR out of memory reading request");
    #####: 2575:                c->close_after_write = true;
    #####: 2576:                return READ_MEMORY_ERROR;
        -: 2577:            }
        3: 2578:            c->rcurr = c->rbuf = new_rbuf;
        3: 2579:            c->rsize *= 2;
        -: 2580:        }
        -: 2581:
   452056: 2582:        int avail = c->rsize - c->rbytes;
   452056: 2583:        res = c->read(c, c->rbuf + c->rbytes, avail);
   452056: 2584:        if (res > 0) {
   451960: 2585:            pthread_mutex_lock(&c->thread->stats.mutex);
   451960: 2586:            c->thread->stats.bytes_read += res;
   451960: 2587:            pthread_mutex_unlock(&c->thread->stats.mutex);
   451960: 2588:            gotdata = READ_DATA_RECEIVED;
   451960: 2589:            c->rbytes += res;
   451960: 2590:            if (res == avail && c->rbuf_malloced) {
        -: 2591:                // Resize rbuf and try a few times if huge ascii multiget.
        3: 2592:                continue;
        -: 2593:            } else {
        -: 2594:                break;
        -: 2595:            }
        -: 2596:        }
       96: 2597:        if (res == 0) {
       95: 2598:            c->close_reason = NORMAL_CLOSE;
       95: 2599:            return READ_ERROR;
        -: 2600:        }
        1: 2601:        if (res == -1) {
        1: 2602:            if (errno == EAGAIN || errno == EWOULDBLOCK) {
        -: 2603:                break;
        -: 2604:            }
        1: 2605:            return READ_ERROR;
        -: 2606:        }
        -: 2607:    }
        -: 2608:    return gotdata;
        -: 2609:}
        -: 2610:
   475395: 2611:static bool update_event(conn *c, const int new_flags) {
  475395*: 2612:    assert(c != NULL);
        -: 2613:
   475395: 2614:    struct event_base *base = c->event.ev_base;
   475395: 2615:    if (c->ev_flags == new_flags)
        -: 2616:        return true;
     1610: 2617:    if (event_del(&c->event) == -1) return false;
     1610: 2618:    event_set(&c->event, c->sfd, new_flags, event_handler, (void *)c);
     1610: 2619:    event_base_set(base, &c->event);
     1610: 2620:    c->ev_flags = new_flags;
    1610*: 2621:    if (event_add(&c->event, 0) == -1) return false;
        -: 2622:    return true;
        -: 2623:}
        -: 2624:
        -: 2625:/*
        -: 2626: * Sets whether we are listening for new connections or not.
        -: 2627: */
    #####: 2628:void do_accept_new_conns(const bool do_accept) {
    #####: 2629:    conn *next;
        -: 2630:
    #####: 2631:    for (next = listen_conn; next; next = next->next) {
    #####: 2632:        if (do_accept) {
    #####: 2633:            update_event(next, EV_READ | EV_PERSIST);
    #####: 2634:            if (listen(next->sfd, settings.backlog) != 0) {
    #####: 2635:                perror("listen");
        -: 2636:            }
        -: 2637:        }
        -: 2638:        else {
    #####: 2639:            update_event(next, 0);
    #####: 2640:            if (listen(next->sfd, 0) != 0) {
    #####: 2641:                perror("listen");
        -: 2642:            }
        -: 2643:        }
        -: 2644:    }
        -: 2645:
    #####: 2646:    if (do_accept) {
    #####: 2647:        struct timeval maxconns_exited;
    #####: 2648:        uint64_t elapsed_us;
    #####: 2649:        gettimeofday(&maxconns_exited,NULL);
    #####: 2650:        STATS_LOCK();
    #####: 2651:        elapsed_us =
    #####: 2652:            (maxconns_exited.tv_sec - stats.maxconns_entered.tv_sec) * 1000000
    #####: 2653:            + (maxconns_exited.tv_usec - stats.maxconns_entered.tv_usec);
    #####: 2654:        stats.time_in_listen_disabled_us += elapsed_us;
    #####: 2655:        stats_state.accepting_conns = true;
    #####: 2656:        STATS_UNLOCK();
        -: 2657:    } else {
    #####: 2658:        STATS_LOCK();
    #####: 2659:        stats_state.accepting_conns = false;
    #####: 2660:        gettimeofday(&stats.maxconns_entered,NULL);
    #####: 2661:        stats.listen_disabled_num++;
    #####: 2662:        STATS_UNLOCK();
    #####: 2663:        allow_new_conns = false;
    #####: 2664:        maxconns_handler(-42, 0, 0);
        -: 2665:    }
    #####: 2666:}
        -: 2667:
        -: 2668:#define TRANSMIT_ONE_RESP true
        -: 2669:#define TRANSMIT_ALL_RESP false
   460579: 2670:static int _transmit_pre(conn *c, struct iovec *iovs, int iovused, bool one_resp) {
   460579: 2671:    mc_resp *resp = c->resp_head;
  1076085: 2672:    while (resp && iovused + resp->iovcnt < IOV_MAX-1) {
   615538: 2673:        if (resp->skip) {
        -: 2674:            // Don't actually unchain the resp obj here since it's singly-linked.
        -: 2675:            // Just let the post function handle it linearly.
   162858: 2676:            resp = resp->next;
   162858: 2677:            continue;
        -: 2678:        }
   452680: 2679:        if (resp->chunked_data_iov) {
        -: 2680:            // Handle chunked items specially.
        -: 2681:            // They spend much more time in send so we can be a bit wasteful
        -: 2682:            // in rebuilding iovecs for them.
    19340: 2683:            item_chunk *ch = (item_chunk *)ITEM_schunk((item *)resp->iov[resp->chunked_data_iov].iov_base);
    19340: 2684:            int x;
    77360: 2685:            for (x = 0; x < resp->iovcnt; x++) {
        -: 2686:                // This iov is tracking how far we've copied so far.
    58020: 2687:                if (x == resp->chunked_data_iov) {
    19340: 2688:                    int done = resp->chunked_total - resp->iov[x].iov_len;
        -: 2689:                    // Start from the len to allow binprot to cut the \r\n
    19340: 2690:                    int todo = resp->iov[x].iov_len;
   156262: 2691:                    while (ch && todo > 0 && iovused < IOV_MAX-1) {
   136922: 2692:                        int skip = 0;
   136922: 2693:                        if (!ch->used) {
    32857: 2694:                            ch = ch->next;
    32857: 2695:                            continue;
        -: 2696:                        }
        -: 2697:                        // Skip parts we've already sent.
   104065: 2698:                        if (done >= ch->used) {
     3679: 2699:                            done -= ch->used;
     3679: 2700:                            ch = ch->next;
     3679: 2701:                            continue;
   100386: 2702:                        } else if (done) {
      371: 2703:                            skip = done;
      371: 2704:                            done = 0;
        -: 2705:                        }
   100386: 2706:                        iovs[iovused].iov_base = ch->data + skip;
        -: 2707:                        // Stupid binary protocol makes this go negative.
   100386: 2708:                        iovs[iovused].iov_len = ch->used - skip > todo ? todo : ch->used - skip;
   100386: 2709:                        iovused++;
   100386: 2710:                        todo -= ch->used - skip;
   100386: 2711:                        ch = ch->next;
        -: 2712:                    }
        -: 2713:                } else {
    38680: 2714:                    iovs[iovused].iov_base = resp->iov[x].iov_base;
    38680: 2715:                    iovs[iovused].iov_len = resp->iov[x].iov_len;
    38680: 2716:                    iovused++;
        -: 2717:                }
    58020: 2718:                if (iovused >= IOV_MAX-1)
        -: 2719:                    break;
        -: 2720:            }
        -: 2721:        } else {
   433340: 2722:            memcpy(&iovs[iovused], resp->iov, sizeof(struct iovec)*resp->iovcnt);
   433340: 2723:            iovused += resp->iovcnt;
        -: 2724:        }
        -: 2725:
        -: 2726:        // done looking at first response, walk down the chain.
   452680: 2727:        resp = resp->next;
        -: 2728:        // used for UDP mode: UDP cannot send multiple responses per packet.
   452680: 2729:        if (one_resp)
        -: 2730:            break;
        -: 2731:    }
   460579: 2732:    return iovused;
        -: 2733:}
        -: 2734:
        -: 2735:/*
        -: 2736: * Decrements and completes responses based on how much data was transmitted.
        -: 2737: * Takes the connection and current result bytes.
        -: 2738: */
   460280: 2739:static void _transmit_post(conn *c, ssize_t res) {
        -: 2740:    // We've written some of the data. Remove the completed
        -: 2741:    // responses from the list of pending writes.
   460280: 2742:    mc_resp *resp = c->resp_head;
  1074145: 2743:    while (resp) {
   614217: 2744:        int x;
   614217: 2745:        if (resp->skip) {
   162858: 2746:            resp = resp_finish(c, resp);
   162858: 2747:            continue;
        -: 2748:        }
        -: 2749:
        -: 2750:        // fastpath check. all small responses should cut here.
   451359: 2751:        if (res >= resp->tosend) {
   451007: 2752:            res -= resp->tosend;
   451007: 2753:            resp = resp_finish(c, resp);
   451007: 2754:            continue;
        -: 2755:        }
        -: 2756:
        -: 2757:        // it's fine to re-check iov's that were zeroed out before.
      778: 2758:        for (x = 0; x < resp->iovcnt; x++) {
      778: 2759:            struct iovec *iov = &resp->iov[x];
      778: 2760:            if (res >= iov->iov_len) {
      426: 2761:                resp->tosend -= iov->iov_len;
      426: 2762:                res -= iov->iov_len;
      426: 2763:                iov->iov_len = 0;
        -: 2764:            } else {
        -: 2765:                // Dumb special case for chunked items. Currently tracking
        -: 2766:                // where to inject the chunked item via iov_base.
        -: 2767:                // Extra not-great since chunked items can't be the first
        -: 2768:                // index, so we have to check for non-zero c_d_iov first.
      352: 2769:                if (!resp->chunked_data_iov || x != resp->chunked_data_iov) {
      163: 2770:                    iov->iov_base = (char *)iov->iov_base + res;
        -: 2771:                }
      352: 2772:                iov->iov_len -= res;
      352: 2773:                resp->tosend -= res;
      352: 2774:                res = 0;
      352: 2775:                break;
        -: 2776:            }
        -: 2777:        }
        -: 2778:
        -: 2779:        // are we done with this response object?
      352: 2780:        if (resp->tosend == 0) {
    #####: 2781:            resp = resp_finish(c, resp);
        -: 2782:        } else {
        -: 2783:            // Jammed up here. This is the new head.
        -: 2784:            break;
        -: 2785:        }
        -: 2786:    }
   460280: 2787:}
        -: 2788:
        -: 2789:/*
        -: 2790: * Transmit the next chunk of data from our list of msgbuf structures.
        -: 2791: *
        -: 2792: * Returns:
        -: 2793: *   TRANSMIT_COMPLETE   All done writing.
        -: 2794: *   TRANSMIT_INCOMPLETE More data remaining to write.
        -: 2795: *   TRANSMIT_SOFT_ERROR Can't write any more right now.
        -: 2796: *   TRANSMIT_HARD_ERROR Can't write (c->state is set to conn_closing)
        -: 2797: */
   460547: 2798:static enum transmit_result transmit(conn *c) {
  460547*: 2799:    assert(c != NULL);
   460547: 2800:    struct iovec iovs[IOV_MAX];
   460547: 2801:    struct msghdr msg;
   460547: 2802:    int iovused = 0;
        -: 2803:
        -: 2804:    // init the msg.
   460547: 2805:    memset(&msg, 0, sizeof(struct msghdr));
   460547: 2806:    msg.msg_iov = iovs;
        -: 2807:
   460547: 2808:    iovused = _transmit_pre(c, iovs, iovused, TRANSMIT_ALL_RESP);
   460547: 2809:    if (iovused == 0) {
        -: 2810:        // Avoid the syscall if we're only handling a noreply.
        -: 2811:        // Return the response object.
    49831: 2812:        _transmit_post(c, 0);
    49831: 2813:        return TRANSMIT_COMPLETE;
        -: 2814:    }
        -: 2815:
        -: 2816:    // Alright, send.
   410716: 2817:    ssize_t res;
   410716: 2818:    msg.msg_iovlen = iovused;
   410716: 2819:    res = c->sendmsg(c, &msg, 0);
   410716: 2820:    if (res >= 0) {
   410417: 2821:        pthread_mutex_lock(&c->thread->stats.mutex);
   410417: 2822:        c->thread->stats.bytes_written += res;
   410417: 2823:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2824:
        -: 2825:        // Decrement any partial IOV's and complete any finished resp's.
   410417: 2826:        _transmit_post(c, res);
        -: 2827:
   410417: 2828:        if (c->resp_head) {
        -: 2829:            return TRANSMIT_INCOMPLETE;
        -: 2830:        } else {
   410079: 2831:            return TRANSMIT_COMPLETE;
        -: 2832:        }
        -: 2833:    }
        -: 2834:
      299: 2835:    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
      297: 2836:        if (!update_event(c, EV_WRITE | EV_PERSIST)) {
    #####: 2837:            if (settings.verbose > 0)
    #####: 2838:                fprintf(stderr, "Couldn't update event\n");
    #####: 2839:            conn_set_state(c, conn_closing);
    #####: 2840:            return TRANSMIT_HARD_ERROR;
        -: 2841:        }
        -: 2842:        return TRANSMIT_SOFT_ERROR;
        -: 2843:    }
        -: 2844:    /* if res == -1 and error is not EAGAIN or EWOULDBLOCK,
        -: 2845:       we have a real error, on which we close the connection */
        2: 2846:    if (settings.verbose > 0)
    #####: 2847:        perror("Failed to write, and not due to blocking");
        -: 2848:
        2: 2849:    conn_set_state(c, conn_closing);
        2: 2850:    return TRANSMIT_HARD_ERROR;
        -: 2851:}
        -: 2852:
       32: 2853:static void build_udp_header(unsigned char *hdr, mc_resp *resp) {
        -: 2854:    // We need to communicate the total number of packets
        -: 2855:    // If this isn't set, it's the first time this response is building a udp
        -: 2856:    // header, so "tosend" must be static.
       32: 2857:    if (!resp->udp_total) {
       18: 2858:        uint32_t total;
       18: 2859:        total = resp->tosend / UDP_DATA_SIZE;
       18: 2860:        if (resp->tosend % UDP_DATA_SIZE)
       18: 2861:            total++;
        -: 2862:        // The spec doesn't really say what we should do here. It's _probably_
        -: 2863:        // better to bail out?
       18: 2864:        if (total > USHRT_MAX) {
        -: 2865:            total = USHRT_MAX;
        -: 2866:        }
       18: 2867:        resp->udp_total = total;
        -: 2868:    }
        -: 2869:
        -: 2870:    // TODO: why wasn't this hto*'s and casts?
        -: 2871:    // this ends up sending UDP hdr data specifically in host byte order.
       32: 2872:    *hdr++ = resp->request_id / 256;
       32: 2873:    *hdr++ = resp->request_id % 256;
       32: 2874:    *hdr++ = resp->udp_sequence / 256;
       32: 2875:    *hdr++ = resp->udp_sequence % 256;
       32: 2876:    *hdr++ = resp->udp_total / 256;
       32: 2877:    *hdr++ = resp->udp_total % 256;
       32: 2878:    *hdr++ = 0;
       32: 2879:    *hdr++ = 0;
       32: 2880:    resp->udp_sequence++;
       32: 2881:}
        -: 2882:
        -: 2883:/*
        -: 2884: * UDP specific transmit function. Uses its own function rather than check
        -: 2885: * IS_UDP() five times. If we ever implement sendmmsg or similar support they
        -: 2886: * will diverge even more.
        -: 2887: * Does not use TLS.
        -: 2888: *
        -: 2889: * Returns:
        -: 2890: *   TRANSMIT_COMPLETE   All done writing.
        -: 2891: *   TRANSMIT_INCOMPLETE More data remaining to write.
        -: 2892: *   TRANSMIT_SOFT_ERROR Can't write any more right now.
        -: 2893: *   TRANSMIT_HARD_ERROR Can't write (c->state is set to conn_closing)
        -: 2894: */
       32: 2895:static enum transmit_result transmit_udp(conn *c) {
      32*: 2896:    assert(c != NULL);
       32: 2897:    struct iovec iovs[IOV_MAX];
       32: 2898:    struct msghdr msg;
       32: 2899:    mc_resp *resp;
       32: 2900:    int iovused = 0;
       32: 2901:    unsigned char udp_hdr[UDP_HEADER_SIZE];
        -: 2902:
        -: 2903:    // We only send one UDP packet per call (ugh), so we can only operate on a
        -: 2904:    // single response at a time.
       32: 2905:    resp = c->resp_head;
        -: 2906:
       32: 2907:    if (!resp) {
        -: 2908:        return TRANSMIT_COMPLETE;
        -: 2909:    }
        -: 2910:
       32: 2911:    if (resp->skip) {
    #####: 2912:        resp = resp_finish(c, resp);
    #####: 2913:        return TRANSMIT_INCOMPLETE;
        -: 2914:    }
        -: 2915:
        -: 2916:    // clear the message and initialize it.
       32: 2917:    memset(&msg, 0, sizeof(struct msghdr));
       32: 2918:    msg.msg_iov = iovs;
        -: 2919:
        -: 2920:    // the UDP source to return to.
       32: 2921:    msg.msg_name = &resp->request_addr;
       32: 2922:    msg.msg_namelen = resp->request_addr_size;
        -: 2923:
        -: 2924:    // First IOV is the custom UDP header.
       32: 2925:    iovs[0].iov_base = (void *)udp_hdr;
       32: 2926:    iovs[0].iov_len = UDP_HEADER_SIZE;
       32: 2927:    build_udp_header(udp_hdr, resp);
       32: 2928:    iovused++;
        -: 2929:
        -: 2930:    // Fill the IOV's the standard way.
        -: 2931:    // TODO: might get a small speedup if we let it break early with a length
        -: 2932:    // limit.
       32: 2933:    iovused = _transmit_pre(c, iovs, iovused, TRANSMIT_ONE_RESP);
        -: 2934:
        -: 2935:    // Clip the IOV's to the max UDP packet size.
        -: 2936:    // If we add support for send_mmsg, this can be where we split msg's.
        -: 2937:    {
       32: 2938:        int x = 0;
       32: 2939:        int len = 0;
      143: 2940:        for (x = 0; x < iovused; x++) {
       93: 2941:            if (len + iovs[x].iov_len >= UDP_MAX_PAYLOAD_SIZE) {
       14: 2942:                iovs[x].iov_len = UDP_MAX_PAYLOAD_SIZE - len;
       14: 2943:                x++;
       14: 2944:                break;
        -: 2945:            } else {
       79: 2946:                len += iovs[x].iov_len;
        -: 2947:            }
        -: 2948:        }
       32: 2949:        iovused = x;
        -: 2950:    }
        -: 2951:
       32: 2952:    ssize_t res;
       32: 2953:    msg.msg_iovlen = iovused;
        -: 2954:    // NOTE: uses system sendmsg since we have no support for indirect UDP.
       32: 2955:    res = sendmsg(c->sfd, &msg, 0);
       32: 2956:    if (res >= 0) {
       32: 2957:        pthread_mutex_lock(&c->thread->stats.mutex);
       32: 2958:        c->thread->stats.bytes_written += res;
       32: 2959:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2960:
        -: 2961:        // Ignore the header size from forwarding the IOV's
       32: 2962:        res -= UDP_HEADER_SIZE;
        -: 2963:
        -: 2964:        // Decrement any partial IOV's and complete any finished resp's.
       32: 2965:        _transmit_post(c, res);
        -: 2966:
       32: 2967:        if (c->resp_head) {
        -: 2968:            return TRANSMIT_INCOMPLETE;
        -: 2969:        } else {
       18: 2970:            return TRANSMIT_COMPLETE;
        -: 2971:        }
        -: 2972:    }
        -: 2973:
    #####: 2974:    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
    #####: 2975:        if (!update_event(c, EV_WRITE | EV_PERSIST)) {
    #####: 2976:            if (settings.verbose > 0)
    #####: 2977:                fprintf(stderr, "Couldn't update event\n");
    #####: 2978:            conn_set_state(c, conn_closing);
    #####: 2979:            return TRANSMIT_HARD_ERROR;
        -: 2980:        }
        -: 2981:        return TRANSMIT_SOFT_ERROR;
        -: 2982:    }
        -: 2983:    /* if res == -1 and error is not EAGAIN or EWOULDBLOCK,
        -: 2984:       we have a real error, on which we close the connection */
    #####: 2985:    if (settings.verbose > 0)
    #####: 2986:        perror("Failed to write, and not due to blocking");
        -: 2987:
    #####: 2988:    conn_set_state(c, conn_read);
    #####: 2989:    return TRANSMIT_HARD_ERROR;
        -: 2990:}
        -: 2991:
        -: 2992:
        -: 2993:/* Does a looped read to fill data chunks */
        -: 2994:/* TODO: restrict number of times this can loop.
        -: 2995: * Also, benchmark using readv's.
        -: 2996: */
    14819: 2997:static int read_into_chunked_item(conn *c) {
    14819: 2998:    int total = 0;
    14819: 2999:    int res;
   14819*: 3000:    assert(c->rcurr != c->ritem);
        -: 3001:
   113664: 3002:    while (c->rlbytes > 0) {
   108972: 3003:        item_chunk *ch = (item_chunk *)c->ritem;
   108972: 3004:        if (ch->size == ch->used) {
        -: 3005:            // FIXME: ch->next is currently always 0. remove this?
    41442: 3006:            if (ch->next) {
    #####: 3007:                c->ritem = (char *) ch->next;
        -: 3008:            } else {
        -: 3009:                /* Allocate next chunk. Binary protocol needs 2b for \r\n */
    41442: 3010:                c->ritem = (char *) do_item_alloc_chunk(ch, c->rlbytes +
    41442: 3011:                       ((c->protocol == binary_prot) ? 2 : 0));
    41442: 3012:                if (!c->ritem) {
        -: 3013:                    // We failed an allocation. Let caller handle cleanup.
        -: 3014:                    total = -2;
        -: 3015:                    break;
        -: 3016:                }
        -: 3017:                // ritem has new chunk, restart the loop.
    41442: 3018:                continue;
        -: 3019:                //assert(c->rlbytes == 0);
        -: 3020:            }
        -: 3021:        }
        -: 3022:
    67530: 3023:        int unused = ch->size - ch->used;
        -: 3024:        /* first check if we have leftovers in the conn_read buffer */
    67530: 3025:        if (c->rbytes > 0) {
    17121: 3026:            total = 0;
    17121: 3027:            int tocopy = c->rbytes > c->rlbytes ? c->rlbytes : c->rbytes;
    17121: 3028:            tocopy = tocopy > unused ? unused : tocopy;
    17121: 3029:            if (c->ritem != c->rcurr) {
    17121: 3030:                memmove(ch->data + ch->used, c->rcurr, tocopy);
        -: 3031:            }
    17121: 3032:            total += tocopy;
    17121: 3033:            c->rlbytes -= tocopy;
    17121: 3034:            c->rcurr += tocopy;
    17121: 3035:            c->rbytes -= tocopy;
    17121: 3036:            ch->used += tocopy;
    17121: 3037:            if (c->rlbytes == 0) {
        -: 3038:                break;
        -: 3039:            }
        -: 3040:        } else {
        -: 3041:            /*  now try reading from the socket */
   100818: 3042:            res = c->read(c, ch->data + ch->used,
    50409: 3043:                    (unused > c->rlbytes ? c->rlbytes : unused));
    50409: 3044:            if (res > 0) {
    43034: 3045:                pthread_mutex_lock(&c->thread->stats.mutex);
    43034: 3046:                c->thread->stats.bytes_read += res;
    43034: 3047:                pthread_mutex_unlock(&c->thread->stats.mutex);
    43034: 3048:                ch->used += res;
    43034: 3049:                total += res;
    43034: 3050:                c->rlbytes -= res;
        -: 3051:            } else {
        -: 3052:                /* Reset total to the latest result so caller can handle it */
        -: 3053:                total = res;
        -: 3054:                break;
        -: 3055:            }
        -: 3056:        }
        -: 3057:    }
        -: 3058:
        -: 3059:    /* At some point I will be able to ditch the \r\n from item storage and
        -: 3060:       remove all of these kludges.
        -: 3061:       The above binprot check ensures inline space for \r\n, but if we do
        -: 3062:       exactly enough allocs there will be no additional chunk for \r\n.
        -: 3063:     */
    14819: 3064:    if (c->rlbytes == 0 && c->protocol == binary_prot && total >= 0) {
      202: 3065:        item_chunk *ch = (item_chunk *)c->ritem;
      202: 3066:        if (ch->size - ch->used < 2) {
        2: 3067:            c->ritem = (char *) do_item_alloc_chunk(ch, 2);
        2: 3068:            if (!c->ritem) {
    #####: 3069:                total = -2;
        -: 3070:            }
        -: 3071:        }
        -: 3072:    }
    14819: 3073:    return total;
        -: 3074:}
        -: 3075:
   476091: 3076:static void drive_machine(conn *c) {
   476091: 3077:    bool stop = false;
   476091: 3078:    int sfd;
   476091: 3079:    socklen_t addrlen;
   476091: 3080:    struct sockaddr_storage addr;
   476091: 3081:    int nreqs = settings.reqs_per_event;
   476091: 3082:    int res;
   476091: 3083:    const char *str;
        -: 3084:#ifdef HAVE_ACCEPT4
   476091: 3085:    static int  use_accept4 = 1;
        -: 3086:#else
        -: 3087:    static int  use_accept4 = 0;
        -: 3088:#endif
        -: 3089:
  476091*: 3090:    assert(c != NULL);
        -: 3091:
  4064018: 3092:    while (!stop) {
        -: 3093:
  3587927: 3094:        switch(c->state) {
      137: 3095:        case conn_listening:
      137: 3096:            addrlen = sizeof(addr);
        -: 3097:#ifdef HAVE_ACCEPT4
      137: 3098:            if (use_accept4) {
      137: 3099:                sfd = accept4(c->sfd, (struct sockaddr *)&addr, &addrlen, SOCK_NONBLOCK);
        -: 3100:            } else {
    #####: 3101:                sfd = accept(c->sfd, (struct sockaddr *)&addr, &addrlen);
        -: 3102:            }
        -: 3103:#else
        -: 3104:            sfd = accept(c->sfd, (struct sockaddr *)&addr, &addrlen);
        -: 3105:#endif
      137: 3106:            if (sfd == -1) {
    #####: 3107:                if (use_accept4 && errno == ENOSYS) {
    #####: 3108:                    use_accept4 = 0;
    #####: 3109:                    continue;
        -: 3110:                }
    #####: 3111:                perror(use_accept4 ? "accept4()" : "accept()");
    #####: 3112:                if (errno == EAGAIN || errno == EWOULDBLOCK) {
        -: 3113:                    /* these are transient, so don't log anything */
        -: 3114:                    stop = true;
    #####: 3115:                } else if (errno == EMFILE) {
    #####: 3116:                    if (settings.verbose > 0)
    #####: 3117:                        fprintf(stderr, "Too many open connections\n");
    #####: 3118:                    accept_new_conns(false);
    #####: 3119:                    stop = true;
        -: 3120:                } else {
    #####: 3121:                    perror("accept()");
    #####: 3122:                    stop = true;
        -: 3123:                }
        -: 3124:                break;
        -: 3125:            }
      137: 3126:            if (!use_accept4) {
    #####: 3127:                if (fcntl(sfd, F_SETFL, fcntl(sfd, F_GETFL) | O_NONBLOCK) < 0) {
    #####: 3128:                    perror("setting O_NONBLOCK");
    #####: 3129:                    close(sfd);
    #####: 3130:                    break;
        -: 3131:                }
        -: 3132:            }
        -: 3133:
      137: 3134:            bool reject;
      137: 3135:            if (settings.maxconns_fast) {
      128: 3136:                reject = sfd >= settings.maxconns - 1;
      128: 3137:                if (reject) {
    #####: 3138:                    STATS_LOCK();
    #####: 3139:                    stats.rejected_conns++;
    #####: 3140:                    STATS_UNLOCK();
        -: 3141:                }
        -: 3142:            } else {
        -: 3143:                reject = false;
        -: 3144:            }
        -: 3145:
      128: 3146:            if (reject) {
    #####: 3147:                str = "ERROR Too many open connections\r\n";
    #####: 3148:                res = write(sfd, str, strlen(str));
    #####: 3149:                close(sfd);
        -: 3150:            } else {
      137: 3151:                void *ssl_v = NULL;
        -: 3152:#ifdef TLS
        -: 3153:                SSL *ssl = NULL;
        -: 3154:                if (c->ssl_enabled) {
        -: 3155:                    assert(IS_TCP(c->transport) && settings.ssl_enabled);
        -: 3156:
        -: 3157:                    if (settings.ssl_ctx == NULL) {
        -: 3158:                        if (settings.verbose) {
        -: 3159:                            fprintf(stderr, "SSL context is not initialized\n");
        -: 3160:                        }
        -: 3161:                        close(sfd);
        -: 3162:                        break;
        -: 3163:                    }
        -: 3164:                    SSL_LOCK();
        -: 3165:                    ssl = SSL_new(settings.ssl_ctx);
        -: 3166:                    SSL_UNLOCK();
        -: 3167:                    if (ssl == NULL) {
        -: 3168:                        if (settings.verbose) {
        -: 3169:                            fprintf(stderr, "Failed to created the SSL object\n");
        -: 3170:                        }
        -: 3171:                        close(sfd);
        -: 3172:                        break;
        -: 3173:                    }
        -: 3174:                    SSL_set_fd(ssl, sfd);
        -: 3175:                    int ret = SSL_accept(ssl);
        -: 3176:                    if (ret <= 0) {
        -: 3177:                        int err = SSL_get_error(ssl, ret);
        -: 3178:                        if (err == SSL_ERROR_SYSCALL || err == SSL_ERROR_SSL) {
        -: 3179:                            if (settings.verbose) {
        -: 3180:                                fprintf(stderr, "SSL connection failed with error code : %d : %s\n", err, strerror(errno));
        -: 3181:                            }
        -: 3182:                            SSL_free(ssl);
        -: 3183:                            close(sfd);
        -: 3184:                            STATS_LOCK();
        -: 3185:                            stats.ssl_handshake_errors++;
        -: 3186:                            STATS_UNLOCK();
        -: 3187:                            break;
        -: 3188:                        }
        -: 3189:                    }
        -: 3190:                }
        -: 3191:                ssl_v = (void*) ssl;
        -: 3192:#endif
        -: 3193:
      137: 3194:                dispatch_conn_new(sfd, conn_new_cmd, EV_READ | EV_PERSIST,
        -: 3195:                                     READ_BUFFER_CACHED, c->transport, ssl_v, c->tag, c->protocol);
        -: 3196:            }
        -: 3197:
        -: 3198:            stop = true;
        -: 3199:            break;
        -: 3200:
   452091: 3201:        case conn_waiting:
   452091: 3202:            rbuf_release(c);
   452091: 3203:            if (!update_event(c, EV_READ | EV_PERSIST)) {
    #####: 3204:                if (settings.verbose > 0)
    #####: 3205:                    fprintf(stderr, "Couldn't update event\n");
    #####: 3206:                conn_set_state(c, conn_closing);
    #####: 3207:                break;
        -: 3208:            }
        -: 3209:
   452091: 3210:            conn_set_state(c, conn_read);
   452091: 3211:            stop = true;
   452091: 3212:            break;
        -: 3213:
   452084: 3214:        case conn_read:
   452084: 3215:            if (!IS_UDP(c->transport)) {
        -: 3216:                // Assign a read buffer if necessary.
   452053: 3217:                if (!rbuf_alloc(c)) {
        -: 3218:                    // TODO: Some way to allow for temporary failures.
    #####: 3219:                    conn_set_state(c, conn_closing);
    #####: 3220:                    break;
        -: 3221:                }
   452053: 3222:                res = try_read_network(c);
        -: 3223:            } else {
        -: 3224:                // UDP connections always have a static buffer.
       31: 3225:                res = try_read_udp(c);
        -: 3226:            }
        -: 3227:
   452084: 3228:            switch (res) {
       13: 3229:            case READ_NO_DATA_RECEIVED:
       13: 3230:                conn_set_state(c, conn_waiting);
       13: 3231:                break;
   451975: 3232:            case READ_DATA_RECEIVED:
   451975: 3233:                conn_set_state(c, conn_parse_cmd);
   451975: 3234:                break;
       96: 3235:            case READ_ERROR:
       96: 3236:                conn_set_state(c, conn_closing);
       96: 3237:                break;
        -: 3238:            case READ_MEMORY_ERROR: /* Failed to allocate more memory */
        -: 3239:                /* State already set by try_read_network */
        -: 3240:                break;
        -: 3241:            }
        -: 3242:            break;
        -: 3243:
   601866: 3244:        case conn_parse_cmd:
   601866: 3245:            c->noreply = false;
   601866: 3246:            if (c->try_read_command(c) == 0) {
        -: 3247:                /* we need more data! */
     7377: 3248:                if (c->resp_head) {
        -: 3249:                    // Buffered responses waiting, flush in the meantime.
     3671: 3250:                    conn_set_state(c, conn_mwrite);
        -: 3251:                } else {
     3706: 3252:                    conn_set_state(c, conn_waiting);
        -: 3253:                }
        -: 3254:            }
        -: 3255:
        -: 3256:            break;
        -: 3257:
   941995: 3258:        case conn_new_cmd:
        -: 3259:            /* Only process nreqs at a time to avoid starving other
        -: 3260:               connections */
        -: 3261:
   941995: 3262:            --nreqs;
   941995: 3263:            if (nreqs >= 0) {
   932486: 3264:                reset_cmd_handler(c);
     9509: 3265:            } else if (c->resp_head) {
        -: 3266:                // flush response pipe on yield.
     4670: 3267:                conn_set_state(c, conn_mwrite);
        -: 3268:            } else {
     4839: 3269:                pthread_mutex_lock(&c->thread->stats.mutex);
     4839: 3270:                c->thread->stats.conn_yields++;
     4839: 3271:                pthread_mutex_unlock(&c->thread->stats.mutex);
     4839: 3272:                if (c->rbytes > 0) {
        -: 3273:                    /* We have already read in data into the input buffer,
        -: 3274:                       so libevent will most likely not signal read events
        -: 3275:                       on the socket (unless more data is available. As a
        -: 3276:                       hack we should just put in a request to write data,
        -: 3277:                       because that should be possible ;-)
        -: 3278:                    */
     4805: 3279:                    if (!update_event(c, EV_WRITE | EV_PERSIST)) {
    #####: 3280:                        if (settings.verbose > 0)
    #####: 3281:                            fprintf(stderr, "Couldn't update event\n");
    #####: 3282:                        conn_set_state(c, conn_closing);
    #####: 3283:                        break;
        -: 3284:                    }
        -: 3285:                }
        -: 3286:                stop = true;
        -: 3287:            }
        -: 3288:            break;
        -: 3289:
   677484: 3290:        case conn_nread:
   677484: 3291:            if (c->rlbytes == 0) {
   325878: 3292:                complete_nread(c);
   325878: 3293:                break;
        -: 3294:            }
        -: 3295:
        -: 3296:            /* Check if rbytes < 0, to prevent crash */
   351606: 3297:            if (c->rlbytes < 0) {
    #####: 3298:                if (settings.verbose) {
    #####: 3299:                    fprintf(stderr, "Invalid rlbytes to read: len %d\n", c->rlbytes);
        -: 3300:                }
    #####: 3301:                conn_set_state(c, conn_closing);
    #####: 3302:                break;
        -: 3303:            }
        -: 3304:
   351606: 3305:            if (c->item_malloced || ((((item *)c->item)->it_flags & ITEM_CHUNKED) == 0) ) {
        -: 3306:                /* first check if we have leftovers in the conn_read buffer */
   336787: 3307:                if (c->rbytes > 0) {
   318346: 3308:                    int tocopy = c->rbytes > c->rlbytes ? c->rlbytes : c->rbytes;
   318346: 3309:                    memmove(c->ritem, c->rcurr, tocopy);
   318346: 3310:                    c->ritem += tocopy;
   318346: 3311:                    c->rlbytes -= tocopy;
   318346: 3312:                    c->rcurr += tocopy;
   318346: 3313:                    c->rbytes -= tocopy;
   318346: 3314:                    if (c->rlbytes == 0) {
        -: 3315:                        break;
        -: 3316:                    }
        -: 3317:                }
        -: 3318:
        -: 3319:                /*  now try reading from the socket */
    59920: 3320:                res = c->read(c, c->ritem, c->rlbytes);
    59920: 3321:                if (res > 0) {
    49286: 3322:                    pthread_mutex_lock(&c->thread->stats.mutex);
    49286: 3323:                    c->thread->stats.bytes_read += res;
    49286: 3324:                    pthread_mutex_unlock(&c->thread->stats.mutex);
    49286: 3325:                    if (c->rcurr == c->ritem) {
    #####: 3326:                        c->rcurr += res;
        -: 3327:                    }
    49286: 3328:                    c->ritem += res;
    49286: 3329:                    c->rlbytes -= res;
    49286: 3330:                    break;
        -: 3331:                }
        -: 3332:            } else {
    14819: 3333:                res = read_into_chunked_item(c);
    14819: 3334:                if (res > 0)
        -: 3335:                    break;
        -: 3336:            }
        -: 3337:
    18009: 3338:            if (res == 0) { /* end of stream */
        2: 3339:                c->close_reason = NORMAL_CLOSE;
        2: 3340:                conn_set_state(c, conn_closing);
        2: 3341:                break;
        -: 3342:            }
        -: 3343:
    18007: 3344:            if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
    18007: 3345:                if (!update_event(c, EV_READ | EV_PERSIST)) {
    #####: 3346:                    if (settings.verbose > 0)
    #####: 3347:                        fprintf(stderr, "Couldn't update event\n");
    #####: 3348:                    conn_set_state(c, conn_closing);
    #####: 3349:                    break;
        -: 3350:                }
        -: 3351:                stop = true;
        -: 3352:                break;
        -: 3353:            }
        -: 3354:
        -: 3355:            /* Memory allocation failure */
    #####: 3356:            if (res == -2) {
    #####: 3357:                out_of_memory(c, "SERVER_ERROR Out of memory during read");
    #####: 3358:                c->sbytes = c->rlbytes;
    #####: 3359:                conn_set_state(c, conn_swallow);
        -: 3360:                // Ensure this flag gets cleared. It gets killed on conn_new()
        -: 3361:                // so any conn_closing is fine, calling complete_nread is
        -: 3362:                // fine. This swallow semms to be the only other case.
    #####: 3363:                c->set_stale = false;
    #####: 3364:                c->mset_res = false;
    #####: 3365:                break;
        -: 3366:            }
        -: 3367:            /* otherwise we have a real error, on which we close the connection */
    #####: 3368:            if (settings.verbose > 0) {
    #####: 3369:                fprintf(stderr, "Failed to read, and not due to blocking:\n"
        -: 3370:                        "errno: %d %s \n"
        -: 3371:                        "rcurr=%p ritem=%p rbuf=%p rlbytes=%d rsize=%d\n",
    #####: 3372:                        errno, strerror(errno),
    #####: 3373:                        (void *)c->rcurr, (void *)c->ritem, (void *)c->rbuf,
        -: 3374:                        (int)c->rlbytes, (int)c->rsize);
        -: 3375:            }
    #####: 3376:            conn_set_state(c, conn_closing);
    #####: 3377:            break;
        -: 3378:
      783: 3379:        case conn_swallow:
        -: 3380:            /* we are reading sbytes and throwing them away */
      783: 3381:            if (c->sbytes <= 0) {
       12: 3382:                conn_set_state(c, conn_new_cmd);
       12: 3383:                break;
        -: 3384:            }
        -: 3385:
        -: 3386:            /* first check if we have leftovers in the conn_read buffer */
      771: 3387:            if (c->rbytes > 0) {
       11: 3388:                int tocopy = c->rbytes > c->sbytes ? c->sbytes : c->rbytes;
       11: 3389:                c->sbytes -= tocopy;
       11: 3390:                c->rcurr += tocopy;
       11: 3391:                c->rbytes -= tocopy;
       11: 3392:                break;
        -: 3393:            }
        -: 3394:
        -: 3395:            /*  now try reading from the socket */
      760: 3396:            res = c->read(c, c->rbuf, c->rsize > c->sbytes ? c->sbytes : c->rsize);
      760: 3397:            if (res > 0) {
      565: 3398:                pthread_mutex_lock(&c->thread->stats.mutex);
      565: 3399:                c->thread->stats.bytes_read += res;
      565: 3400:                pthread_mutex_unlock(&c->thread->stats.mutex);
      565: 3401:                c->sbytes -= res;
      565: 3402:                break;
        -: 3403:            }
      195: 3404:            if (res == 0) { /* end of stream */
    #####: 3405:                c->close_reason = NORMAL_CLOSE;
    #####: 3406:                conn_set_state(c, conn_closing);
    #####: 3407:                break;
        -: 3408:            }
      195: 3409:            if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
      195: 3410:                if (!update_event(c, EV_READ | EV_PERSIST)) {
    #####: 3411:                    if (settings.verbose > 0)
    #####: 3412:                        fprintf(stderr, "Couldn't update event\n");
    #####: 3413:                    conn_set_state(c, conn_closing);
    #####: 3414:                    break;
        -: 3415:                }
        -: 3416:                stop = true;
        -: 3417:                break;
        -: 3418:            }
        -: 3419:            /* otherwise we have a real error, on which we close the connection */
    #####: 3420:            if (settings.verbose > 0)
    #####: 3421:                fprintf(stderr, "Failed to read, and not due to blocking\n");
    #####: 3422:            conn_set_state(c, conn_closing);
    #####: 3423:            break;
        -: 3424:
   460962: 3425:        case conn_write:
        -: 3426:        case conn_mwrite:
        -: 3427:            /* have side IO's that must process before transmit() can run.
        -: 3428:             * remove the connection from the worker thread and dispatch the
        -: 3429:             * IO queue
        -: 3430:             */
  460962*: 3431:            assert(c->io_queues_submitted == 0);
        -: 3432:
   489809: 3433:            for (io_queue_t *q = c->io_queues; q->type != IO_QUEUE_NONE; q++) {
    28847: 3434:                if (q->stack_ctx != NULL) {
      383: 3435:                    io_queue_cb_t *qcb = thread_io_queue_get(c->thread, q->type);
      383: 3436:                    qcb->submit_cb(q);
      383: 3437:                    c->io_queues_submitted++;
        -: 3438:                }
        -: 3439:            }
   460962: 3440:            if (c->io_queues_submitted != 0) {
      383: 3441:                conn_set_state(c, conn_io_queue);
      383: 3442:                event_del(&c->event);
        -: 3443:
      383: 3444:                stop = true;
      383: 3445:                break;
        -: 3446:            }
        -: 3447:
   460579: 3448:            switch (!IS_UDP(c->transport) ? transmit(c) : transmit_udp(c)) {
   459928: 3449:            case TRANSMIT_COMPLETE:
   459928: 3450:                if (c->state == conn_mwrite) {
        -: 3451:                    // Free up IO wraps and any half-uploaded items.
   459928: 3452:                    conn_release_items(c);
   459928: 3453:                    conn_set_state(c, conn_new_cmd);
   459928: 3454:                    if (c->close_after_write) {
        8: 3455:                        conn_set_state(c, conn_closing);
        -: 3456:                    }
        -: 3457:                } else {
    #####: 3458:                    if (settings.verbose > 0)
    #####: 3459:                        fprintf(stderr, "Unexpected state %d\n", c->state);
    #####: 3460:                    conn_set_state(c, conn_closing);
        -: 3461:                }
        -: 3462:                break;
        -: 3463:
        -: 3464:            case TRANSMIT_INCOMPLETE:
        -: 3465:            case TRANSMIT_HARD_ERROR:
        -: 3466:                break;                   /* Continue in state machine. */
        -: 3467:
      297: 3468:            case TRANSMIT_SOFT_ERROR:
      297: 3469:                stop = true;
      297: 3470:                break;
        -: 3471:            }
        -: 3472:            break;
        -: 3473:
      130: 3474:        case conn_closing:
      130: 3475:            if (IS_UDP(c->transport))
    #####: 3476:                conn_cleanup(c);
        -: 3477:            else
      130: 3478:                conn_close(c);
        -: 3479:            stop = true;
        -: 3480:            break;
        -: 3481:
    #####: 3482:        case conn_closed:
        -: 3483:            /* This only happens if dormando is an idiot. */
    #####: 3484:            abort();
        -: 3485:            break;
        -: 3486:
        -: 3487:        case conn_watch:
        -: 3488:            /* We handed off our connection to the logger thread. */
  4064018: 3489:            stop = true;
        -: 3490:            break;
      383: 3491:        case conn_io_queue:
        -: 3492:            /* Complete our queued IO's from within the worker thread. */
      383: 3493:            conn_io_queue_complete(c);
      383: 3494:            conn_set_state(c, conn_mwrite);
      383: 3495:            break;
        -: 3496:        case conn_max_state:
    #####: 3497:            assert(false);
        -: 3498:            break;
        -: 3499:        }
        -: 3500:    }
        -: 3501:
   476091: 3502:    return;
        -: 3503:}
        -: 3504:
   475698: 3505:void event_handler(const evutil_socket_t fd, const short which, void *arg) {
   475698: 3506:    conn *c;
        -: 3507:
   475698: 3508:    c = (conn *)arg;
  475698*: 3509:    assert(c != NULL);
        -: 3510:
   475698: 3511:    c->which = which;
        -: 3512:
        -: 3513:    /* sanity */
   475698: 3514:    if (fd != c->sfd) {
    #####: 3515:        if (settings.verbose > 0)
    #####: 3516:            fprintf(stderr, "Catastrophic: event fd doesn't match conn fd!\n");
    #####: 3517:        conn_close(c);
    #####: 3518:        return;
        -: 3519:    }
        -: 3520:
   475698: 3521:    drive_machine(c);
        -: 3522:
        -: 3523:    /* wait for next event */
   475698: 3524:    return;
        -: 3525:}
        -: 3526:
       18: 3527:static int new_socket(struct addrinfo *ai) {
       18: 3528:    int sfd;
       18: 3529:    int flags;
        -: 3530:
       18: 3531:    if ((sfd = socket(ai->ai_family, ai->ai_socktype, ai->ai_protocol)) == -1) {
        -: 3532:        return -1;
        -: 3533:    }
        -: 3534:
       36: 3535:    if ((flags = fcntl(sfd, F_GETFL, 0)) < 0 ||
       18: 3536:        fcntl(sfd, F_SETFL, flags | O_NONBLOCK) < 0) {
    #####: 3537:        perror("setting O_NONBLOCK");
    #####: 3538:        close(sfd);
    #####: 3539:        return -1;
        -: 3540:    }
        -: 3541:    return sfd;
        -: 3542:}
        -: 3543:
        -: 3544:
        -: 3545:/*
        -: 3546: * Sets a socket's send buffer size to the maximum allowed by the system.
        -: 3547: */
        6: 3548:static void maximize_sndbuf(const int sfd) {
        6: 3549:    socklen_t intsize = sizeof(int);
        6: 3550:    int last_good = 0;
        6: 3551:    int min, max, avg;
        6: 3552:    int old_size;
        -: 3553:
        -: 3554:    /* Start with the default size. */
        -: 3555:#ifdef _WIN32
        -: 3556:    if (getsockopt((SOCKET)sfd, SOL_SOCKET, SO_SNDBUF, (char *)&old_size, &intsize) != 0) {
        -: 3557:#else
        6: 3558:    if (getsockopt(sfd, SOL_SOCKET, SO_SNDBUF, &old_size, &intsize) != 0) {
        -: 3559:#endif /* #ifdef _WIN32 */
    #####: 3560:        if (settings.verbose > 0)
    #####: 3561:            perror("getsockopt(SO_SNDBUF)");
    #####: 3562:        return;
        -: 3563:    }
        -: 3564:
        -: 3565:    /* Binary-search for the real maximum. */
        6: 3566:    min = old_size;
        6: 3567:    max = MAX_SENDBUF_SIZE;
        -: 3568:
      174: 3569:    while (min <= max) {
      168: 3570:        avg = ((unsigned int)(min + max)) / 2;
      168: 3571:        if (setsockopt(sfd, SOL_SOCKET, SO_SNDBUF, (void *)&avg, intsize) == 0) {
      168: 3572:            last_good = avg;
      168: 3573:            min = avg + 1;
        -: 3574:        } else {
    #####: 3575:            max = avg - 1;
        -: 3576:        }
        -: 3577:    }
        -: 3578:
        6: 3579:    if (settings.verbose > 1)
       6*: 3580:        fprintf(stderr, "<%d send buffer was %d, now %d\n", sfd, old_size, last_good);
        -: 3581:}
        -: 3582:
        -: 3583:/**
        -: 3584: * Create a socket and bind it to a specific port number
        -: 3585: * @param interface the interface to bind to
        -: 3586: * @param port the port number to bind to
        -: 3587: * @param transport the transport protocol (TCP / UDP)
        -: 3588: * @param portnumber_file A filepointer to write the port numbers to
        -: 3589: *        when they are successfully added to the list of ports we
        -: 3590: *        listen on.
        -: 3591: */
       16: 3592:static int server_socket(const char *interface,
        -: 3593:                         int port,
        -: 3594:                         enum network_transport transport,
        -: 3595:                         FILE *portnumber_file, bool ssl_enabled,
        -: 3596:                         uint64_t conntag,
        -: 3597:                         enum protocol bproto) {
       16: 3598:    int sfd;
       16: 3599:    struct linger ling = {0, 0};
       16: 3600:    struct addrinfo *ai;
       16: 3601:    struct addrinfo *next;
       16: 3602:    struct addrinfo hints = { .ai_flags = AI_PASSIVE,
        -: 3603:                              .ai_family = AF_UNSPEC };
       16: 3604:    char port_buf[NI_MAXSERV];
       16: 3605:    int error;
       16: 3606:    int success = 0;
       16: 3607:    int flags =1;
        -: 3608:
       16: 3609:    hints.ai_socktype = IS_UDP(transport) ? SOCK_DGRAM : SOCK_STREAM;
        -: 3610:
       16: 3611:    if (port == -1) {
        3: 3612:        port = 0;
        -: 3613:    }
       16: 3614:    snprintf(port_buf, sizeof(port_buf), "%d", port);
       16: 3615:    error= getaddrinfo(interface, port_buf, &hints, &ai);
       16: 3616:    if (error != 0) {
        1: 3617:        if (error != EAI_SYSTEM)
        1: 3618:          fprintf(stderr, "getaddrinfo(): %s\n", gai_strerror(error));
        -: 3619:        else
    #####: 3620:          perror("getaddrinfo()");
        1: 3621:        return 1;
        -: 3622:    }
        -: 3623:
       33: 3624:    for (next= ai; next; next= next->ai_next) {
       18: 3625:        conn *listen_conn_add;
      18*: 3626:        if ((sfd = new_socket(next)) == -1) {
        -: 3627:            /* getaddrinfo can return "junk" addresses,
        -: 3628:             * we make sure at least one works before erroring.
        -: 3629:             */
    #####: 3630:            if (errno == EMFILE) {
        -: 3631:                /* ...unless we're out of fds */
    #####: 3632:                perror("server_socket");
    #####: 3633:                exit(EX_OSERR);
        -: 3634:            }
    #####: 3635:            continue;
        -: 3636:        }
        -: 3637:
       18: 3638:        if (settings.num_napi_ids) {
    #####: 3639:            socklen_t len = sizeof(socklen_t);
    #####: 3640:            int napi_id;
    #####: 3641:            error = getsockopt(sfd, SOL_SOCKET, SO_INCOMING_NAPI_ID, &napi_id, &len);
    #####: 3642:            if (error != 0) {
    #####: 3643:                fprintf(stderr, "-N <num_napi_ids> option not supported\n");
    #####: 3644:                exit(EXIT_FAILURE);
        -: 3645:            }
        -: 3646:        }
        -: 3647:
        -: 3648:#ifdef IPV6_V6ONLY
       18: 3649:        if (next->ai_family == AF_INET6) {
        3: 3650:            error = setsockopt(sfd, IPPROTO_IPV6, IPV6_V6ONLY, (char *) &flags, sizeof(flags));
       3*: 3651:            if (error != 0) {
    #####: 3652:                perror("setsockopt");
    #####: 3653:                close(sfd);
    #####: 3654:                continue;
        -: 3655:            }
        -: 3656:        }
        -: 3657:#endif
        -: 3658:#ifdef SOCK_COOKIE_ID
       18: 3659:        if (settings.sock_cookie_id != 0) {
    #####: 3660:            error = setsockopt(sfd, SOL_SOCKET, SOCK_COOKIE_ID, (void *)&settings.sock_cookie_id, sizeof(uint32_t));
    #####: 3661:            if (error != 0)
    #####: 3662:                perror("setsockopt");
        -: 3663:        }
        -: 3664:#endif
        -: 3665:
       18: 3666:        setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));
       18: 3667:        if (IS_UDP(transport)) {
        6: 3668:            maximize_sndbuf(sfd);
        -: 3669:        } else {
       12: 3670:            error = setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));
       12: 3671:            if (error != 0)
    #####: 3672:                perror("setsockopt");
        -: 3673:
       12: 3674:            error = setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));
       12: 3675:            if (error != 0)
    #####: 3676:                perror("setsockopt");
        -: 3677:
       12: 3678:            error = setsockopt(sfd, IPPROTO_TCP, TCP_NODELAY, (void *)&flags, sizeof(flags));
       12: 3679:            if (error != 0)
    #####: 3680:                perror("setsockopt");
        -: 3681:        }
        -: 3682:
      18*: 3683:        if (bind(sfd, next->ai_addr, next->ai_addrlen) == -1) {
    #####: 3684:            if (errno != EADDRINUSE) {
    #####: 3685:                perror("bind()");
    #####: 3686:                close(sfd);
    #####: 3687:                freeaddrinfo(ai);
    #####: 3688:                return 1;
        -: 3689:            }
    #####: 3690:            close(sfd);
    #####: 3691:            continue;
        -: 3692:        } else {
       18: 3693:            success++;
       18: 3694:            if (!IS_UDP(transport) && listen(sfd, settings.backlog) == -1) {
    #####: 3695:                perror("listen()");
    #####: 3696:                close(sfd);
    #####: 3697:                freeaddrinfo(ai);
    #####: 3698:                return 1;
        -: 3699:            }
       18: 3700:            if (portnumber_file != NULL &&
        6: 3701:                (next->ai_addr->sa_family == AF_INET ||
        -: 3702:                 next->ai_addr->sa_family == AF_INET6)) {
        6: 3703:                union {
        -: 3704:                    struct sockaddr_in in;
        -: 3705:                    struct sockaddr_in6 in6;
        -: 3706:                } my_sockaddr;
        6: 3707:                socklen_t len = sizeof(my_sockaddr);
        6: 3708:                if (getsockname(sfd, (struct sockaddr*)&my_sockaddr, &len)==0) {
        6: 3709:                    if (next->ai_addr->sa_family == AF_INET) {
        9: 3710:                        fprintf(portnumber_file, "%s INET: %u\n",
        -: 3711:                                IS_UDP(transport) ? "UDP" : "TCP",
        3: 3712:                                ntohs(my_sockaddr.in.sin_port));
        -: 3713:                    } else {
        6: 3714:                        fprintf(portnumber_file, "%s INET6: %u\n",
        -: 3715:                                IS_UDP(transport) ? "UDP" : "TCP",
        3: 3716:                                ntohs(my_sockaddr.in6.sin6_port));
        -: 3717:                    }
        -: 3718:                }
        -: 3719:            }
        -: 3720:        }
        -: 3721:
       18: 3722:        if (IS_UDP(transport)) {
        -: 3723:            int c;
        -: 3724:
       30: 3725:            for (c = 0; c < settings.num_threads_per_udp; c++) {
        -: 3726:                /* Allocate one UDP file descriptor per worker thread;
        -: 3727:                 * this allows "stats conns" to separately list multiple
        -: 3728:                 * parallel UDP requests in progress.
        -: 3729:                 *
        -: 3730:                 * The dispatch code round-robins new connection requests
        -: 3731:                 * among threads, so this is guaranteed to assign one
        -: 3732:                 * FD to each thread.
        -: 3733:                 */
       24: 3734:                int per_thread_fd;
       24: 3735:                if (c == 0) {
        -: 3736:                    per_thread_fd = sfd;
        -: 3737:                } else {
       18: 3738:                    per_thread_fd = dup(sfd);
       18: 3739:                    if (per_thread_fd < 0) {
    #####: 3740:                        perror("Failed to duplicate file descriptor");
    #####: 3741:                        exit(EXIT_FAILURE);
        -: 3742:                    }
        -: 3743:                }
       24: 3744:                dispatch_conn_new(per_thread_fd, conn_read,
        -: 3745:                                  EV_READ | EV_PERSIST,
        -: 3746:                                  UDP_READ_BUFFER_SIZE, transport, NULL, conntag, bproto);
        -: 3747:            }
        -: 3748:        } else {
       12: 3749:            if (!(listen_conn_add = conn_new(sfd, conn_listening,
        -: 3750:                                             EV_READ | EV_PERSIST, 1,
        -: 3751:                                             transport, main_base, NULL, conntag, bproto))) {
    #####: 3752:                fprintf(stderr, "failed to create listening connection\n");
    #####: 3753:                exit(EXIT_FAILURE);
        -: 3754:            }
        -: 3755:#ifdef TLS
        -: 3756:            listen_conn_add->ssl_enabled = ssl_enabled;
        -: 3757:#else
      12*: 3758:            assert(ssl_enabled == false);
        -: 3759:#endif
       12: 3760:            listen_conn_add->next = listen_conn;
       12: 3761:            listen_conn = listen_conn_add;
        -: 3762:        }
        -: 3763:    }
        -: 3764:
       15: 3765:    freeaddrinfo(ai);
        -: 3766:
        -: 3767:    /* Return zero iff we detected no errors in starting up connections */
       15: 3768:    return success == 0;
        -: 3769:}
        -: 3770:
       16: 3771:static int server_sockets(int port, enum network_transport transport,
        -: 3772:                          FILE *portnumber_file) {
       16: 3773:    bool ssl_enabled = false;
       16: 3774:    uint64_t conntag = 0;
        -: 3775:
        -: 3776:#ifdef TLS
        -: 3777:    const char *notls = "notls";
        -: 3778:    ssl_enabled = settings.ssl_enabled;
        -: 3779:#endif
        -: 3780:
       16: 3781:    if (settings.inter == NULL) {
        3: 3782:        return server_socket(settings.inter, port, transport, portnumber_file, ssl_enabled, conntag, settings.binding_protocol);
        -: 3783:    } else {
        -: 3784:        // tokenize them and bind to each one of them..
       13: 3785:        char *b;
       13: 3786:        int ret = 0;
       13: 3787:        char *list = strdup(settings.inter);
        -: 3788:
       13: 3789:        if (list == NULL) {
    #####: 3790:            fprintf(stderr, "Failed to allocate memory for parsing server interface string\n");
    #####: 3791:            return 1;
        -: 3792:        }
        -: 3793:        // If we encounter any failure, preserve the first errno for the caller.
       13: 3794:        int errno_save = 0;
       13: 3795:        for (char *p = strtok_r(list, ";,", &b);
       26: 3796:            p != NULL;
       13: 3797:            p = strtok_r(NULL, ";,", &b)) {
       13: 3798:            int the_port = port;
        -: 3799:#ifdef TLS
        -: 3800:            ssl_enabled = settings.ssl_enabled;
        -: 3801:            // "notls" option is valid only when memcached is run with SSL enabled.
        -: 3802:            if (strncmp(p, notls, strlen(notls)) == 0) {
        -: 3803:                if (!settings.ssl_enabled) {
        -: 3804:                    fprintf(stderr, "'notls' option is valid only when SSL is enabled\n");
        -: 3805:                    free(list);
        -: 3806:                    return 1;
        -: 3807:                }
        -: 3808:                ssl_enabled = false;
        -: 3809:                p += strlen(notls) + 1;
        -: 3810:            }
        -: 3811:#endif
        -: 3812:
        -: 3813:            // Allow forcing the protocol of this listener.
       13: 3814:            const char *protostr = "proto";
       13: 3815:            enum protocol bproto = settings.binding_protocol;
       13: 3816:            if (strncmp(p, protostr, strlen(protostr)) == 0) {
    #####: 3817:                p += strlen(protostr);
    #####: 3818:                if (*p == '[') {
    #####: 3819:                    char *e = strchr(p, ']');
    #####: 3820:                    if (e == NULL) {
    #####: 3821:                        fprintf(stderr, "Invalid protocol spec: \"%s\"\n", p);
    #####: 3822:                        free(list);
    #####: 3823:                        return 1;
        -: 3824:                    }
    #####: 3825:                    char *st = ++p; // skip '[';
    #####: 3826:                    *e = '\0';
    #####: 3827:                    size_t len = e - st;
    #####: 3828:                    p = ++e; // skip ']'
    #####: 3829:                    p++; // skip an assumed ':'
        -: 3830:
    #####: 3831:                    if (strncmp(st, "ascii", len) == 0) {
        -: 3832:                        bproto = ascii_prot;
    #####: 3833:                    } else if (strncmp(st, "binary", len) == 0) {
        -: 3834:                        bproto = binary_prot;
    #####: 3835:                    } else if (strncmp(st, "negotiating", len) == 0) {
        -: 3836:                        bproto = negotiating_prot;
    #####: 3837:                    } else if (strncmp(st, "proxy", len) == 0) {
        -: 3838:#ifdef PROXY
        -: 3839:                        if (settings.proxy_enabled) {
        -: 3840:                            bproto = proxy_prot;
        -: 3841:                        } else {
        -: 3842:                            fprintf(stderr, "Proxy must be enabled to use: \"%s\"\n", list);
        -: 3843:                            free(list);
        -: 3844:                            return 1;
        -: 3845:                        }
        -: 3846:#else
    #####: 3847:                        fprintf(stderr, "Server not built with proxy: \"%s\"\n", list);
    #####: 3848:                        free(list);
    #####: 3849:                        return 1;
        -: 3850:#endif
        -: 3851:                    }
        -: 3852:                }
        -: 3853:            }
        -: 3854:
       13: 3855:            const char *tagstr = "tag";
       13: 3856:            if (strncmp(p, tagstr, strlen(tagstr)) == 0) {
    #####: 3857:                p += strlen(tagstr);
    #####: 3858:                if (*p == '[') {
    #####: 3859:                    char *e = strchr(p, ']');
    #####: 3860:                    if (e == NULL) {
    #####: 3861:                        fprintf(stderr, "Invalid tag in socket config: \"%s\"\n", p);
    #####: 3862:                        free(list);
    #####: 3863:                        return 1;
        -: 3864:                    }
    #####: 3865:                    char *st = ++p; // skip '['
    #####: 3866:                    *e = '\0';
    #####: 3867:                    size_t len = e - st;
    #####: 3868:                    p = ++e; // skip ']'
    #####: 3869:                    p++; // skip an assumed ':'
        -: 3870:
        -: 3871:                    // validate the tag and copy it in.
    #####: 3872:                    if (len > 8 || len < 1) {
    #####: 3873:                        fprintf(stderr, "Listener tags must be between 1 and 8 characters: \"%s\"\n", st);
    #####: 3874:                        free(list);
    #####: 3875:                        return 1;
        -: 3876:                    }
        -: 3877:
        -: 3878:                    // C programmers love turning string comparisons into
        -: 3879:                    // integer comparisons.
    #####: 3880:                    memcpy(&conntag, st, len);
        -: 3881:                }
        -: 3882:            }
        -: 3883:
       13: 3884:            char *h = NULL;
       13: 3885:            if (*p == '[') {
        -: 3886:                // expecting it to be an IPv6 address enclosed in []
        -: 3887:                // i.e. RFC3986 style recommended by RFC5952
    #####: 3888:                char *e = strchr(p, ']');
    #####: 3889:                if (e == NULL) {
    #####: 3890:                    fprintf(stderr, "Invalid IPV6 address: \"%s\"", p);
    #####: 3891:                    free(list);
    #####: 3892:                    return 1;
        -: 3893:                }
    #####: 3894:                h = ++p; // skip the opening '['
    #####: 3895:                *e = '\0';
    #####: 3896:                p = ++e; // skip the closing ']'
        -: 3897:            }
        -: 3898:
       13: 3899:            char *s = strchr(p, ':');
       13: 3900:            if (s != NULL) {
        -: 3901:                // If no more semicolons - attempt to treat as port number.
        -: 3902:                // Otherwise the only valid option is an unenclosed IPv6 without port, until
        -: 3903:                // of course there was an RFC3986 IPv6 address previously specified -
        -: 3904:                // in such a case there is no good option, will just send it to fail as port number.
    #####: 3905:                if (strchr(s + 1, ':') == NULL || h != NULL) {
    #####: 3906:                    *s = '\0';
    #####: 3907:                    ++s;
    #####: 3908:                    if (!safe_strtol(s, &the_port)) {
    #####: 3909:                        fprintf(stderr, "Invalid port number: \"%s\"\n", s);
    #####: 3910:                        free(list);
    #####: 3911:                        return 1;
        -: 3912:                    }
        -: 3913:                }
        -: 3914:            }
        -: 3915:
       13: 3916:            if (h != NULL)
    #####: 3917:                p = h;
        -: 3918:
       13: 3919:            if (strcmp(p, "*") == 0) {
    #####: 3920:                p = NULL;
        -: 3921:            }
       13: 3922:            ret |= server_socket(p, the_port, transport, portnumber_file, ssl_enabled, conntag, bproto);
       13: 3923:            if (ret != 0 && errno_save == 0) errno_save = errno;
        -: 3924:        }
       13: 3925:        free(list);
       13: 3926:        errno = errno_save;
       13: 3927:        return ret;
        -: 3928:    }
        -: 3929:}
        -: 3930:
        -: 3931:#ifndef DISABLE_UNIX_SOCKET
       93: 3932:static int new_socket_unix(void) {
       93: 3933:    int sfd;
       93: 3934:    int flags;
        -: 3935:
       93: 3936:    if ((sfd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {
    #####: 3937:        perror("socket()");
    #####: 3938:        return -1;
        -: 3939:    }
        -: 3940:
      186: 3941:    if ((flags = fcntl(sfd, F_GETFL, 0)) < 0 ||
       93: 3942:        fcntl(sfd, F_SETFL, flags | O_NONBLOCK) < 0) {
    #####: 3943:        perror("setting O_NONBLOCK");
    #####: 3944:        close(sfd);
    #####: 3945:        return -1;
        -: 3946:    }
        -: 3947:    return sfd;
        -: 3948:}
        -: 3949:
       93: 3950:static int server_socket_unix(const char *path, int access_mask) {
       93: 3951:    int sfd;
       93: 3952:    struct linger ling = {0, 0};
       93: 3953:    struct sockaddr_un addr;
       93: 3954:    struct stat tstat;
       93: 3955:    int flags =1;
       93: 3956:    int old_umask;
        -: 3957:
       93: 3958:    if (!path) {
        -: 3959:        return 1;
        -: 3960:    }
        -: 3961:
       93: 3962:    if ((sfd = new_socket_unix()) == -1) {
        -: 3963:        return 1;
        -: 3964:    }
        -: 3965:
        -: 3966:    /*
        -: 3967:     * Clean up a previous socket file if we left it around
        -: 3968:     */
       93: 3969:    if (lstat(path, &tstat) == 0) {
    #####: 3970:        if (S_ISSOCK(tstat.st_mode))
    #####: 3971:            unlink(path);
        -: 3972:    }
        -: 3973:
       93: 3974:    setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));
       93: 3975:    setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));
       93: 3976:    setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));
        -: 3977:
        -: 3978:    /*
        -: 3979:     * the memset call clears nonstandard fields in some implementations
        -: 3980:     * that otherwise mess things up.
        -: 3981:     */
       93: 3982:    memset(&addr, 0, sizeof(addr));
        -: 3983:
       93: 3984:    addr.sun_family = AF_UNIX;
       93: 3985:    strncpy(addr.sun_path, path, sizeof(addr.sun_path) - 1);
      93*: 3986:    assert(strcmp(addr.sun_path, path) == 0);
       93: 3987:    old_umask = umask( ~(access_mask&0777));
       93: 3988:    if (bind(sfd, (struct sockaddr *)&addr, sizeof(addr)) == -1) {
    #####: 3989:        perror("bind()");
    #####: 3990:        close(sfd);
    #####: 3991:        umask(old_umask);
    #####: 3992:        return 1;
        -: 3993:    }
       93: 3994:    umask(old_umask);
       93: 3995:    if (listen(sfd, settings.backlog) == -1) {
    #####: 3996:        perror("listen()");
    #####: 3997:        close(sfd);
    #####: 3998:        return 1;
        -: 3999:    }
       93: 4000:    if (!(listen_conn = conn_new(sfd, conn_listening,
        -: 4001:                                 EV_READ | EV_PERSIST, 1,
        -: 4002:                                 local_transport, main_base, NULL, 0, settings.binding_protocol))) {
    #####: 4003:        fprintf(stderr, "failed to create listening connection\n");
    #####: 4004:        exit(EXIT_FAILURE);
        -: 4005:    }
        -: 4006:
        -: 4007:    return 0;
        -: 4008:}
        -: 4009:#else
        -: 4010:#define server_socket_unix(path, access_mask)   -1
        -: 4011:#endif /* #ifndef DISABLE_UNIX_SOCKET */
        -: 4012:
        -: 4013:/*
        -: 4014: * We keep the current time of day in a global variable that's updated by a
        -: 4015: * timer event. This saves us a bunch of time() system calls (we really only
        -: 4016: * need to get the time once a second, whereas there can be tens of thousands
        -: 4017: * of requests a second) and allows us to use server-start-relative timestamps
        -: 4018: * rather than absolute UNIX timestamps, a space savings on systems where
        -: 4019: * sizeof(time_t) > sizeof(unsigned int).
        -: 4020: */
        -: 4021:volatile rel_time_t current_time;
        -: 4022:static struct event clockevent;
        -: 4023:#ifdef MEMCACHED_DEBUG
        -: 4024:volatile bool is_paused;
        -: 4025:volatile int64_t delta;
        -: 4026:#endif
        -: 4027:#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
        -: 4028:static bool monotonic = false;
        -: 4029:static int64_t monotonic_start;
        -: 4030:#endif
        -: 4031:
        -: 4032:/* libevent uses a monotonic clock when available for event scheduling. Aside
        -: 4033: * from jitter, simply ticking our internal timer here is accurate enough.
        -: 4034: * Note that users who are setting explicit dates for expiration times *must*
        -: 4035: * ensure their clocks are correct before starting memcached. */
      582: 4036:static void clock_handler(const evutil_socket_t fd, const short which, void *arg) {
      582: 4037:    struct timeval t = {.tv_sec = 1, .tv_usec = 0};
      582: 4038:    static bool initialized = false;
        -: 4039:
      582: 4040:    if (initialized) {
        -: 4041:        /* only delete the event if it's actually there. */
      479: 4042:        evtimer_del(&clockevent);
        -: 4043:    } else {
      103: 4044:        initialized = true;
        -: 4045:    }
        -: 4046:
        -: 4047:    // While we're here, check for hash table expansion.
        -: 4048:    // This function should be quick to avoid delaying the timer.
      582: 4049:    assoc_start_expand(stats_state.curr_items);
        -: 4050:    // also, if HUP'ed we need to do some maintenance.
        -: 4051:    // for now that's just the authfile reload.
      582: 4052:    if (settings.sig_hup) {
    #####: 4053:        settings.sig_hup = false;
        -: 4054:
    #####: 4055:        authfile_load(settings.auth_file);
        -: 4056:#ifdef PROXY
        -: 4057:        if (settings.proxy_ctx) {
        -: 4058:            proxy_start_reload(settings.proxy_ctx);
        -: 4059:        }
        -: 4060:#endif
        -: 4061:    }
        -: 4062:
      582: 4063:    evtimer_set(&clockevent, clock_handler, 0);
      582: 4064:    event_base_set(main_base, &clockevent);
      582: 4065:    evtimer_add(&clockevent, &t);
        -: 4066:
        -: 4067:#ifdef MEMCACHED_DEBUG
     1164: 4068:    if (is_paused) return;
        -: 4069:#endif
        -: 4070:
        -: 4071:#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
      582: 4072:    if (monotonic) {
      582: 4073:        struct timespec ts;
      582: 4074:        if (clock_gettime(CLOCK_MONOTONIC, &ts) == -1)
        -: 4075:            return;
        -: 4076:#ifdef MEMCACHED_DEBUG
      582: 4077:        current_time = (rel_time_t) (ts.tv_sec - monotonic_start + delta);
        -: 4078:#else
        -: 4079:        current_time = (rel_time_t) (ts.tv_sec - monotonic_start);
        -: 4080:#endif
      582: 4081:        return;
        -: 4082:    }
        -: 4083:#endif
        -: 4084:    {
    #####: 4085:        struct timeval tv;
    #####: 4086:        gettimeofday(&tv, NULL);
        -: 4087:#ifdef MEMCACHED_DEBUG
    #####: 4088:        current_time = (rel_time_t) (tv.tv_sec - process_started + delta);
        -: 4089:#else
        -: 4090:        current_time = (rel_time_t) (tv.tv_sec - process_started);
        -: 4091:#endif
        -: 4092:    }
        -: 4093:}
        -: 4094:
      542: 4095:static const char* flag_enabled_disabled(bool flag) {
      542: 4096:    return (flag ? "enabled" : "disabled");
        -: 4097:}
        -: 4098:
     2007: 4099:static void verify_default(const char* param, bool condition) {
     2007: 4100:    if (!condition) {
    #####: 4101:        printf("Default value of [%s] has changed."
        -: 4102:            " Modify the help text and default value check.\n", param);
    #####: 4103:        exit(EXIT_FAILURE);
        -: 4104:    }
     2007: 4105:}
        -: 4106:
      271: 4107:static void usage(void) {
      271: 4108:    printf(PACKAGE " " VERSION "\n");
      271: 4109:    printf("-p, --port=<num>          TCP port to listen on (default: %d)\n"
        -: 4110:           "-U, --udp-port=<num>      UDP port to listen on (default: %d, off)\n",
        -: 4111:           settings.port, settings.udpport);
        -: 4112:#ifndef DISABLE_UNIX_SOCKET
      271: 4113:    printf("-s, --unix-socket=<file>  UNIX socket to listen on (disables network support)\n");
      271: 4114:    printf("-a, --unix-mask=<mask>    access mask for UNIX socket, in octal (default: %o)\n",
        -: 4115:            settings.access);
        -: 4116:#endif /* #ifndef DISABLE_UNIX_SOCKET */
      271: 4117:    printf("-A, --enable-shutdown     enable ascii \"shutdown\" command\n");
      271: 4118:    printf("-l, --listen=<addr>       interface to listen on (default: INADDR_ANY)\n");
        -: 4119:#ifdef TLS
        -: 4120:    printf("                          if TLS/SSL is enabled, 'notls' prefix can be used to\n"
        -: 4121:           "                          disable for specific listeners (-l notls:<ip>:<port>) \n");
        -: 4122:#endif
      542: 4123:    printf("-d, --daemon              run as a daemon\n"
        -: 4124:           "-r, --enable-coredumps    maximize core file limit\n"
        -: 4125:           "-u, --user=<user>         assume identity of <username> (only when run as root)\n"
        -: 4126:           "-m, --memory-limit=<num>  item memory in megabytes (default: %lu)\n"
        -: 4127:           "-M, --disable-evictions   return error on memory exhausted instead of evicting\n"
        -: 4128:           "-c, --conn-limit=<num>    max simultaneous connections (default: %d)\n"
        -: 4129:           "-k, --lock-memory         lock down all paged memory\n"
        -: 4130:           "-v, --verbose             verbose (print errors/warnings while in event loop)\n"
        -: 4131:           "-vv                       very verbose (also print client commands/responses)\n"
        -: 4132:           "-vvv                      extremely verbose (internal state transitions)\n"
        -: 4133:           "-h, --help                print this help and exit\n"
        -: 4134:           "-i, --license             print memcached and libevent license\n"
        -: 4135:           "-V, --version             print version and exit\n"
        -: 4136:           "-P, --pidfile=<file>      save PID in <file>, only used with -d option\n"
        -: 4137:           "-f, --slab-growth-factor=<num> chunk size growth factor (default: %2.2f)\n"
        -: 4138:           "-n, --slab-min-size=<bytes> min space used for key+value+flags (default: %d)\n",
      271: 4139:           (unsigned long) settings.maxbytes / (1 << 20),
        -: 4140:           settings.maxconns, settings.factor, settings.chunk_size);
      271: 4141:    verify_default("udp-port",settings.udpport == 0);
      271: 4142:    printf("-L, --enable-largepages  try to use large memory pages (if available)\n");
      542: 4143:    printf("-D <char>     Use <char> as the delimiter between key prefixes and IDs.\n"
        -: 4144:           "              This is used for per-prefix stats reporting. The default is\n"
        -: 4145:           "              \"%c\" (colon). If this option is specified, stats collection\n"
        -: 4146:           "              is turned on automatically; if not, then it may be turned on\n"
        -: 4147:           "              by sending the \"stats detail on\" command to the server.\n",
      271: 4148:           settings.prefix_delimiter);
      271: 4149:    printf("-t, --threads=<num>       number of threads to use (default: %d)\n", settings.num_threads);
      271: 4150:    printf("-R, --max-reqs-per-event  maximum number of requests per event, limits the\n"
        -: 4151:           "                          requests processed per connection to prevent \n"
        -: 4152:           "                          starvation (default: %d)\n", settings.reqs_per_event);
      271: 4153:    printf("-C, --disable-cas         disable use of CAS\n");
      271: 4154:    printf("-b, --listen-backlog=<num> set the backlog queue limit (default: %d)\n", settings.backlog);
      542: 4155:    printf("-B, --protocol=<name>     protocol - one of ascii, binary, or auto (default: %s)\n",
        -: 4156:           prot_text(settings.binding_protocol));
      542: 4157:    printf("-I, --max-item-size=<num> adjusts max item size\n"
        -: 4158:           "                          (default: %dm, min: %dk, max: %dm)\n",
      271: 4159:           settings.item_size_max/ (1 << 20), ITEM_SIZE_MAX_LOWER_LIMIT / (1 << 10),  ITEM_SIZE_MAX_UPPER_LIMIT / (1 << 20));
        -: 4160:#ifdef ENABLE_SASL
        -: 4161:    printf("-S, --enable-sasl         turn on Sasl authentication\n");
        -: 4162:#endif
      271: 4163:    printf("-F, --disable-flush-all   disable flush_all command\n");
      271: 4164:    printf("-X, --disable-dumping     disable stats cachedump and lru_crawler metadump\n");
      271: 4165:    printf("-W  --disable-watch       disable watch commands (live logging)\n");
      271: 4166:    printf("-Y, --auth-file=<file>    (EXPERIMENTAL) enable ASCII protocol authentication. format:\n"
        -: 4167:           "                          user:pass\\nuser2:pass2\\n\n");
      271: 4168:    printf("-e, --memory-file=<file>  (EXPERIMENTAL) mmap a file for item memory.\n"
        -: 4169:           "                          use only in ram disks or persistent memory mounts!\n"
        -: 4170:           "                          enables restartable cache (stop with SIGUSR1)\n");
        -: 4171:#ifdef TLS
        -: 4172:    printf("-Z, --enable-ssl          enable TLS/SSL\n");
        -: 4173:#endif
      271: 4174:    printf("-o, --extended            comma separated list of extended options\n"
        -: 4175:           "                          most options have a 'no_' prefix to disable\n"
        -: 4176:           "   - maxconns_fast:       immediately close new connections after limit (default: %s)\n"
        -: 4177:           "   - hashpower:           an integer multiplier for how large the hash\n"
        -: 4178:           "                          table should be. normally grows at runtime. (default starts at: %d)\n"
        -: 4179:           "                          set based on \"STAT hash_power_level\"\n"
        -: 4180:           "   - tail_repair_time:    time in seconds for how long to wait before\n"
        -: 4181:           "                          forcefully killing LRU tail item.\n"
        -: 4182:           "                          disabled by default; very dangerous option.\n"
        -: 4183:           "   - hash_algorithm:      the hash table algorithm\n"
        -: 4184:           "                          default is murmur3 hash. options: jenkins, murmur3, xxh3\n"
        -: 4185:           "   - no_lru_crawler:      disable LRU Crawler background thread.\n"
        -: 4186:           "   - lru_crawler_sleep:   microseconds to sleep between items\n"
        -: 4187:           "                          default is %d.\n"
        -: 4188:           "   - lru_crawler_tocrawl: max items to crawl per slab per run\n"
        -: 4189:           "                          default is %u (unlimited)\n",
      271: 4190:           flag_enabled_disabled(settings.maxconns_fast), settings.hashpower_init,
        -: 4191:           settings.lru_crawler_sleep, settings.lru_crawler_tocrawl);
      271: 4192:    printf("   - read_buf_mem_limit:  limit in megabytes for connection read/response buffers.\n"
        -: 4193:           "                          do not adjust unless you have high (20k+) conn. limits.\n"
        -: 4194:           "                          0 means unlimited (default: %u)\n",
        -: 4195:           settings.read_buf_mem_limit);
      271: 4196:    verify_default("read_buf_mem_limit", settings.read_buf_mem_limit == 0);
      271: 4197:    printf("   - no_lru_maintainer:   disable new LRU system + background thread.\n"
        -: 4198:           "   - hot_lru_pct:         pct of slab memory to reserve for hot lru.\n"
        -: 4199:           "                          (requires lru_maintainer, default pct: %d)\n"
        -: 4200:           "   - warm_lru_pct:        pct of slab memory to reserve for warm lru.\n"
        -: 4201:           "                          (requires lru_maintainer, default pct: %d)\n"
        -: 4202:           "   - hot_max_factor:      items idle > cold lru age * drop from hot lru. (default: %.2f)\n"
        -: 4203:           "   - warm_max_factor:     items idle > cold lru age * this drop from warm. (default: %.2f)\n"
        -: 4204:           "   - temporary_ttl:       TTL's below get separate LRU, can't be evicted.\n"
        -: 4205:           "                          (requires lru_maintainer, default: %d)\n"
        -: 4206:           "   - idle_timeout:        timeout for idle connections. (default: %d, no timeout)\n",
        -: 4207:           settings.hot_lru_pct, settings.warm_lru_pct, settings.hot_max_factor, settings.warm_max_factor,
        -: 4208:           settings.temporary_ttl, settings.idle_timeout);
      542: 4209:    printf("   - slab_chunk_max:      (EXPERIMENTAL) maximum slab size in kilobytes. use extreme care. (default: %d)\n"
        -: 4210:           "   - watcher_logbuf_size: size in kilobytes of per-watcher write buffer. (default: %u)\n"
        -: 4211:           "   - worker_logbuf_size:  size in kilobytes of per-worker-thread buffer\n"
        -: 4212:           "                          read by background thread, then written to watchers. (default: %u)\n"
        -: 4213:           "   - track_sizes:         enable dynamic reports for 'stats sizes' command.\n"
        -: 4214:           "   - no_hashexpand:       disables hash table expansion (dangerous)\n"
        -: 4215:           "   - modern:              enables options which will be default in future.\n"
        -: 4216:           "                          currently: nothing\n"
        -: 4217:           "   - no_modern:           uses defaults of previous major version (1.4.x)\n",
      271: 4218:           settings.slab_chunk_size_max / (1 << 10), settings.logger_watcher_buf_size / (1 << 10),
      271: 4219:           settings.logger_buf_size / (1 << 10));
      271: 4220:    verify_default("tail_repair_time", settings.tail_repair_time == TAIL_REPAIR_TIME_DEFAULT);
      271: 4221:    verify_default("lru_crawler_tocrawl", settings.lru_crawler_tocrawl == 0);
      271: 4222:    verify_default("idle_timeout", settings.idle_timeout == 0);
        -: 4223:#ifdef HAVE_DROP_PRIVILEGES
        -: 4224:    printf("   - drop_privileges:     enable dropping extra syscall privileges\n"
        -: 4225:           "   - no_drop_privileges:  disable drop_privileges in case it causes issues with\n"
        -: 4226:           "                          some customisation.\n"
        -: 4227:           "                          (default is no_drop_privileges)\n");
        -: 4228:    verify_default("drop_privileges", !settings.drop_privileges);
        -: 4229:#ifdef MEMCACHED_DEBUG
        -: 4230:    printf("   - relaxed_privileges:  running tests requires extra privileges. (default: %s)\n",
        -: 4231:           flag_enabled_disabled(settings.relaxed_privileges));
        -: 4232:#endif
        -: 4233:#endif
        -: 4234:#ifdef SOCK_COOKIE_ID
      271: 4235:    printf("   - sock_cookie_id:      attributes an ID to a socket for ip filtering/firewalls \n");
        -: 4236:#endif
        -: 4237:#ifdef EXTSTORE
      271: 4238:    printf("\n   - External storage (ext_*) related options (see: https://memcached.org/extstore)\n");
      813: 4239:    printf("   - ext_path:            file to write to for external storage.\n"
        -: 4240:           "                          ie: ext_path=/mnt/d1/extstore:1G\n"
        -: 4241:           "   - ext_page_size:       size in megabytes of storage pages. (default: %u)\n"
        -: 4242:           "   - ext_wbuf_size:       size in megabytes of page write buffers. (default: %u)\n"
        -: 4243:           "   - ext_threads:         number of IO threads to run. (default: %u)\n"
        -: 4244:           "   - ext_item_size:       store items larger than this (bytes, default %u)\n"
        -: 4245:           "   - ext_item_age:        store items idle at least this long (seconds, default: no age limit)\n"
        -: 4246:           "   - ext_low_ttl:         consider TTLs lower than this specially (default: %u)\n"
        -: 4247:           "   - ext_drop_unread:     don't re-write unread values during compaction (default: %s)\n"
        -: 4248:           "   - ext_recache_rate:    recache an item every N accesses (default: %u)\n"
        -: 4249:           "   - ext_compact_under:   compact when fewer than this many free pages\n"
        -: 4250:           "                          (default: 1/4th of the assigned storage)\n"
        -: 4251:           "   - ext_drop_under:      drop COLD items when fewer than this many free pages\n"
        -: 4252:           "                          (default: 1/4th of the assigned storage)\n"
        -: 4253:           "   - ext_max_frag:        max page fragmentation to tolerate (default: %.2f)\n"
        -: 4254:           "   - ext_max_sleep:       max sleep time of background threads in us (default: %u)\n"
        -: 4255:           "   - slab_automove_freeratio: ratio of memory to hold free as buffer.\n"
        -: 4256:           "                          (see doc/storage.txt for more info, default: %.3f)\n",
      271: 4257:           settings.ext_page_size / (1 << 20), settings.ext_wbuf_size / (1 << 20), settings.ext_io_threadcount,
        -: 4258:           settings.ext_item_size, settings.ext_low_ttl,
      271: 4259:           flag_enabled_disabled(settings.ext_drop_unread), settings.ext_recache_rate,
        -: 4260:           settings.ext_max_frag, settings.ext_max_sleep, settings.slab_automove_freeratio);
      271: 4261:    verify_default("ext_item_age", settings.ext_item_age == UINT_MAX);
        -: 4262:#endif
        -: 4263:#ifdef PROXY
        -: 4264:    printf("   - proxy_config:        path to lua config file.\n");
        -: 4265:#ifdef HAVE_LIBURING
        -: 4266:    printf("   - proxy_uring:         enable IO_URING for proxy backends.\n");
        -: 4267:#endif
        -: 4268:#endif
        -: 4269:#ifdef TLS
        -: 4270:    printf("   - ssl_chain_cert:      certificate chain file in PEM format\n"
        -: 4271:           "   - ssl_key:             private key, if not part of the -ssl_chain_cert\n"
        -: 4272:           "   - ssl_keyformat:       private key format (PEM, DER or ENGINE) (default: PEM)\n");
        -: 4273:    printf("   - ssl_verify_mode:     peer certificate verification mode, default is 0(None).\n"
        -: 4274:           "                          valid values are 0(None), 1(Request), 2(Require)\n"
        -: 4275:           "                          or 3(Once)\n");
        -: 4276:    printf("   - ssl_ciphers:         specify cipher list to be used\n"
        -: 4277:           "   - ssl_ca_cert:         PEM format file of acceptable client CA's\n"
        -: 4278:           "   - ssl_wbuf_size:       size in kilobytes of per-connection SSL output buffer\n"
        -: 4279:           "                          (default: %u)\n", settings.ssl_wbuf_size / (1 << 10));
        -: 4280:    printf("   - ssl_session_cache:   enable server-side SSL session cache, to support session\n"
        -: 4281:           "                          resumption\n"
        -: 4282:           "   - ssl_kernel_tls:      enable kernel TLS offload\n"
        -: 4283:           "   - ssl_min_version:     minimum protocol version to accept (default: %s)\n",
        -: 4284:           ssl_proto_text(settings.ssl_min_version));
        -: 4285:#if defined(TLS1_3_VERSION)
        -: 4286:    printf("                          valid values are 0(%s), 1(%s), 2(%s), or 3(%s).\n",
        -: 4287:           ssl_proto_text(TLS1_VERSION), ssl_proto_text(TLS1_1_VERSION),
        -: 4288:           ssl_proto_text(TLS1_2_VERSION), ssl_proto_text(TLS1_3_VERSION));
        -: 4289:#else
        -: 4290:    printf("                          valid values are 0(%s), 1(%s), or 2(%s).\n",
        -: 4291:           ssl_proto_text(TLS1_VERSION), ssl_proto_text(TLS1_1_VERSION),
        -: 4292:           ssl_proto_text(TLS1_2_VERSION));
        -: 4293:#endif
        -: 4294:    verify_default("ssl_keyformat", settings.ssl_keyformat == SSL_FILETYPE_PEM);
        -: 4295:    verify_default("ssl_verify_mode", settings.ssl_verify_mode == SSL_VERIFY_NONE);
        -: 4296:    verify_default("ssl_min_version", settings.ssl_min_version == TLS1_2_VERSION);
        -: 4297:#endif
      271: 4298:    printf("-N, --napi_ids            number of napi ids. see doc/napi_ids.txt for more details\n");
      271: 4299:    return;
        -: 4300:}
        -: 4301:
    #####: 4302:static void usage_license(void) {
    #####: 4303:    printf(PACKAGE " " VERSION "\n\n");
    #####: 4304:    printf(
        -: 4305:    "Copyright (c) 2003, Danga Interactive, Inc. <http://www.danga.com/>\n"
        -: 4306:    "All rights reserved.\n"
        -: 4307:    "\n"
        -: 4308:    "Redistribution and use in source and binary forms, with or without\n"
        -: 4309:    "modification, are permitted provided that the following conditions are\n"
        -: 4310:    "met:\n"
        -: 4311:    "\n"
        -: 4312:    "    * Redistributions of source code must retain the above copyright\n"
        -: 4313:    "notice, this list of conditions and the following disclaimer.\n"
        -: 4314:    "\n"
        -: 4315:    "    * Redistributions in binary form must reproduce the above\n"
        -: 4316:    "copyright notice, this list of conditions and the following disclaimer\n"
        -: 4317:    "in the documentation and/or other materials provided with the\n"
        -: 4318:    "distribution.\n"
        -: 4319:    "\n"
        -: 4320:    "    * Neither the name of the Danga Interactive nor the names of its\n"
        -: 4321:    "contributors may be used to endorse or promote products derived from\n"
        -: 4322:    "this software without specific prior written permission.\n"
        -: 4323:    "\n"
        -: 4324:    "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n"
        -: 4325:    "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n"
        -: 4326:    "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n"
        -: 4327:    "A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n"
        -: 4328:    "OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n"
        -: 4329:    "SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n"
        -: 4330:    "LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n"
        -: 4331:    "DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n"
        -: 4332:    "THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n"
        -: 4333:    "(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n"
        -: 4334:    "OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        -: 4335:    "\n"
        -: 4336:    "\n"
        -: 4337:    "This product includes software developed by Niels Provos.\n"
        -: 4338:    "\n"
        -: 4339:    "[ libevent ]\n"
        -: 4340:    "\n"
        -: 4341:    "Copyright 2000-2003 Niels Provos <provos@citi.umich.edu>\n"
        -: 4342:    "All rights reserved.\n"
        -: 4343:    "\n"
        -: 4344:    "Redistribution and use in source and binary forms, with or without\n"
        -: 4345:    "modification, are permitted provided that the following conditions\n"
        -: 4346:    "are met:\n"
        -: 4347:    "1. Redistributions of source code must retain the above copyright\n"
        -: 4348:    "   notice, this list of conditions and the following disclaimer.\n"
        -: 4349:    "2. Redistributions in binary form must reproduce the above copyright\n"
        -: 4350:    "   notice, this list of conditions and the following disclaimer in the\n"
        -: 4351:    "   documentation and/or other materials provided with the distribution.\n"
        -: 4352:    "3. All advertising materials mentioning features or use of this software\n"
        -: 4353:    "   must display the following acknowledgement:\n"
        -: 4354:    "      This product includes software developed by Niels Provos.\n"
        -: 4355:    "4. The name of the author may not be used to endorse or promote products\n"
        -: 4356:    "   derived from this software without specific prior written permission.\n"
        -: 4357:    "\n"
        -: 4358:    "THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n"
        -: 4359:    "IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n"
        -: 4360:    "OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n"
        -: 4361:    "IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n"
        -: 4362:    "INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n"
        -: 4363:    "NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n"
        -: 4364:    "DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n"
        -: 4365:    "THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n"
        -: 4366:    "(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n"
        -: 4367:    "THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        -: 4368:    );
        -: 4369:
    #####: 4370:    return;
        -: 4371:}
        -: 4372:
        1: 4373:static void save_pid(const char *pid_file) {
        1: 4374:    FILE *fp;
        1: 4375:    if (access(pid_file, F_OK) == 0) {
    #####: 4376:        if ((fp = fopen(pid_file, "r")) != NULL) {
    #####: 4377:            char buffer[1024];
    #####: 4378:            if (fgets(buffer, sizeof(buffer), fp) != NULL) {
    #####: 4379:                unsigned int pid;
    #####: 4380:                if (safe_strtoul(buffer, &pid) && kill((pid_t)pid, 0) == 0) {
    #####: 4381:                    fprintf(stderr, "WARNING: The pid file contained the following (running) pid: %u\n", pid);
        -: 4382:                }
        -: 4383:            }
    #####: 4384:            fclose(fp);
        -: 4385:        }
        -: 4386:    }
        -: 4387:
        -: 4388:    /* Create the pid file first with a temporary name, then
        -: 4389:     * atomically move the file to the real name to avoid a race with
        -: 4390:     * another process opening the file to read the pid, but finding
        -: 4391:     * it empty.
        -: 4392:     */
        1: 4393:    char tmp_pid_file[1024];
        1: 4394:    snprintf(tmp_pid_file, sizeof(tmp_pid_file), "%s.tmp", pid_file);
        -: 4395:
        1: 4396:    if ((fp = fopen(tmp_pid_file, "w")) == NULL) {
    #####: 4397:        vperror("Could not open the pid file %s for writing", tmp_pid_file);
    #####: 4398:        return;
        -: 4399:    }
        -: 4400:
        1: 4401:    fprintf(fp,"%ld\n", (long)getpid());
        1: 4402:    if (fclose(fp) == -1) {
    #####: 4403:        vperror("Could not close the pid file %s", tmp_pid_file);
        -: 4404:    }
        -: 4405:
        1: 4406:    if (rename(tmp_pid_file, pid_file) != 0) {
    #####: 4407:        vperror("Could not rename the pid file from %s to %s",
        -: 4408:                tmp_pid_file, pid_file);
        -: 4409:    }
        -: 4410:}
        -: 4411:
        1: 4412:static void remove_pidfile(const char *pid_file) {
        1: 4413:  if (pid_file == NULL)
        -: 4414:      return;
        -: 4415:
        1: 4416:  if (unlink(pid_file) != 0) {
        1: 4417:      vperror("Could not remove the pid file %s", pid_file);
        -: 4418:  }
        -: 4419:
        -: 4420:}
        -: 4421:
      104: 4422:static void sig_handler(const int sig) {
      104: 4423:    stop_main_loop = EXIT_NORMALLY;
      104: 4424:    printf("Signal handled: %s.\n", strsignal(sig));
      104: 4425:}
        -: 4426:
    #####: 4427:static void sighup_handler(const int sig) {
    #####: 4428:    settings.sig_hup = true;
    #####: 4429:}
        -: 4430:
        2: 4431:static void sig_usrhandler(const int sig) {
        2: 4432:    printf("Graceful shutdown signal handled: %s.\n", strsignal(sig));
        2: 4433:    stop_main_loop = GRACE_STOP;
        2: 4434:}
        -: 4435:
        -: 4436:/*
        -: 4437: * On systems that supports multiple page sizes we may reduce the
        -: 4438: * number of TLB-misses by using the biggest available page size
        -: 4439: */
    #####: 4440:static int enable_large_pages(void) {
        -: 4441:#if defined(HAVE_GETPAGESIZES) && defined(HAVE_MEMCNTL)
        -: 4442:    int ret = -1;
        -: 4443:    size_t sizes[32];
        -: 4444:    int avail = getpagesizes(sizes, 32);
        -: 4445:    if (avail != -1) {
        -: 4446:        size_t max = sizes[0];
        -: 4447:        struct memcntl_mha arg = {0};
        -: 4448:        int ii;
        -: 4449:
        -: 4450:        for (ii = 1; ii < avail; ++ii) {
        -: 4451:            if (max < sizes[ii]) {
        -: 4452:                max = sizes[ii];
        -: 4453:            }
        -: 4454:        }
        -: 4455:
        -: 4456:        arg.mha_flags   = 0;
        -: 4457:        arg.mha_pagesize = max;
        -: 4458:        arg.mha_cmd = MHA_MAPSIZE_BSSBRK;
        -: 4459:
        -: 4460:        if (memcntl(0, 0, MC_HAT_ADVISE, (caddr_t)&arg, 0, 0) == -1) {
        -: 4461:            fprintf(stderr, "Failed to set large pages: %s\n",
        -: 4462:                    strerror(errno));
        -: 4463:            fprintf(stderr, "Will use default page size\n");
        -: 4464:        } else {
        -: 4465:            ret = 0;
        -: 4466:        }
        -: 4467:    } else {
        -: 4468:        fprintf(stderr, "Failed to get supported pagesizes: %s\n",
        -: 4469:                strerror(errno));
        -: 4470:        fprintf(stderr, "Will use default page size\n");
        -: 4471:    }
        -: 4472:
        -: 4473:    return ret;
        -: 4474:#elif defined(__linux__) && defined(MADV_HUGEPAGE)
        -: 4475:    /* check if transparent hugepages is compiled into the kernel */
        -: 4476:    /* RH based systems possibly uses a different path */
    #####: 4477:    static const char *mm_thp_paths[] = {
        -: 4478:        "/sys/kernel/mm/transparent_hugepage/enabled",
        -: 4479:        "/sys/kernel/mm/redhat_transparent_hugepage/enabled",
        -: 4480:        NULL
        -: 4481:    };
        -: 4482:
    #####: 4483:    char thpb[128] = {0};
    #####: 4484:    int pfd = -1;
    #####: 4485:    for (const char **p = mm_thp_paths; *p; p++) {
    #####: 4486:        if ((pfd = open(*p, O_RDONLY)) != -1)
        -: 4487:            break;
        -: 4488:    }
        -: 4489:
    #####: 4490:    if (pfd == -1) {
    #####: 4491:        fprintf(stderr, "Transparent huge pages support not detected.\n");
    #####: 4492:        fprintf(stderr, "Will use default page size.\n");
    #####: 4493:        return -1;
        -: 4494:    }
    #####: 4495:    ssize_t rd = read(pfd, thpb, sizeof(thpb));
    #####: 4496:    close(pfd);
    #####: 4497:    if (rd <= 0) {
    #####: 4498:        fprintf(stderr, "Transparent huge pages could not read the configuration.\n");
    #####: 4499:        fprintf(stderr, "Will use default page size.\n");
    #####: 4500:        return -1;
        -: 4501:    }
    #####: 4502:    thpb[rd] = 0;
    #####: 4503:    if (strstr(thpb, "[never]")) {
    #####: 4504:        fprintf(stderr, "Transparent huge pages support disabled.\n");
    #####: 4505:        fprintf(stderr, "Will use default page size.\n");
    #####: 4506:        return -1;
        -: 4507:    }
        -: 4508:    return 0;
        -: 4509:#elif defined(__FreeBSD__)
        -: 4510:    int spages;
        -: 4511:    size_t spagesl = sizeof(spages);
        -: 4512:
        -: 4513:    if (sysctlbyname("vm.pmap.pg_ps_enabled", &spages,
        -: 4514:    &spagesl, NULL, 0) != 0) {
        -: 4515:        fprintf(stderr, "Could not evaluate the presence of superpages features.");
        -: 4516:        return -1;
        -: 4517:    }
        -: 4518:    if (spages != 1) {
        -: 4519:        fprintf(stderr, "Superpages support not detected.\n");
        -: 4520:        fprintf(stderr, "Will use default page size.\n");
        -: 4521:        return -1;
        -: 4522:    }
        -: 4523:    return 0;
        -: 4524:#else
        -: 4525:    return -1;
        -: 4526:#endif
        -: 4527:}
        -: 4528:
        -: 4529:/**
        -: 4530: * Do basic sanity check of the runtime environment
        -: 4531: * @return true if no errors found, false if we can't use this env
        -: 4532: */
      381: 4533:static bool sanitycheck(void) {
        -: 4534:    /* One of our biggest problems is old and bogus libevents */
      381: 4535:    const char *ever = event_get_version();
      381: 4536:    if (ever != NULL) {
      381: 4537:        if (strncmp(ever, "1.", 2) == 0) {
    #####: 4538:            fprintf(stderr, "You are using libevent %s.\nPlease upgrade to 2.x"
        -: 4539:                        " or newer\n", event_get_version());
    #####: 4540:            return false;
        -: 4541:        }
        -: 4542:    }
        -: 4543:
        -: 4544:    return true;
        -: 4545:}
        -: 4546:
    #####: 4547:static bool _parse_slab_sizes(char *s, uint32_t *slab_sizes) {
    #####: 4548:    char *b = NULL;
    #####: 4549:    uint32_t size = 0;
    #####: 4550:    int i = 0;
    #####: 4551:    uint32_t last_size = 0;
        -: 4552:
    #####: 4553:    if (strlen(s) < 1)
        -: 4554:        return false;
        -: 4555:
    #####: 4556:    for (char *p = strtok_r(s, "-", &b);
    #####: 4557:         p != NULL;
    #####: 4558:         p = strtok_r(NULL, "-", &b)) {
    #####: 4559:        if (!safe_strtoul(p, &size) || size < settings.chunk_size
    #####: 4560:             || size > settings.slab_chunk_size_max) {
    #####: 4561:            fprintf(stderr, "slab size %u is out of valid range\n", size);
    #####: 4562:            return false;
        -: 4563:        }
    #####: 4564:        if (last_size >= size) {
    #####: 4565:            fprintf(stderr, "slab size %u cannot be lower than or equal to a previous class size\n", size);
    #####: 4566:            return false;
        -: 4567:        }
    #####: 4568:        if (size <= last_size + CHUNK_ALIGN_BYTES) {
    #####: 4569:            fprintf(stderr, "slab size %u must be at least %d bytes larger than previous class\n",
        -: 4570:                    size, CHUNK_ALIGN_BYTES);
    #####: 4571:            return false;
        -: 4572:        }
    #####: 4573:        slab_sizes[i++] = size;
    #####: 4574:        last_size = size;
    #####: 4575:        if (i >= MAX_NUMBER_OF_SLAB_CLASSES-1) {
    #####: 4576:            fprintf(stderr, "too many slab classes specified\n");
    #####: 4577:            return false;
        -: 4578:        }
        -: 4579:    }
        -: 4580:
    #####: 4581:    slab_sizes[i] = 0;
    #####: 4582:    return true;
        -: 4583:}
        -: 4584:
        -: 4585:struct _mc_meta_data {
        -: 4586:    void *mmap_base;
        -: 4587:    uint64_t old_base;
        -: 4588:    char *slab_config; // string containing either factor or custom slab list.
        -: 4589:    int64_t time_delta;
        -: 4590:    uint64_t process_started;
        -: 4591:    uint32_t current_time;
        -: 4592:};
        -: 4593:
        -: 4594:// We need to remember a combination of configuration settings and global
        -: 4595:// state for restart viability and resumption of internal services.
        -: 4596:// Compared to the number of tunables and state values, relatively little
        -: 4597:// does need to be remembered.
        -: 4598:// Time is the hardest; we have to assume the sys clock is correct and re-sync for
        -: 4599:// the lost time after restart.
        1: 4600:static int _mc_meta_save_cb(const char *tag, void *ctx, void *data) {
        1: 4601:    struct _mc_meta_data *meta = (struct _mc_meta_data *)data;
        -: 4602:
        -: 4603:    // Settings to remember.
        -: 4604:    // TODO: should get a version of version which is numeric, else
        -: 4605:    // comparisons for compat reasons are difficult.
        -: 4606:    // it may be possible to punt on this for now; since we can test for the
        -: 4607:    // absence of another key... such as the new numeric version.
        -: 4608:    //restart_set_kv(ctx, "version", "%s", VERSION);
        -: 4609:    // We hold the original factor or subopts _string_
        -: 4610:    // it can be directly compared without roundtripping through floats or
        -: 4611:    // serializing/deserializing the long options list.
        1: 4612:    restart_set_kv(ctx, "slab_config", "%s", meta->slab_config);
        1: 4613:    restart_set_kv(ctx, "maxbytes", "%llu", (unsigned long long) settings.maxbytes);
        1: 4614:    restart_set_kv(ctx, "chunk_size", "%d", settings.chunk_size);
        1: 4615:    restart_set_kv(ctx, "item_size_max", "%d", settings.item_size_max);
        1: 4616:    restart_set_kv(ctx, "slab_chunk_size_max", "%d", settings.slab_chunk_size_max);
        1: 4617:    restart_set_kv(ctx, "slab_page_size", "%d", settings.slab_page_size);
        1: 4618:    restart_set_kv(ctx, "use_cas", "%s", settings.use_cas ? "true" : "false");
        1: 4619:    restart_set_kv(ctx, "slab_reassign", "%s", settings.slab_reassign ? "true" : "false");
        -: 4620:
        -: 4621:    // Online state to remember.
        -: 4622:
        -: 4623:    // current time is tough. we need to rely on the clock being correct to
        -: 4624:    // pull the delta between stop and start times. we also need to know the
        -: 4625:    // delta between start time and now to restore monotonic clocks.
        -: 4626:    // for non-monotonic clocks (some OS?), process_started is the only
        -: 4627:    // important one.
        1: 4628:    restart_set_kv(ctx, "current_time", "%u", current_time);
        -: 4629:    // types are great until... this. some systems time_t could be big, but
        -: 4630:    // I'm assuming never negative.
        1: 4631:    restart_set_kv(ctx, "process_started", "%llu", (unsigned long long) process_started);
        -: 4632:    {
        1: 4633:        struct timeval tv;
        1: 4634:        gettimeofday(&tv, NULL);
        1: 4635:        restart_set_kv(ctx, "stop_time", "%lu", tv.tv_sec);
        -: 4636:    }
        -: 4637:
        -: 4638:    // Might as well just fetch the next CAS value to use than tightly
        -: 4639:    // coupling the internal variable into the restart system.
        1: 4640:    restart_set_kv(ctx, "current_cas", "%llu", (unsigned long long) get_cas_id());
        1: 4641:    restart_set_kv(ctx, "oldest_cas", "%llu", (unsigned long long) settings.oldest_cas);
        1: 4642:    restart_set_kv(ctx, "logger_gid", "%llu", logger_get_gid());
        1: 4643:    restart_set_kv(ctx, "hashpower", "%u", stats_state.hash_power_level);
        -: 4644:    // NOTE: oldest_live is a rel_time_t, which aliases for unsigned int.
        -: 4645:    // should future proof this with a 64bit upcast, or fetch value from a
        -: 4646:    // converter function/macro?
        1: 4647:    restart_set_kv(ctx, "oldest_live", "%u", settings.oldest_live);
        -: 4648:    // TODO: use uintptr_t etc? is it portable enough?
        1: 4649:    restart_set_kv(ctx, "mmap_oldbase", "%p", meta->mmap_base);
        -: 4650:
        1: 4651:    return 0;
        -: 4652:}
        -: 4653:
        -: 4654:// We must see at least this number of checked lines. Else empty/missing lines
        -: 4655:// could cause a false-positive.
        -: 4656:// TODO: Once crc32'ing of the metadata file is done this could be ensured better by
        -: 4657:// the restart module itself (crc32 + count of lines must match on the
        -: 4658:// backend)
        -: 4659:#define RESTART_REQUIRED_META 17
        -: 4660:
        -: 4661:// With this callback we make a decision on if the current configuration
        -: 4662:// matches up enough to allow reusing the cache.
        -: 4663:// We also re-load important runtime information.
        1: 4664:static int _mc_meta_load_cb(const char *tag, void *ctx, void *data) {
        1: 4665:    struct _mc_meta_data *meta = (struct _mc_meta_data *)data;
        1: 4666:    char *key;
        1: 4667:    char *val;
        1: 4668:    int reuse_mmap = 0;
        1: 4669:    meta->process_started = 0;
        1: 4670:    meta->time_delta = 0;
        1: 4671:    meta->current_time = 0;
        1: 4672:    int lines_seen = 0;
        -: 4673:
        -: 4674:    // TODO: not sure this is any better than just doing an if/else tree with
        -: 4675:    // strcmp's...
        1: 4676:    enum {
        -: 4677:        R_MMAP_OLDBASE = 0,
        -: 4678:        R_MAXBYTES,
        -: 4679:        R_CHUNK_SIZE,
        -: 4680:        R_ITEM_SIZE_MAX,
        -: 4681:        R_SLAB_CHUNK_SIZE_MAX,
        -: 4682:        R_SLAB_PAGE_SIZE,
        -: 4683:        R_SLAB_CONFIG,
        -: 4684:        R_USE_CAS,
        -: 4685:        R_SLAB_REASSIGN,
        -: 4686:        R_CURRENT_CAS,
        -: 4687:        R_OLDEST_CAS,
        -: 4688:        R_OLDEST_LIVE,
        -: 4689:        R_LOGGER_GID,
        -: 4690:        R_CURRENT_TIME,
        -: 4691:        R_STOP_TIME,
        -: 4692:        R_PROCESS_STARTED,
        -: 4693:        R_HASHPOWER,
        -: 4694:    };
        -: 4695:
        1: 4696:    const char *opts[] = {
        -: 4697:        [R_MMAP_OLDBASE] = "mmap_oldbase",
        -: 4698:        [R_MAXBYTES] = "maxbytes",
        -: 4699:        [R_CHUNK_SIZE] = "chunk_size",
        -: 4700:        [R_ITEM_SIZE_MAX] = "item_size_max",
        -: 4701:        [R_SLAB_CHUNK_SIZE_MAX] = "slab_chunk_size_max",
        -: 4702:        [R_SLAB_PAGE_SIZE] = "slab_page_size",
        -: 4703:        [R_SLAB_CONFIG] = "slab_config",
        -: 4704:        [R_USE_CAS] = "use_cas",
        -: 4705:        [R_SLAB_REASSIGN] = "slab_reassign",
        -: 4706:        [R_CURRENT_CAS] = "current_cas",
        -: 4707:        [R_OLDEST_CAS] = "oldest_cas",
        -: 4708:        [R_OLDEST_LIVE] = "oldest_live",
        -: 4709:        [R_LOGGER_GID] = "logger_gid",
        -: 4710:        [R_CURRENT_TIME] = "current_time",
        -: 4711:        [R_STOP_TIME] = "stop_time",
        -: 4712:        [R_PROCESS_STARTED] = "process_started",
        -: 4713:        [R_HASHPOWER] = "hashpower",
        -: 4714:        NULL
        -: 4715:    };
        -: 4716:
       18: 4717:    while (restart_get_kv(ctx, &key, &val) == RESTART_OK) {
       17: 4718:        int type = 0;
       17: 4719:        int32_t val_int = 0;
       17: 4720:        uint32_t val_uint = 0;
       17: 4721:        int64_t bigval_int = 0;
       17: 4722:        uint64_t bigval_uint = 0;
        -: 4723:
      153: 4724:        while (opts[type] != NULL && strcmp(key, opts[type]) != 0) {
      136: 4725:            type++;
        -: 4726:        }
      17*: 4727:        if (opts[type] == NULL) {
    #####: 4728:            fprintf(stderr, "[restart] unknown/unhandled key: %s\n", key);
    #####: 4729:            continue;
        -: 4730:        }
       17: 4731:        lines_seen++;
        -: 4732:
        -: 4733:        // helper for any boolean checkers.
       17: 4734:        bool val_bool = false;
       17: 4735:        bool is_bool = true;
       17: 4736:        if (strcmp(val, "false") == 0) {
        -: 4737:            val_bool = false;
       17: 4738:        } else if (strcmp(val, "true") == 0) {
        -: 4739:            val_bool = true;
        -: 4740:        } else {
       15: 4741:            is_bool = false;
        -: 4742:        }
        -: 4743:
       17: 4744:        switch (type) {
        1: 4745:        case R_MMAP_OLDBASE:
        1: 4746:            if (!safe_strtoull_hex(val, &meta->old_base)) {
    #####: 4747:                fprintf(stderr, "[restart] failed to parse %s: %s\n", key, val);
    #####: 4748:                reuse_mmap = -1;
        -: 4749:            }
        -: 4750:            break;
        1: 4751:        case R_MAXBYTES:
        1: 4752:            if (!safe_strtoll(val, &bigval_int) || settings.maxbytes != bigval_int) {
        -: 4753:                reuse_mmap = -1;
        -: 4754:            }
        -: 4755:            break;
        1: 4756:        case R_CHUNK_SIZE:
        1: 4757:            if (!safe_strtol(val, &val_int) || settings.chunk_size != val_int) {
        -: 4758:                reuse_mmap = -1;
        -: 4759:            }
        -: 4760:            break;
        1: 4761:        case R_ITEM_SIZE_MAX:
        1: 4762:            if (!safe_strtol(val, &val_int) || settings.item_size_max != val_int) {
        -: 4763:                reuse_mmap = -1;
        -: 4764:            }
        -: 4765:            break;
        1: 4766:        case R_SLAB_CHUNK_SIZE_MAX:
        1: 4767:            if (!safe_strtol(val, &val_int) || settings.slab_chunk_size_max != val_int) {
        -: 4768:                reuse_mmap = -1;
        -: 4769:            }
        -: 4770:            break;
        1: 4771:        case R_SLAB_PAGE_SIZE:
        1: 4772:            if (!safe_strtol(val, &val_int) || settings.slab_page_size != val_int) {
        -: 4773:                reuse_mmap = -1;
        -: 4774:            }
        -: 4775:            break;
        1: 4776:        case R_SLAB_CONFIG:
        1: 4777:            if (strcmp(val, meta->slab_config) != 0) {
        -: 4778:                reuse_mmap = -1;
        -: 4779:            }
        -: 4780:            break;
        1: 4781:        case R_USE_CAS:
        1: 4782:            if (!is_bool || settings.use_cas != val_bool) {
        -: 4783:                reuse_mmap = -1;
        -: 4784:            }
        -: 4785:            break;
        1: 4786:        case R_SLAB_REASSIGN:
        1: 4787:            if (!is_bool || settings.slab_reassign != val_bool) {
        -: 4788:                reuse_mmap = -1;
        -: 4789:            }
        -: 4790:            break;
        1: 4791:        case R_CURRENT_CAS:
        -: 4792:            // FIXME: do we need to fail if these values _aren't_ found?
        1: 4793:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4794:                reuse_mmap = -1;
        -: 4795:            } else {
        1: 4796:                set_cas_id(bigval_uint);
        -: 4797:            }
        -: 4798:            break;
        1: 4799:        case R_OLDEST_CAS:
        1: 4800:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4801:                reuse_mmap = -1;
        -: 4802:            } else {
        1: 4803:                settings.oldest_cas = bigval_uint;
        -: 4804:            }
        -: 4805:            break;
        1: 4806:        case R_OLDEST_LIVE:
        1: 4807:            if (!safe_strtoul(val, &val_uint)) {
        -: 4808:                reuse_mmap = -1;
        -: 4809:            } else {
        1: 4810:                settings.oldest_live = val_uint;
        -: 4811:            }
        -: 4812:            break;
        1: 4813:        case R_LOGGER_GID:
        1: 4814:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4815:                reuse_mmap = -1;
        -: 4816:            } else {
        1: 4817:                logger_set_gid(bigval_uint);
        -: 4818:            }
        -: 4819:            break;
        1: 4820:        case R_PROCESS_STARTED:
        1: 4821:            if (!safe_strtoull(val, &bigval_uint)) {
        -: 4822:                reuse_mmap = -1;
        -: 4823:            } else {
        1: 4824:                meta->process_started = bigval_uint;
        -: 4825:            }
        -: 4826:            break;
        1: 4827:        case R_CURRENT_TIME:
        1: 4828:            if (!safe_strtoul(val, &val_uint)) {
        -: 4829:                reuse_mmap = -1;
        -: 4830:            } else {
        1: 4831:                meta->current_time = val_uint;
        -: 4832:            }
        -: 4833:            break;
        1: 4834:        case R_STOP_TIME:
        1: 4835:            if (!safe_strtoll(val, &bigval_int)) {
        -: 4836:                reuse_mmap = -1;
        -: 4837:            } else {
        1: 4838:                struct timeval t;
        1: 4839:                gettimeofday(&t, NULL);
        1: 4840:                meta->time_delta = t.tv_sec - bigval_int;
        -: 4841:                // clock has done something crazy.
        -: 4842:                // there are _lots_ of ways the clock can go wrong here, but
        -: 4843:                // this is a safe sanity check since there's nothing else we
        -: 4844:                // can realistically do.
        1: 4845:                if (meta->time_delta <= 0) {
    #####: 4846:                    reuse_mmap = -1;
        -: 4847:                }
        -: 4848:            }
        -: 4849:            break;
        1: 4850:        case R_HASHPOWER:
        1: 4851:            if (!safe_strtoul(val, &val_uint)) {
        -: 4852:                reuse_mmap = -1;
        -: 4853:            } else {
        1: 4854:                settings.hashpower_init = val_uint;
        -: 4855:            }
        -: 4856:            break;
    #####: 4857:        default:
    #####: 4858:            fprintf(stderr, "[restart] unhandled key: %s\n", key);
        -: 4859:        }
        -: 4860:
      17*: 4861:        if (reuse_mmap != 0) {
    #####: 4862:            fprintf(stderr, "[restart] restart incompatible due to setting for [%s] [old value: %s]\n", key, val);
    #####: 4863:            break;
        -: 4864:        }
        -: 4865:    }
        -: 4866:
        1: 4867:    if (lines_seen < RESTART_REQUIRED_META) {
    #####: 4868:        fprintf(stderr, "[restart] missing some metadata lines\n");
    #####: 4869:        reuse_mmap = -1;
        -: 4870:    }
        -: 4871:
        1: 4872:    return reuse_mmap;
        -: 4873:}
        -: 4874:
      381: 4875:int main (int argc, char **argv) {
      381: 4876:    int c;
      381: 4877:    bool lock_memory = false;
      381: 4878:    bool do_daemonize = false;
      381: 4879:    bool preallocate = false;
      381: 4880:    int maxcore = 0;
      381: 4881:    char *username = NULL;
      381: 4882:    char *pid_file = NULL;
      381: 4883:    struct passwd *pw;
      381: 4884:    struct rlimit rlim;
      381: 4885:    char *buf;
      381: 4886:    char unit = '\0';
      381: 4887:    int size_max = 0;
      381: 4888:    int retval = EXIT_SUCCESS;
      381: 4889:    bool protocol_specified = false;
      381: 4890:    bool tcp_specified = false;
      381: 4891:    bool udp_specified = false;
      381: 4892:    bool start_lru_maintainer = true;
      381: 4893:    bool start_lru_crawler = true;
      381: 4894:    bool start_assoc_maint = true;
      381: 4895:    enum hashfunc_type hash_type = MURMUR3_HASH;
      381: 4896:    uint32_t tocrawl;
      381: 4897:    uint32_t slab_sizes[MAX_NUMBER_OF_SLAB_CLASSES];
      381: 4898:    bool use_slab_sizes = false;
      381: 4899:    char *slab_sizes_unparsed = NULL;
      381: 4900:    bool slab_chunk_size_changed = false;
        -: 4901:    // struct for restart code. Initialized up here so we can curry
        -: 4902:    // important settings to save or validate.
      381: 4903:    struct _mc_meta_data *meta = malloc(sizeof(struct _mc_meta_data));
      381: 4904:    meta->slab_config = NULL;
      381: 4905:    char *subopts, *subopts_orig;
      381: 4906:    char *subopts_value;
      381: 4907:    enum {
        -: 4908:        MAXCONNS_FAST = 0,
        -: 4909:        HASHPOWER_INIT,
        -: 4910:        NO_HASHEXPAND,
        -: 4911:        SLAB_REASSIGN,
        -: 4912:        SLAB_AUTOMOVE,
        -: 4913:        SLAB_AUTOMOVE_RATIO,
        -: 4914:        SLAB_AUTOMOVE_WINDOW,
        -: 4915:        TAIL_REPAIR_TIME,
        -: 4916:        HASH_ALGORITHM,
        -: 4917:        LRU_CRAWLER,
        -: 4918:        LRU_CRAWLER_SLEEP,
        -: 4919:        LRU_CRAWLER_TOCRAWL,
        -: 4920:        LRU_MAINTAINER,
        -: 4921:        HOT_LRU_PCT,
        -: 4922:        WARM_LRU_PCT,
        -: 4923:        HOT_MAX_FACTOR,
        -: 4924:        WARM_MAX_FACTOR,
        -: 4925:        TEMPORARY_TTL,
        -: 4926:        IDLE_TIMEOUT,
        -: 4927:        WATCHER_LOGBUF_SIZE,
        -: 4928:        WORKER_LOGBUF_SIZE,
        -: 4929:        SLAB_SIZES,
        -: 4930:        SLAB_CHUNK_MAX,
        -: 4931:        TRACK_SIZES,
        -: 4932:        NO_INLINE_ASCII_RESP,
        -: 4933:        MODERN,
        -: 4934:        NO_MODERN,
        -: 4935:        NO_CHUNKED_ITEMS,
        -: 4936:        NO_SLAB_REASSIGN,
        -: 4937:        NO_SLAB_AUTOMOVE,
        -: 4938:        NO_MAXCONNS_FAST,
        -: 4939:        INLINE_ASCII_RESP,
        -: 4940:        NO_LRU_CRAWLER,
        -: 4941:        NO_LRU_MAINTAINER,
        -: 4942:        NO_DROP_PRIVILEGES,
        -: 4943:        DROP_PRIVILEGES,
        -: 4944:        RESP_OBJ_MEM_LIMIT,
        -: 4945:        READ_BUF_MEM_LIMIT,
        -: 4946:        META_RESPONSE_OLD,
        -: 4947:#ifdef TLS
        -: 4948:        SSL_CERT,
        -: 4949:        SSL_KEY,
        -: 4950:        SSL_VERIFY_MODE,
        -: 4951:        SSL_KEYFORM,
        -: 4952:        SSL_CIPHERS,
        -: 4953:        SSL_CA_CERT,
        -: 4954:        SSL_WBUF_SIZE,
        -: 4955:        SSL_SESSION_CACHE,
        -: 4956:        SSL_KERNEL_TLS,
        -: 4957:        SSL_MIN_VERSION,
        -: 4958:#endif
        -: 4959:#ifdef PROXY
        -: 4960:        PROXY_CONFIG,
        -: 4961:        PROXY_URING,
        -: 4962:#endif
        -: 4963:#ifdef MEMCACHED_DEBUG
        -: 4964:        RELAXED_PRIVILEGES,
        -: 4965:#endif
        -: 4966:#ifdef SOCK_COOKIE_ID
        -: 4967:        COOKIE_ID,
        -: 4968:#endif
        -: 4969:    };
      381: 4970:    char *const subopts_tokens[] = {
        -: 4971:        [MAXCONNS_FAST] = "maxconns_fast",
        -: 4972:        [HASHPOWER_INIT] = "hashpower",
        -: 4973:        [NO_HASHEXPAND] = "no_hashexpand",
        -: 4974:        [SLAB_REASSIGN] = "slab_reassign",
        -: 4975:        [SLAB_AUTOMOVE] = "slab_automove",
        -: 4976:        [SLAB_AUTOMOVE_RATIO] = "slab_automove_ratio",
        -: 4977:        [SLAB_AUTOMOVE_WINDOW] = "slab_automove_window",
        -: 4978:        [TAIL_REPAIR_TIME] = "tail_repair_time",
        -: 4979:        [HASH_ALGORITHM] = "hash_algorithm",
        -: 4980:        [LRU_CRAWLER] = "lru_crawler",
        -: 4981:        [LRU_CRAWLER_SLEEP] = "lru_crawler_sleep",
        -: 4982:        [LRU_CRAWLER_TOCRAWL] = "lru_crawler_tocrawl",
        -: 4983:        [LRU_MAINTAINER] = "lru_maintainer",
        -: 4984:        [HOT_LRU_PCT] = "hot_lru_pct",
        -: 4985:        [WARM_LRU_PCT] = "warm_lru_pct",
        -: 4986:        [HOT_MAX_FACTOR] = "hot_max_factor",
        -: 4987:        [WARM_MAX_FACTOR] = "warm_max_factor",
        -: 4988:        [TEMPORARY_TTL] = "temporary_ttl",
        -: 4989:        [IDLE_TIMEOUT] = "idle_timeout",
        -: 4990:        [WATCHER_LOGBUF_SIZE] = "watcher_logbuf_size",
        -: 4991:        [WORKER_LOGBUF_SIZE] = "worker_logbuf_size",
        -: 4992:        [SLAB_SIZES] = "slab_sizes",
        -: 4993:        [SLAB_CHUNK_MAX] = "slab_chunk_max",
        -: 4994:        [TRACK_SIZES] = "track_sizes",
        -: 4995:        [NO_INLINE_ASCII_RESP] = "no_inline_ascii_resp",
        -: 4996:        [MODERN] = "modern",
        -: 4997:        [NO_MODERN] = "no_modern",
        -: 4998:        [NO_CHUNKED_ITEMS] = "no_chunked_items",
        -: 4999:        [NO_SLAB_REASSIGN] = "no_slab_reassign",
        -: 5000:        [NO_SLAB_AUTOMOVE] = "no_slab_automove",
        -: 5001:        [NO_MAXCONNS_FAST] = "no_maxconns_fast",
        -: 5002:        [INLINE_ASCII_RESP] = "inline_ascii_resp",
        -: 5003:        [NO_LRU_CRAWLER] = "no_lru_crawler",
        -: 5004:        [NO_LRU_MAINTAINER] = "no_lru_maintainer",
        -: 5005:        [NO_DROP_PRIVILEGES] = "no_drop_privileges",
        -: 5006:        [DROP_PRIVILEGES] = "drop_privileges",
        -: 5007:        [RESP_OBJ_MEM_LIMIT] = "resp_obj_mem_limit",
        -: 5008:        [READ_BUF_MEM_LIMIT] = "read_buf_mem_limit",
        -: 5009:        [META_RESPONSE_OLD] = "meta_response_old",
        -: 5010:#ifdef TLS
        -: 5011:        [SSL_CERT] = "ssl_chain_cert",
        -: 5012:        [SSL_KEY] = "ssl_key",
        -: 5013:        [SSL_VERIFY_MODE] = "ssl_verify_mode",
        -: 5014:        [SSL_KEYFORM] = "ssl_keyformat",
        -: 5015:        [SSL_CIPHERS] = "ssl_ciphers",
        -: 5016:        [SSL_CA_CERT] = "ssl_ca_cert",
        -: 5017:        [SSL_WBUF_SIZE] = "ssl_wbuf_size",
        -: 5018:        [SSL_SESSION_CACHE] = "ssl_session_cache",
        -: 5019:        [SSL_KERNEL_TLS] = "ssl_kernel_tls",
        -: 5020:        [SSL_MIN_VERSION] = "ssl_min_version",
        -: 5021:#endif
        -: 5022:#ifdef PROXY
        -: 5023:        [PROXY_CONFIG] = "proxy_config",
        -: 5024:        [PROXY_URING] = "proxy_uring",
        -: 5025:#endif
        -: 5026:#ifdef MEMCACHED_DEBUG
        -: 5027:        [RELAXED_PRIVILEGES] = "relaxed_privileges",
        -: 5028:#endif
        -: 5029:#ifdef SOCK_COOKIE_ID
        -: 5030:        [COOKIE_ID] = "sock_cookie_id",
        -: 5031:#endif
        -: 5032:        NULL
        -: 5033:    };
        -: 5034:
      381: 5035:    if (!sanitycheck()) {
    #####: 5036:        free(meta);
    #####: 5037:        return EX_OSERR;
        -: 5038:    }
        -: 5039:
        -: 5040:    /* handle SIGINT, SIGTERM */
      381: 5041:    signal(SIGINT, sig_handler);
      381: 5042:    signal(SIGTERM, sig_handler);
      381: 5043:    signal(SIGHUP, sighup_handler);
      381: 5044:    signal(SIGUSR1, sig_usrhandler);
        -: 5045:
        -: 5046:    /* init settings */
      381: 5047:    settings_init();
      381: 5048:    verify_default("hash_algorithm", hash_type == MURMUR3_HASH);
        -: 5049:#ifdef EXTSTORE
      381: 5050:    void *storage = NULL;
      381: 5051:    void *storage_cf = storage_init_config(&settings);
      381: 5052:    bool storage_enabled = false;
      381: 5053:    if (storage_cf == NULL) {
    #####: 5054:        fprintf(stderr, "failed to allocate extstore config\n");
    #####: 5055:        return 1;
        -: 5056:    }
        -: 5057:#endif
        -: 5058:
        -: 5059:    /* Run regardless of initializing it later */
      381: 5060:    init_lru_maintainer();
        -: 5061:
        -: 5062:    /* set stderr non-buffering (for running under, say, daemontools) */
      381: 5063:    setbuf(stderr, NULL);
        -: 5064:
      381: 5065:    char *shortopts =
        -: 5066:          "a:"  /* access mask for unix socket */
        -: 5067:          "A"   /* enable admin shutdown command */
        -: 5068:          "Z"   /* enable SSL */
        -: 5069:          "p:"  /* TCP port number to listen on */
        -: 5070:          "s:"  /* unix socket path to listen on */
        -: 5071:          "U:"  /* UDP port number to listen on */
        -: 5072:          "m:"  /* max memory to use for items in megabytes */
        -: 5073:          "M"   /* return error on memory exhausted */
        -: 5074:          "c:"  /* max simultaneous connections */
        -: 5075:          "k"   /* lock down all paged memory */
        -: 5076:          "hiV" /* help, licence info, version */
        -: 5077:          "r"   /* maximize core file limit */
        -: 5078:          "v"   /* verbose */
        -: 5079:          "d"   /* daemon mode */
        -: 5080:          "l:"  /* interface to listen on */
        -: 5081:          "u:"  /* user identity to run as */
        -: 5082:          "P:"  /* save PID in file */
        -: 5083:          "f:"  /* factor? */
        -: 5084:          "n:"  /* minimum space allocated for key+value+flags */
        -: 5085:          "t:"  /* threads */
        -: 5086:          "D:"  /* prefix delimiter? */
        -: 5087:          "L"   /* Large memory pages */
        -: 5088:          "R:"  /* max requests per event */
        -: 5089:          "C"   /* Disable use of CAS */
        -: 5090:          "b:"  /* backlog queue limit */
        -: 5091:          "B:"  /* Binding protocol */
        -: 5092:          "I:"  /* Max item size */
        -: 5093:          "S"   /* Sasl ON */
        -: 5094:          "F"   /* Disable flush_all */
        -: 5095:          "X"   /* Disable dump commands */
        -: 5096:          "W"   /* Disable watch commands */
        -: 5097:          "Y:"   /* Enable token auth */
        -: 5098:          "e:"  /* mmap path for external item memory */
        -: 5099:          "o:"  /* Extended generic options */
        -: 5100:          "N:"  /* NAPI ID based thread selection */
        -: 5101:          ;
        -: 5102:
        -: 5103:    /* process arguments */
        -: 5104:#ifdef HAVE_GETOPT_LONG
      381: 5105:    const struct option longopts[] = {
        -: 5106:        {"unix-mask", required_argument, 0, 'a'},
        -: 5107:        {"enable-shutdown", no_argument, 0, 'A'},
        -: 5108:        {"enable-ssl", no_argument, 0, 'Z'},
        -: 5109:        {"port", required_argument, 0, 'p'},
        -: 5110:        {"unix-socket", required_argument, 0, 's'},
        -: 5111:        {"udp-port", required_argument, 0, 'U'},
        -: 5112:        {"memory-limit", required_argument, 0, 'm'},
        -: 5113:        {"disable-evictions", no_argument, 0, 'M'},
        -: 5114:        {"conn-limit", required_argument, 0, 'c'},
        -: 5115:        {"lock-memory", no_argument, 0, 'k'},
        -: 5116:        {"help", no_argument, 0, 'h'},
        -: 5117:        {"license", no_argument, 0, 'i'},
        -: 5118:        {"version", no_argument, 0, 'V'},
        -: 5119:        {"enable-coredumps", no_argument, 0, 'r'},
        -: 5120:        {"verbose", optional_argument, 0, 'v'},
        -: 5121:        {"daemon", no_argument, 0, 'd'},
        -: 5122:        {"listen", required_argument, 0, 'l'},
        -: 5123:        {"user", required_argument, 0, 'u'},
        -: 5124:        {"pidfile", required_argument, 0, 'P'},
        -: 5125:        {"slab-growth-factor", required_argument, 0, 'f'},
        -: 5126:        {"slab-min-size", required_argument, 0, 'n'},
        -: 5127:        {"threads", required_argument, 0, 't'},
        -: 5128:        {"enable-largepages", no_argument, 0, 'L'},
        -: 5129:        {"max-reqs-per-event", required_argument, 0, 'R'},
        -: 5130:        {"disable-cas", no_argument, 0, 'C'},
        -: 5131:        {"listen-backlog", required_argument, 0, 'b'},
        -: 5132:        {"protocol", required_argument, 0, 'B'},
        -: 5133:        {"max-item-size", required_argument, 0, 'I'},
        -: 5134:        {"enable-sasl", no_argument, 0, 'S'},
        -: 5135:        {"disable-flush-all", no_argument, 0, 'F'},
        -: 5136:        {"disable-dumping", no_argument, 0, 'X'},
        -: 5137:        {"disable-watch", no_argument, 0, 'W'},
        -: 5138:        {"auth-file", required_argument, 0, 'Y'},
        -: 5139:        {"memory-file", required_argument, 0, 'e'},
        -: 5140:        {"extended", required_argument, 0, 'o'},
        -: 5141:        {"napi-ids", required_argument, 0, 'N'},
        -: 5142:        {0, 0, 0, 0}
        -: 5143:    };
      381: 5144:    int optindex;
     1096: 5145:    while (-1 != (c = getopt_long(argc, argv, shortopts,
        -: 5146:                    longopts, &optindex))) {
        -: 5147:#else
        -: 5148:    while (-1 != (c = getopt(argc, argv, shortopts))) {
        -: 5149:#endif
      610: 5150:        switch (c) {
        5: 5151:        case 'A':
        -: 5152:            /* enables "shutdown" command */
        5: 5153:            settings.shutdown_command = true;
        5: 5154:            break;
    #####: 5155:        case 'Z':
        -: 5156:            /* enable secure communication*/
        -: 5157:#ifdef TLS
        -: 5158:            settings.ssl_enabled = true;
        -: 5159:#else
    #####: 5160:            fprintf(stderr, "This server is not built with TLS support.\n");
    #####: 5161:            exit(EX_USAGE);
        -: 5162:#endif
    #####: 5163:            break;
    #####: 5164:        case 'a':
        -: 5165:#ifndef DISABLE_UNIX_SOCKET
        -: 5166:            /* access for unix domain socket, as octal mask (like chmod)*/
    #####: 5167:            settings.access= strtol(optarg,NULL,8);
        -: 5168:#else
        -: 5169:            fprintf(stderr, "This server is not built with unix socket support.\n");
        -: 5170:            exit(EX_USAGE);
        -: 5171:#endif /* #ifndef DISABLE_UNIX_SOCKET */
    #####: 5172:            break;
       17: 5173:        case 'U':
       17: 5174:            settings.udpport = atoi(optarg);
       17: 5175:            udp_specified = true;
       17: 5176:            break;
        9: 5177:        case 'p':
        9: 5178:            settings.port = atoi(optarg);
        9: 5179:            tcp_specified = true;
        9: 5180:            break;
       96: 5181:        case 's':
        -: 5182:#ifndef DISABLE_UNIX_SOCKET
       96: 5183:            settings.socketpath = optarg;
        -: 5184:#else
        -: 5185:            fprintf(stderr, "This server is not built with unix socket support.\n");
        -: 5186:            exit(EX_USAGE);
        -: 5187:#endif /* #ifndef DISABLE_UNIX_SOCKET */
       96: 5188:            break;
       29: 5189:        case 'm':
       29: 5190:            settings.maxbytes = ((size_t)atoi(optarg)) * 1024 * 1024;
       29: 5191:            break;
        2: 5192:        case 'M':
        2: 5193:            settings.evict_to_free = 0;
        2: 5194:            break;
        2: 5195:        case 'c':
        2: 5196:            settings.maxconns = atoi(optarg);
        2: 5197:            if (settings.maxconns <= 0) {
        2: 5198:                fprintf(stderr, "Maximum connections must be greater than 0\n");
        2: 5199:                return 1;
        -: 5200:            }
        -: 5201:            break;
      271: 5202:        case 'h':
      271: 5203:            usage();
      271: 5204:            exit(EXIT_SUCCESS);
    #####: 5205:        case 'i':
    #####: 5206:            usage_license();
    #####: 5207:            exit(EXIT_SUCCESS);
        -: 5208:        case 'V':
    #####: 5209:            printf(PACKAGE " " VERSION "\n");
    #####: 5210:            exit(EXIT_SUCCESS);
        -: 5211:        case 'k':
        -: 5212:            lock_memory = true;
        -: 5213:            break;
        6: 5214:        case 'v':
        6: 5215:            settings.verbose++;
        6: 5216:            break;
        7: 5217:        case 'l':
        7: 5218:            if (settings.inter != NULL) {
    #####: 5219:                if (strstr(settings.inter, optarg) != NULL) {
        -: 5220:                    break;
        -: 5221:                }
    #####: 5222:                size_t len = strlen(settings.inter) + strlen(optarg) + 2;
    #####: 5223:                char *p = malloc(len);
    #####: 5224:                if (p == NULL) {
    #####: 5225:                    fprintf(stderr, "Failed to allocate memory\n");
    #####: 5226:                    return 1;
        -: 5227:                }
    #####: 5228:                snprintf(p, len, "%s,%s", settings.inter, optarg);
    #####: 5229:                free(settings.inter);
    #####: 5230:                settings.inter = p;
        -: 5231:            } else {
        7: 5232:                settings.inter= strdup(optarg);
        -: 5233:            }
        -: 5234:            break;
    #####: 5235:        case 'd':
    #####: 5236:            do_daemonize = true;
    #####: 5237:            break;
    #####: 5238:        case 'r':
    #####: 5239:            maxcore = 1;
    #####: 5240:            break;
        2: 5241:        case 'R':
        2: 5242:            settings.reqs_per_event = atoi(optarg);
        2: 5243:            if (settings.reqs_per_event == 0) {
    #####: 5244:                fprintf(stderr, "Number of requests per event must be greater than 0\n");
    #####: 5245:                return 1;
        -: 5246:            }
        -: 5247:            break;
    #####: 5248:        case 'u':
    #####: 5249:            username = optarg;
    #####: 5250:            break;
    #####: 5251:        case 'P':
    #####: 5252:            pid_file = optarg;
    #####: 5253:            break;
        2: 5254:        case 'e':
        2: 5255:            settings.memory_file = optarg;
        2: 5256:            break;
    #####: 5257:        case 'f':
    #####: 5258:            settings.factor = atof(optarg);
    #####: 5259:            if (settings.factor <= 1.0) {
    #####: 5260:                fprintf(stderr, "Factor must be greater than 1\n");
    #####: 5261:                return 1;
        -: 5262:            }
    #####: 5263:            meta->slab_config = strdup(optarg);
    #####: 5264:            break;
    #####: 5265:        case 'n':
    #####: 5266:            settings.chunk_size = atoi(optarg);
    #####: 5267:            if (settings.chunk_size == 0) {
    #####: 5268:                fprintf(stderr, "Chunk size must be greater than 0\n");
    #####: 5269:                return 1;
        -: 5270:            }
        -: 5271:            break;
        2: 5272:        case 't':
        2: 5273:            settings.num_threads = atoi(optarg);
        2: 5274:            if (settings.num_threads <= 0) {
        1: 5275:                fprintf(stderr, "Number of threads must be greater than 0\n");
        1: 5276:                return 1;
        -: 5277:            }
        -: 5278:            /* There're other problems when you get above 64 threads.
        -: 5279:             * In the future we should portably detect # of cores for the
        -: 5280:             * default.
        -: 5281:             */
        1: 5282:            if (settings.num_threads > 64) {
     715*: 5283:                fprintf(stderr, "WARNING: Setting a high number of worker"
        -: 5284:                                "threads is not recommended.\n"
        -: 5285:                                " Set this value to the number of cores in"
        -: 5286:                                " your machine or less.\n");
        -: 5287:            }
        -: 5288:            break;
    #####: 5289:        case 'D':
    #####: 5290:            if (! optarg || ! optarg[0]) {
    #####: 5291:                fprintf(stderr, "No delimiter specified\n");
    #####: 5292:                return 1;
        -: 5293:            }
    #####: 5294:            settings.prefix_delimiter = optarg[0];
    #####: 5295:            settings.detail_enabled = 1;
    #####: 5296:            break;
    #####: 5297:        case 'L' :
    #####: 5298:            if (enable_large_pages() == 0) {
        -: 5299:                preallocate = true;
        -: 5300:            } else {
    #####: 5301:                fprintf(stderr, "Cannot enable large pages on this system\n"
        -: 5302:                    "(There is no support as of this version)\n");
    #####: 5303:                return 1;
        -: 5304:            }
        -: 5305:            break;
        2: 5306:        case 'C' :
        2: 5307:            settings.use_cas = false;
        2: 5308:            break;
        1: 5309:        case 'b' :
        1: 5310:            settings.backlog = atoi(optarg);
        1: 5311:            break;
        8: 5312:        case 'B':
        8: 5313:            protocol_specified = true;
        8: 5314:            if (strcmp(optarg, "auto") == 0) {
        2: 5315:                settings.binding_protocol = negotiating_prot;
        6: 5316:            } else if (strcmp(optarg, "binary") == 0) {
        3: 5317:                settings.binding_protocol = binary_prot;
        3: 5318:            } else if (strcmp(optarg, "ascii") == 0) {
        2: 5319:                settings.binding_protocol = ascii_prot;
        -: 5320:            } else {
        1: 5321:                fprintf(stderr, "Invalid value for binding protocol: %s\n"
        -: 5322:                        " -- should be one of auto, binary, or ascii\n", optarg);
        1: 5323:                exit(EX_USAGE);
        -: 5324:            }
        -: 5325:            break;
       10: 5326:        case 'I':
       10: 5327:            buf = strdup(optarg);
       10: 5328:            unit = buf[strlen(buf)-1];
       10: 5329:            if (unit == 'k' || unit == 'm' ||
        4: 5330:                unit == 'K' || unit == 'M') {
        6: 5331:                buf[strlen(buf)-1] = '\0';
        6: 5332:                size_max = atoi(buf);
        6: 5333:                if (unit == 'k' || unit == 'K')
        1: 5334:                    size_max *= 1024;
        6: 5335:                if (unit == 'm' || unit == 'M')
        5: 5336:                    size_max *= 1024 * 1024;
        6: 5337:                settings.item_size_max = size_max;
        -: 5338:            } else {
        4: 5339:                settings.item_size_max = atoi(buf);
        -: 5340:            }
       10: 5341:            free(buf);
       10: 5342:            break;
        1: 5343:        case 'S': /* set Sasl authentication to true. Default is false */
        -: 5344:#ifndef ENABLE_SASL
        1: 5345:            fprintf(stderr, "This server is not built with SASL support.\n");
        1: 5346:            exit(EX_USAGE);
        -: 5347:#endif
        -: 5348:            settings.sasl = true;
        -: 5349:            break;
        1: 5350:       case 'F' :
        1: 5351:            settings.flush_enabled = false;
        1: 5352:            break;
    #####: 5353:       case 'X' :
    #####: 5354:            settings.dump_enabled = false;
    #####: 5355:            break;
        1: 5356:       case 'W' :
        1: 5357:            settings.watch_enabled = false;
        1: 5358:            break;
        1: 5359:       case 'Y' :
        -: 5360:            // dupe the file path now just in case the options get mangled.
        1: 5361:            settings.auth_file = strdup(optarg);
        1: 5362:            break;
    #####: 5363:       case 'N':
    #####: 5364:            settings.num_napi_ids = atoi(optarg);
    #####: 5365:            if (settings.num_napi_ids <= 0) {
    #####: 5366:                fprintf(stderr, "Maximum number of NAPI IDs must be greater than 0\n");
    #####: 5367:                return 1;
        -: 5368:            }
        -: 5369:            break;
      135: 5370:        case 'o': /* It's sub-opts time! */
      135: 5371:            subopts_orig = subopts = strdup(optarg); /* getsubopt() changes the original args */
        -: 5372:
      363: 5373:            while (*subopts != '\0') {
        -: 5374:            // BSD getsubopt (at least) has undefined behavior on -1, so
        -: 5375:            // if we want to retry the getsubopt call in submodules we
        -: 5376:            // need an extra layer of string copies.
      228: 5377:            char *subopts_temp_o = NULL;
      228: 5378:            char *subopts_temp = subopts_temp_o = strdup(subopts);
        -: 5379:
      228: 5380:            switch (getsubopt(&subopts, subopts_tokens, &subopts_value)) {
    #####: 5381:            case MAXCONNS_FAST:
    #####: 5382:                settings.maxconns_fast = true;
    #####: 5383:                break;
    #####: 5384:            case HASHPOWER_INIT:
    #####: 5385:                if (subopts_value == NULL) {
    #####: 5386:                    fprintf(stderr, "Missing numeric argument for hashpower\n");
    #####: 5387:                    return 1;
        -: 5388:                }
    #####: 5389:                settings.hashpower_init = atoi(subopts_value);
    #####: 5390:                if (settings.hashpower_init < 12) {
    #####: 5391:                    fprintf(stderr, "Initial hashtable multiplier of %d is too low\n",
        -: 5392:                        settings.hashpower_init);
    #####: 5393:                    return 1;
    #####: 5394:                } else if (settings.hashpower_init > 32) {
    #####: 5395:                    fprintf(stderr, "Initial hashtable multiplier of %d is too high\n"
        -: 5396:                        "Choose a value based on \"STAT hash_power_level\" from a running instance\n",
        -: 5397:                        settings.hashpower_init);
    #####: 5398:                    return 1;
        -: 5399:                }
        -: 5400:                break;
    #####: 5401:            case NO_HASHEXPAND:
    #####: 5402:                start_assoc_maint = false;
    #####: 5403:                break;
        3: 5404:            case SLAB_REASSIGN:
        3: 5405:                settings.slab_reassign = true;
        3: 5406:                break;
        9: 5407:            case SLAB_AUTOMOVE:
        9: 5408:                if (subopts_value == NULL) {
        2: 5409:                    settings.slab_automove = 1;
        2: 5410:                    break;
        -: 5411:                }
        7: 5412:                settings.slab_automove = atoi(subopts_value);
        7: 5413:                if (settings.slab_automove < 0 || settings.slab_automove > 2) {
    #####: 5414:                    fprintf(stderr, "slab_automove must be between 0 and 2\n");
    #####: 5415:                    return 1;
        -: 5416:                }
        -: 5417:                break;
    #####: 5418:            case SLAB_AUTOMOVE_RATIO:
    #####: 5419:                if (subopts_value == NULL) {
    #####: 5420:                    fprintf(stderr, "Missing slab_automove_ratio argument\n");
    #####: 5421:                    return 1;
        -: 5422:                }
    #####: 5423:                settings.slab_automove_ratio = atof(subopts_value);
    #####: 5424:                if (settings.slab_automove_ratio <= 0 || settings.slab_automove_ratio > 1) {
    #####: 5425:                    fprintf(stderr, "slab_automove_ratio must be > 0 and < 1\n");
    #####: 5426:                    return 1;
        -: 5427:                }
        -: 5428:                break;
        2: 5429:            case SLAB_AUTOMOVE_WINDOW:
        2: 5430:                if (subopts_value == NULL) {
    #####: 5431:                    fprintf(stderr, "Missing slab_automove_window argument\n");
    #####: 5432:                    return 1;
        -: 5433:                }
        2: 5434:                settings.slab_automove_window = atoi(subopts_value);
        2: 5435:                if (settings.slab_automove_window < 3) {
    #####: 5436:                    fprintf(stderr, "slab_automove_window must be > 2\n");
    #####: 5437:                    return 1;
        -: 5438:                }
        -: 5439:                break;
    #####: 5440:            case TAIL_REPAIR_TIME:
    #####: 5441:                if (subopts_value == NULL) {
    #####: 5442:                    fprintf(stderr, "Missing numeric argument for tail_repair_time\n");
    #####: 5443:                    return 1;
        -: 5444:                }
    #####: 5445:                settings.tail_repair_time = atoi(subopts_value);
    #####: 5446:                if (settings.tail_repair_time < 10) {
    #####: 5447:                    fprintf(stderr, "Cannot set tail_repair_time to less than 10 seconds\n");
    #####: 5448:                    return 1;
        -: 5449:                }
        -: 5450:                break;
    #####: 5451:            case HASH_ALGORITHM:
    #####: 5452:                if (subopts_value == NULL) {
    #####: 5453:                    fprintf(stderr, "Missing hash_algorithm argument\n");
    #####: 5454:                    return 1;
    #####: 5455:                };
    #####: 5456:                if (strcmp(subopts_value, "jenkins") == 0) {
        -: 5457:                    hash_type = JENKINS_HASH;
    #####: 5458:                } else if (strcmp(subopts_value, "murmur3") == 0) {
        -: 5459:                    hash_type = MURMUR3_HASH;
    #####: 5460:                } else if (strcmp(subopts_value, "xxh3") == 0) {
        -: 5461:                    hash_type = XXH3_HASH;
        -: 5462:                } else {
    #####: 5463:                    fprintf(stderr, "Unknown hash_algorithm option (jenkins, murmur3, xxh3)\n");
    #####: 5464:                    return 1;
        -: 5465:                }
        -: 5466:                break;
        6: 5467:            case LRU_CRAWLER:
        6: 5468:                start_lru_crawler = true;
        6: 5469:                break;
    #####: 5470:            case LRU_CRAWLER_SLEEP:
    #####: 5471:                if (subopts_value == NULL) {
    #####: 5472:                    fprintf(stderr, "Missing lru_crawler_sleep value\n");
    #####: 5473:                    return 1;
        -: 5474:                }
    #####: 5475:                settings.lru_crawler_sleep = atoi(subopts_value);
    #####: 5476:                if (settings.lru_crawler_sleep > 1000000 || settings.lru_crawler_sleep < 0) {
    #####: 5477:                    fprintf(stderr, "LRU crawler sleep must be between 0 and 1 second\n");
    #####: 5478:                    return 1;
        -: 5479:                }
        -: 5480:                break;
    #####: 5481:            case LRU_CRAWLER_TOCRAWL:
    #####: 5482:                if (subopts_value == NULL) {
    #####: 5483:                    fprintf(stderr, "Missing lru_crawler_tocrawl value\n");
    #####: 5484:                    return 1;
        -: 5485:                }
    #####: 5486:                if (!safe_strtoul(subopts_value, &tocrawl)) {
    #####: 5487:                    fprintf(stderr, "lru_crawler_tocrawl takes a numeric 32bit value\n");
    #####: 5488:                    return 1;
        -: 5489:                }
    #####: 5490:                settings.lru_crawler_tocrawl = tocrawl;
    #####: 5491:                break;
        5: 5492:            case LRU_MAINTAINER:
        5: 5493:                start_lru_maintainer = true;
        5: 5494:                settings.lru_segmented = true;
        5: 5495:                break;
    #####: 5496:            case HOT_LRU_PCT:
    #####: 5497:                if (subopts_value == NULL) {
    #####: 5498:                    fprintf(stderr, "Missing hot_lru_pct argument\n");
    #####: 5499:                    return 1;
        -: 5500:                }
    #####: 5501:                settings.hot_lru_pct = atoi(subopts_value);
    #####: 5502:                if (settings.hot_lru_pct < 1 || settings.hot_lru_pct >= 80) {
    #####: 5503:                    fprintf(stderr, "hot_lru_pct must be > 1 and < 80\n");
    #####: 5504:                    return 1;
        -: 5505:                }
        -: 5506:                break;
    #####: 5507:            case WARM_LRU_PCT:
    #####: 5508:                if (subopts_value == NULL) {
    #####: 5509:                    fprintf(stderr, "Missing warm_lru_pct argument\n");
    #####: 5510:                    return 1;
        -: 5511:                }
    #####: 5512:                settings.warm_lru_pct = atoi(subopts_value);
    #####: 5513:                if (settings.warm_lru_pct < 1 || settings.warm_lru_pct >= 80) {
    #####: 5514:                    fprintf(stderr, "warm_lru_pct must be > 1 and < 80\n");
    #####: 5515:                    return 1;
        -: 5516:                }
        -: 5517:                break;
    #####: 5518:            case HOT_MAX_FACTOR:
    #####: 5519:                if (subopts_value == NULL) {
    #####: 5520:                    fprintf(stderr, "Missing hot_max_factor argument\n");
    #####: 5521:                    return 1;
        -: 5522:                }
    #####: 5523:                settings.hot_max_factor = atof(subopts_value);
    #####: 5524:                if (settings.hot_max_factor <= 0) {
    #####: 5525:                    fprintf(stderr, "hot_max_factor must be > 0\n");
    #####: 5526:                    return 1;
        -: 5527:                }
        -: 5528:                break;
    #####: 5529:            case WARM_MAX_FACTOR:
    #####: 5530:                if (subopts_value == NULL) {
    #####: 5531:                    fprintf(stderr, "Missing warm_max_factor argument\n");
    #####: 5532:                    return 1;
        -: 5533:                }
    #####: 5534:                settings.warm_max_factor = atof(subopts_value);
    #####: 5535:                if (settings.warm_max_factor <= 0) {
    #####: 5536:                    fprintf(stderr, "warm_max_factor must be > 0\n");
    #####: 5537:                    return 1;
        -: 5538:                }
        -: 5539:                break;
        1: 5540:            case TEMPORARY_TTL:
        1: 5541:                if (subopts_value == NULL) {
    #####: 5542:                    fprintf(stderr, "Missing temporary_ttl argument\n");
    #####: 5543:                    return 1;
        -: 5544:                }
        1: 5545:                settings.temp_lru = true;
        1: 5546:                settings.temporary_ttl = atoi(subopts_value);
        1: 5547:                break;
        1: 5548:            case IDLE_TIMEOUT:
        1: 5549:                if (subopts_value == NULL) {
    #####: 5550:                    fprintf(stderr, "Missing numeric argument for idle_timeout\n");
    #####: 5551:                    return 1;
        -: 5552:                }
        1: 5553:                settings.idle_timeout = atoi(subopts_value);
        1: 5554:                break;
        4: 5555:            case WATCHER_LOGBUF_SIZE:
        4: 5556:                if (subopts_value == NULL) {
    #####: 5557:                    fprintf(stderr, "Missing watcher_logbuf_size argument\n");
    #####: 5558:                    return 1;
        -: 5559:                }
        4: 5560:                if (!safe_strtoul(subopts_value, &settings.logger_watcher_buf_size)) {
    #####: 5561:                    fprintf(stderr, "could not parse argument to watcher_logbuf_size\n");
    #####: 5562:                    return 1;
        -: 5563:                }
        4: 5564:                settings.logger_watcher_buf_size *= 1024; /* kilobytes */
        4: 5565:                break;
    #####: 5566:            case WORKER_LOGBUF_SIZE:
    #####: 5567:                if (subopts_value == NULL) {
    #####: 5568:                    fprintf(stderr, "Missing worker_logbuf_size argument\n");
    #####: 5569:                    return 1;
        -: 5570:                }
    #####: 5571:                if (!safe_strtoul(subopts_value, &settings.logger_buf_size)) {
    #####: 5572:                    fprintf(stderr, "could not parse argument to worker_logbuf_size\n");
    #####: 5573:                    return 1;
        -: 5574:                }
    #####: 5575:                settings.logger_buf_size *= 1024; /* kilobytes */
    #####: 5576:            case SLAB_SIZES:
    #####: 5577:                slab_sizes_unparsed = strdup(subopts_value);
    #####: 5578:                break;
        7: 5579:            case SLAB_CHUNK_MAX:
        7: 5580:                if (subopts_value == NULL) {
    #####: 5581:                    fprintf(stderr, "Missing slab_chunk_max argument\n");
        -: 5582:                }
        7: 5583:                if (!safe_strtol(subopts_value, &settings.slab_chunk_size_max)) {
    #####: 5584:                    fprintf(stderr, "could not parse argument to slab_chunk_max\n");
        -: 5585:                }
        -: 5586:                slab_chunk_size_changed = true;
        -: 5587:                break;
    #####: 5588:            case TRACK_SIZES:
    #####: 5589:                item_stats_sizes_init();
    #####: 5590:                break;
        -: 5591:            case NO_INLINE_ASCII_RESP:
        -: 5592:                break;
        -: 5593:            case INLINE_ASCII_RESP:
        -: 5594:                break;
    #####: 5595:            case NO_CHUNKED_ITEMS:
    #####: 5596:                settings.slab_chunk_size_max = settings.slab_page_size;
    #####: 5597:                break;
    #####: 5598:            case NO_SLAB_REASSIGN:
    #####: 5599:                settings.slab_reassign = false;
    #####: 5600:                break;
    #####: 5601:            case NO_SLAB_AUTOMOVE:
    #####: 5602:                settings.slab_automove = 0;
    #####: 5603:                break;
    #####: 5604:            case NO_MAXCONNS_FAST:
    #####: 5605:                settings.maxconns_fast = false;
    #####: 5606:                break;
        3: 5607:            case NO_LRU_CRAWLER:
        3: 5608:                settings.lru_crawler = false;
        3: 5609:                start_lru_crawler = false;
        3: 5610:                break;
        1: 5611:            case NO_LRU_MAINTAINER:
        1: 5612:                start_lru_maintainer = false;
        1: 5613:                settings.lru_segmented = false;
        1: 5614:                break;
    #####: 5615:            case META_RESPONSE_OLD:
    #####: 5616:                settings.meta_response_old = true;
    #####: 5617:                break;
        -: 5618:#ifdef TLS
        -: 5619:            case SSL_CERT:
        -: 5620:                if (subopts_value == NULL) {
        -: 5621:                    fprintf(stderr, "Missing ssl_chain_cert argument\n");
        -: 5622:                    return 1;
        -: 5623:                }
        -: 5624:                settings.ssl_chain_cert = strdup(subopts_value);
        -: 5625:                break;
        -: 5626:            case SSL_KEY:
        -: 5627:                if (subopts_value == NULL) {
        -: 5628:                    fprintf(stderr, "Missing ssl_key argument\n");
        -: 5629:                    return 1;
        -: 5630:                }
        -: 5631:                settings.ssl_key = strdup(subopts_value);
        -: 5632:                break;
        -: 5633:            case SSL_VERIFY_MODE:
        -: 5634:            {
        -: 5635:                if (subopts_value == NULL) {
        -: 5636:                    fprintf(stderr, "Missing ssl_verify_mode argument\n");
        -: 5637:                    return 1;
        -: 5638:                }
        -: 5639:                int verify  = 0;
        -: 5640:                if (!safe_strtol(subopts_value, &verify)) {
        -: 5641:                    fprintf(stderr, "could not parse argument to ssl_verify_mode\n");
        -: 5642:                    return 1;
        -: 5643:                }
        -: 5644:                switch(verify) {
        -: 5645:                    case 0:
        -: 5646:                        settings.ssl_verify_mode = SSL_VERIFY_NONE;
        -: 5647:                        break;
        -: 5648:                    case 1:
        -: 5649:                        settings.ssl_verify_mode = SSL_VERIFY_PEER;
        -: 5650:                        break;
        -: 5651:                    case 2:
        -: 5652:                        settings.ssl_verify_mode = SSL_VERIFY_PEER |
        -: 5653:                                                    SSL_VERIFY_FAIL_IF_NO_PEER_CERT;
        -: 5654:                        break;
        -: 5655:                    case 3:
        -: 5656:                        settings.ssl_verify_mode = SSL_VERIFY_PEER |
        -: 5657:                                                    SSL_VERIFY_FAIL_IF_NO_PEER_CERT |
        -: 5658:                                                    SSL_VERIFY_CLIENT_ONCE;
        -: 5659:                        break;
        -: 5660:                    default:
        -: 5661:                        fprintf(stderr, "Invalid ssl_verify_mode. Use help to see valid options.\n");
        -: 5662:                        return 1;
        -: 5663:                }
        -: 5664:                break;
        -: 5665:            }
        -: 5666:            case SSL_KEYFORM:
        -: 5667:                if (subopts_value == NULL) {
        -: 5668:                    fprintf(stderr, "Missing ssl_keyformat argument\n");
        -: 5669:                    return 1;
        -: 5670:                }
        -: 5671:                if (!safe_strtol(subopts_value, &settings.ssl_keyformat)) {
        -: 5672:                    fprintf(stderr, "could not parse argument to ssl_keyformat\n");
        -: 5673:                    return 1;
        -: 5674:                }
        -: 5675:                break;
        -: 5676:            case SSL_CIPHERS:
        -: 5677:                if (subopts_value == NULL) {
        -: 5678:                    fprintf(stderr, "Missing ssl_ciphers argument\n");
        -: 5679:                    return 1;
        -: 5680:                }
        -: 5681:                settings.ssl_ciphers = strdup(subopts_value);
        -: 5682:                break;
        -: 5683:            case SSL_CA_CERT:
        -: 5684:                if (subopts_value == NULL) {
        -: 5685:                    fprintf(stderr, "Missing ssl_ca_cert argument\n");
        -: 5686:                    return 1;
        -: 5687:                }
        -: 5688:                settings.ssl_ca_cert = strdup(subopts_value);
        -: 5689:                break;
        -: 5690:            case SSL_WBUF_SIZE:
        -: 5691:                if (subopts_value == NULL) {
        -: 5692:                    fprintf(stderr, "Missing ssl_wbuf_size argument\n");
        -: 5693:                    return 1;
        -: 5694:                }
        -: 5695:                if (!safe_strtoul(subopts_value, &settings.ssl_wbuf_size)) {
        -: 5696:                    fprintf(stderr, "could not parse argument to ssl_wbuf_size\n");
        -: 5697:                    return 1;
        -: 5698:                }
        -: 5699:                settings.ssl_wbuf_size *= 1024; /* kilobytes */
        -: 5700:                break;
        -: 5701:            case SSL_SESSION_CACHE:
        -: 5702:                settings.ssl_session_cache = true;
        -: 5703:                break;
        -: 5704:            case SSL_KERNEL_TLS:
        -: 5705:                settings.ssl_kernel_tls = true;
        -: 5706:                break;
        -: 5707:            case SSL_MIN_VERSION: {
        -: 5708:                int min_version;
        -: 5709:                if (subopts_value == NULL) {
        -: 5710:                    fprintf(stderr, "Missing ssl_min_version argument\n");
        -: 5711:                    return 1;
        -: 5712:                }
        -: 5713:                if (!safe_strtol(subopts_value, &min_version)) {
        -: 5714:                    fprintf(stderr, "could not parse argument to ssl_min_version\n");
        -: 5715:                    return 1;
        -: 5716:                }
        -: 5717:                switch (min_version) {
        -: 5718:                    case 0:
        -: 5719:                        settings.ssl_min_version = TLS1_VERSION;
        -: 5720:                        break;
        -: 5721:                    case 1:
        -: 5722:                        settings.ssl_min_version = TLS1_1_VERSION;
        -: 5723:                        break;
        -: 5724:                    case 2:
        -: 5725:                        settings.ssl_min_version = TLS1_2_VERSION;
        -: 5726:                        break;
        -: 5727:#if defined(TLS1_3_VERSION)
        -: 5728:                    case 3:
        -: 5729:                        settings.ssl_min_version = TLS1_3_VERSION;
        -: 5730:                        break;
        -: 5731:#endif
        -: 5732:                    default:
        -: 5733:                        fprintf(stderr, "Invalid ssl_min_version. Use help to see valid options.\n");
        -: 5734:                        return 1;
        -: 5735:                }
        -: 5736:                break;
        -: 5737:            }
        -: 5738:#endif
        -: 5739:            case MODERN:
        -: 5740:                /* currently no new defaults */
        -: 5741:                break;
        7: 5742:            case NO_MODERN:
        7: 5743:                if (!slab_chunk_size_changed) {
        7: 5744:                    settings.slab_chunk_size_max = settings.slab_page_size;
        -: 5745:                }
        7: 5746:                settings.slab_reassign = false;
        7: 5747:                settings.slab_automove = 0;
        7: 5748:                settings.maxconns_fast = false;
        7: 5749:                settings.lru_segmented = false;
        7: 5750:                hash_type = JENKINS_HASH;
        7: 5751:                start_lru_crawler = false;
        7: 5752:                start_lru_maintainer = false;
        7: 5753:                break;
    #####: 5754:            case NO_DROP_PRIVILEGES:
    #####: 5755:                settings.drop_privileges = false;
    #####: 5756:                break;
    #####: 5757:            case DROP_PRIVILEGES:
    #####: 5758:                settings.drop_privileges = true;
    #####: 5759:                break;
    #####: 5760:            case RESP_OBJ_MEM_LIMIT:
        -: 5761:                // TODO: Remove at some point in the future.
    #####: 5762:                fprintf(stderr, "DEPRECATED: resp_obj_mem_limit no longer used. See read_buf_mem_limit,\n");
        -: 5763:                break;
        1: 5764:            case READ_BUF_MEM_LIMIT:
        1: 5765:                if (subopts_value == NULL) {
    #####: 5766:                    fprintf(stderr, "Missing read_buf_mem_limit argument\n");
    #####: 5767:                    return 1;
        -: 5768:                }
        1: 5769:                if (!safe_strtoul(subopts_value, &settings.read_buf_mem_limit)) {
    #####: 5770:                    fprintf(stderr, "could not parse argument to read_buf_mem_limit\n");
    #####: 5771:                    return 1;
        -: 5772:                }
        1: 5773:                settings.read_buf_mem_limit *= 1024 * 1024; /* megabytes */
        1: 5774:                break;
        -: 5775:#ifdef PROXY
        -: 5776:            case PROXY_CONFIG:
        -: 5777:                if (subopts_value == NULL) {
        -: 5778:                    fprintf(stderr, "Missing proxy_config file argument\n");
        -: 5779:                    return 1;
        -: 5780:                }
        -: 5781:                if (protocol_specified) {
        -: 5782:                    fprintf(stderr, "Cannot specify a protocol with proxy mode enabled\n");
        -: 5783:                    return 1;
        -: 5784:                }
        -: 5785:                settings.proxy_startfile = strdup(subopts_value);
        -: 5786:                settings.proxy_enabled = true;
        -: 5787:                settings.binding_protocol = proxy_prot;
        -: 5788:                protocol_specified = true;
        -: 5789:                break;
        -: 5790:            case PROXY_URING:
        -: 5791:                settings.proxy_uring = true;
        -: 5792:                break;
        -: 5793:#endif
        -: 5794:#ifdef MEMCACHED_DEBUG
      103: 5795:            case RELAXED_PRIVILEGES:
      103: 5796:                settings.relaxed_privileges = true;
      103: 5797:                break;
        -: 5798:#endif
        -: 5799:#ifdef SOCK_COOKIE_ID
    #####: 5800:            case COOKIE_ID:
    #####: 5801:                (void)safe_strtoul(subopts_value, &settings.sock_cookie_id);
    #####: 5802:                break;
        -: 5803:#endif
       74: 5804:            default:
        -: 5805:#ifdef EXTSTORE
        -: 5806:                // TODO: differentiating response code.
       74: 5807:                if (storage_read_config(storage_cf, &subopts_temp)) {
        -: 5808:                    return 1;
        -: 5809:                }
        -: 5810:#else
        -: 5811:                printf("Illegal suboption \"%s\"\n", subopts_temp);
        -: 5812:                return 1;
        -: 5813:#endif
        -: 5814:            } // switch
      228: 5815:            if (subopts_temp_o) {
      228: 5816:                free(subopts_temp_o);
        -: 5817:            }
        -: 5818:
        -: 5819:            } // while
      135: 5820:            free(subopts_orig);
      135: 5821:            break;
    #####: 5822:        default:
    #####: 5823:            fprintf(stderr, "Illegal argument \"%c\"\n", c);
    #####: 5824:            return 1;
        -: 5825:        }
        -: 5826:    }
        -: 5827:
      105: 5828:    if (settings.num_napi_ids > settings.num_threads) {
    #####: 5829:        fprintf(stderr, "Number of napi_ids(%d) cannot be greater than number of threads(%d)\n",
        -: 5830:                settings.num_napi_ids, settings.num_threads);
    #####: 5831:        exit(EX_USAGE);
        -: 5832:    }
        -: 5833:
      105: 5834:    if (settings.item_size_max < ITEM_SIZE_MAX_LOWER_LIMIT) {
        1: 5835:        fprintf(stderr, "Item max size cannot be less than 1024 bytes.\n");
        1: 5836:        exit(EX_USAGE);
        -: 5837:    }
      104: 5838:    if (settings.item_size_max > (settings.maxbytes / 2)) {
        1: 5839:        fprintf(stderr, "Cannot set item size limit higher than 1/2 of memory max.\n");
        1: 5840:        exit(EX_USAGE);
        -: 5841:    }
      103: 5842:    if (settings.item_size_max > (ITEM_SIZE_MAX_UPPER_LIMIT)) {
    #####: 5843:        fprintf(stderr, "Cannot set item size limit higher than a gigabyte.\n");
    #####: 5844:        exit(EX_USAGE);
        -: 5845:    }
      103: 5846:    if (settings.item_size_max > 1024 * 1024) {
        5: 5847:        if (!slab_chunk_size_changed) {
        -: 5848:            // Ideal new default is 16k, but needs stitching.
        5: 5849:            settings.slab_chunk_size_max = settings.slab_page_size / 2;
        -: 5850:        }
        -: 5851:    }
        -: 5852:
      103: 5853:    if (settings.slab_chunk_size_max > settings.item_size_max) {
    #####: 5854:        fprintf(stderr, "slab_chunk_max (bytes: %d) cannot be larger than -I (item_size_max %d)\n",
        -: 5855:                settings.slab_chunk_size_max, settings.item_size_max);
    #####: 5856:        exit(EX_USAGE);
        -: 5857:    }
        -: 5858:
      103: 5859:    if (settings.item_size_max % settings.slab_chunk_size_max != 0) {
    #####: 5860:        fprintf(stderr, "-I (item_size_max: %d) must be evenly divisible by slab_chunk_max (bytes: %d)\n",
        -: 5861:                settings.item_size_max, settings.slab_chunk_size_max);
    #####: 5862:        exit(EX_USAGE);
        -: 5863:    }
        -: 5864:
      103: 5865:    if (settings.slab_page_size % settings.slab_chunk_size_max != 0) {
    #####: 5866:        fprintf(stderr, "slab_chunk_max (bytes: %d) must divide evenly into %d (slab_page_size)\n",
        -: 5867:                settings.slab_chunk_size_max, settings.slab_page_size);
    #####: 5868:        exit(EX_USAGE);
        -: 5869:    }
        -: 5870:#ifdef EXTSTORE
      103: 5871:    switch (storage_check_config(storage_cf)) {
        8: 5872:        case 0:
        8: 5873:            storage_enabled = true;
        8: 5874:            break;
    #####: 5875:        case 1:
    #####: 5876:            exit(EX_USAGE);
      103: 5877:            break;
        -: 5878:    }
        -: 5879:#endif
        -: 5880:    // Reserve this for the new default. If factor size hasn't changed, use
        -: 5881:    // new default.
        -: 5882:    /*if (settings.slab_chunk_size_max == 16384 && settings.factor == 1.25) {
        -: 5883:        settings.factor = 1.08;
        -: 5884:    }*/
        -: 5885:
      103: 5886:    if (slab_sizes_unparsed != NULL) {
        -: 5887:        // want the unedited string for restart code.
    #####: 5888:        char *temp = strdup(slab_sizes_unparsed);
    #####: 5889:        if (_parse_slab_sizes(slab_sizes_unparsed, slab_sizes)) {
    #####: 5890:            use_slab_sizes = true;
    #####: 5891:            if (meta->slab_config) {
    #####: 5892:                free(meta->slab_config);
        -: 5893:            }
    #####: 5894:            meta->slab_config = temp;
        -: 5895:        } else {
    #####: 5896:            exit(EX_USAGE);
        -: 5897:        }
      103: 5898:    } else if (!meta->slab_config) {
        -: 5899:        // using the default factor.
      103: 5900:        meta->slab_config = "1.25";
        -: 5901:    }
        -: 5902:
      103: 5903:    if (settings.hot_lru_pct + settings.warm_lru_pct > 80) {
    #####: 5904:        fprintf(stderr, "hot_lru_pct + warm_lru_pct cannot be more than 80%% combined\n");
    #####: 5905:        exit(EX_USAGE);
        -: 5906:    }
        -: 5907:
      103: 5908:    if (settings.temp_lru && !start_lru_maintainer) {
    #####: 5909:        fprintf(stderr, "temporary_ttl requires lru_maintainer to be enabled\n");
    #####: 5910:        exit(EX_USAGE);
        -: 5911:    }
        -: 5912:
      103: 5913:    if (hash_init(hash_type) != 0) {
    #####: 5914:        fprintf(stderr, "Failed to initialize hash_algorithm!\n");
    #####: 5915:        exit(EX_USAGE);
        -: 5916:    }
        -: 5917:
        -: 5918:    /*
        -: 5919:     * Use one workerthread to serve each UDP port if the user specified
        -: 5920:     * multiple ports
        -: 5921:     */
      103: 5922:    if (settings.inter != NULL && strchr(settings.inter, ',')) {
    #####: 5923:        settings.num_threads_per_udp = 1;
        -: 5924:    } else {
      103: 5925:        settings.num_threads_per_udp = settings.num_threads;
        -: 5926:    }
        -: 5927:
      103: 5928:    if (settings.sasl) {
    #####: 5929:        if (!protocol_specified) {
    #####: 5930:            settings.binding_protocol = binary_prot;
        -: 5931:        } else {
    #####: 5932:            if (settings.binding_protocol != binary_prot) {
    #####: 5933:                fprintf(stderr, "ERROR: You cannot allow the ASCII protocol while using SASL.\n");
    #####: 5934:                exit(EX_USAGE);
        -: 5935:            }
        -: 5936:        }
        -: 5937:
    #####: 5938:        if (settings.udpport) {
    #####: 5939:            fprintf(stderr, "ERROR: Cannot enable UDP while using binary SASL authentication.\n");
    #####: 5940:            exit(EX_USAGE);
        -: 5941:        }
        -: 5942:    }
        -: 5943:
      103: 5944:    if (settings.auth_file) {
        1: 5945:        if (!protocol_specified) {
        1: 5946:            settings.binding_protocol = ascii_prot;
        -: 5947:        } else {
    #####: 5948:            if (settings.binding_protocol != ascii_prot) {
    #####: 5949:                fprintf(stderr, "ERROR: You cannot allow the BINARY protocol while using ascii authentication tokens.\n");
    #####: 5950:                exit(EX_USAGE);
        -: 5951:            }
        -: 5952:        }
        -: 5953:    }
        -: 5954:
      103: 5955:    if (udp_specified && settings.udpport != 0 && !tcp_specified) {
    #####: 5956:        settings.port = settings.udpport;
        -: 5957:    }
        -: 5958:
      103: 5959:    if (settings.port > 65535) {
    #####: 5960:        fprintf(stderr, "ERROR: Invalid port number %d.\n", settings.port);
    #####: 5961:        exit(EX_USAGE);
        -: 5962:    }
        -: 5963:
        -: 5964:
        -: 5965:#ifdef TLS
        -: 5966:    /*
        -: 5967:     * Setup SSL if enabled
        -: 5968:     */
        -: 5969:    if (settings.ssl_enabled) {
        -: 5970:        if (!settings.port) {
        -: 5971:            fprintf(stderr, "ERROR: You cannot enable SSL without a TCP port.\n");
        -: 5972:            exit(EX_USAGE);
        -: 5973:        }
        -: 5974:        // openssl init methods.
        -: 5975:        SSL_load_error_strings();
        -: 5976:        SSLeay_add_ssl_algorithms();
        -: 5977:        // Initiate the SSL context.
        -: 5978:        ssl_init();
        -: 5979:    }
        -: 5980:#endif
        -: 5981:
      103: 5982:    if (maxcore != 0) {
    #####: 5983:        struct rlimit rlim_new;
        -: 5984:        /*
        -: 5985:         * First try raising to infinity; if that fails, try bringing
        -: 5986:         * the soft limit to the hard.
        -: 5987:         */
    #####: 5988:        if (getrlimit(RLIMIT_CORE, &rlim) == 0) {
    #####: 5989:            rlim_new.rlim_cur = rlim_new.rlim_max = RLIM_INFINITY;
    #####: 5990:            if (setrlimit(RLIMIT_CORE, &rlim_new)!= 0) {
        -: 5991:                /* failed. try raising just to the old max */
    #####: 5992:                rlim_new.rlim_cur = rlim_new.rlim_max = rlim.rlim_max;
    #####: 5993:                (void)setrlimit(RLIMIT_CORE, &rlim_new);
        -: 5994:            }
        -: 5995:        }
        -: 5996:        /*
        -: 5997:         * getrlimit again to see what we ended up with. Only fail if
        -: 5998:         * the soft limit ends up 0, because then no core files will be
        -: 5999:         * created at all.
        -: 6000:         */
        -: 6001:
    #####: 6002:        if ((getrlimit(RLIMIT_CORE, &rlim) != 0) || rlim.rlim_cur == 0) {
    #####: 6003:            fprintf(stderr, "failed to ensure corefile creation\n");
    #####: 6004:            exit(EX_OSERR);
        -: 6005:        }
        -: 6006:    }
        -: 6007:
        -: 6008:    /*
        -: 6009:     * If needed, increase rlimits to allow as many connections
        -: 6010:     * as needed.
        -: 6011:     */
        -: 6012:
      103: 6013:    if (getrlimit(RLIMIT_NOFILE, &rlim) != 0) {
    #####: 6014:        fprintf(stderr, "failed to getrlimit number of files\n");
    #####: 6015:        exit(EX_OSERR);
        -: 6016:    } else {
      103: 6017:        rlim.rlim_cur = settings.maxconns;
      103: 6018:        rlim.rlim_max = settings.maxconns;
      103: 6019:        if (setrlimit(RLIMIT_NOFILE, &rlim) != 0) {
        -: 6020:#ifndef MEMCACHED_DEBUG
        -: 6021:            fprintf(stderr, "failed to set rlimit for open files. Try starting as root or requesting smaller maxconns value.\n");
        -: 6022:            exit(EX_OSERR);
        -: 6023:#endif
      103: 6024:        }
        -: 6025:    }
        -: 6026:
        -: 6027:    /* lose root privileges if we have them */
      103: 6028:    if (getuid() == 0 || geteuid() == 0) {
    #####: 6029:        if (username == 0 || *username == '\0') {
    #####: 6030:            fprintf(stderr, "can't run as root without the -u switch\n");
    #####: 6031:            exit(EX_USAGE);
        -: 6032:        }
    #####: 6033:        if ((pw = getpwnam(username)) == 0) {
    #####: 6034:            fprintf(stderr, "can't find the user %s to switch to\n", username);
    #####: 6035:            exit(EX_NOUSER);
        -: 6036:        }
    #####: 6037:        if (setgroups(0, NULL) < 0) {
        -: 6038:            /* setgroups may fail with EPERM, indicating we are already in a
        -: 6039:             * minimally-privileged state. In that case we continue. For all
        -: 6040:             * other failure codes we exit.
        -: 6041:             *
        -: 6042:             * Note that errno is stored here because fprintf may change it.
        -: 6043:             */
    #####: 6044:            bool should_exit = errno != EPERM;
    #####: 6045:            fprintf(stderr, "failed to drop supplementary groups: %s\n",
        -: 6046:                    strerror(errno));
    #####: 6047:            if (should_exit) {
    #####: 6048:                exit(EX_OSERR);
        -: 6049:            }
        -: 6050:        }
    #####: 6051:        if (setgid(pw->pw_gid) < 0 || setuid(pw->pw_uid) < 0) {
    #####: 6052:            fprintf(stderr, "failed to assume identity of user %s\n", username);
    #####: 6053:            exit(EX_OSERR);
        -: 6054:        }
        -: 6055:    }
        -: 6056:
        -: 6057:    /* Initialize Sasl if -S was specified */
      103: 6058:    if (settings.sasl) {
      103: 6059:        init_sasl();
        -: 6060:    }
        -: 6061:
        -: 6062:    /* daemonize if requested */
        -: 6063:    /* if we want to ensure our ability to dump core, don't chdir to / */
      103: 6064:    if (do_daemonize) {
    #####: 6065:        if (signal(SIGHUP, SIG_IGN) == SIG_ERR) {
    #####: 6066:            perror("Failed to ignore SIGHUP");
        -: 6067:        }
    #####: 6068:        if (daemonize(maxcore, settings.verbose) == -1) {
    #####: 6069:            fprintf(stderr, "failed to daemon() in order to daemonize\n");
    #####: 6070:            exit(EXIT_FAILURE);
        -: 6071:        }
        -: 6072:    }
        -: 6073:
        -: 6074:    /* lock paged memory if needed */
      104: 6075:    if (lock_memory) {
        -: 6076:#ifdef HAVE_MLOCKALL
    #####: 6077:        int res = mlockall(MCL_CURRENT | MCL_FUTURE);
    #####: 6078:        if (res != 0) {
    #####: 6079:            fprintf(stderr, "warning: -k invalid, mlockall() failed: %s\n",
    #####: 6080:                    strerror(errno));
        -: 6081:        }
        -: 6082:#else
        -: 6083:        fprintf(stderr, "warning: -k invalid, mlockall() not supported on this platform.  proceeding without.\n");
        -: 6084:#endif
        -: 6085:    }
        -: 6086:
        -: 6087:    /* initialize main thread libevent instance */
        -: 6088:#if defined(LIBEVENT_VERSION_NUMBER) && LIBEVENT_VERSION_NUMBER >= 0x02000101
        -: 6089:    /* If libevent version is larger/equal to 2.0.2-alpha, use newer version */
      104: 6090:    struct event_config *ev_config;
      104: 6091:    ev_config = event_config_new();
      104: 6092:    event_config_set_flag(ev_config, EVENT_BASE_FLAG_NOLOCK);
      104: 6093:    main_base = event_base_new_with_config(ev_config);
      104: 6094:    event_config_free(ev_config);
        -: 6095:#else
        -: 6096:    /* Otherwise, use older API */
        -: 6097:    main_base = event_init();
        -: 6098:#endif
        -: 6099:
        -: 6100:    /* Load initial auth file if required */
      104: 6101:    if (settings.auth_file) {
        1: 6102:        if (settings.udpport) {
    #####: 6103:            fprintf(stderr, "Cannot use UDP with ascii authentication enabled (-U 0 to disable)\n");
    #####: 6104:            exit(EX_USAGE);
        -: 6105:        }
        -: 6106:
        1: 6107:        switch (authfile_load(settings.auth_file)) {
    #####: 6108:            case AUTHFILE_STATFAIL:
    #####: 6109:                vperror("Could not stat authfile [%s], error %s", settings.auth_file
    #####: 6110:                                                            , strerror(errno));
    #####: 6111:                exit(EXIT_FAILURE);
    #####: 6112:                break;
    #####: 6113:            case AUTHFILE_OPENFAIL:
    #####: 6114:                vperror("Could not open authfile [%s] for reading, error %s", settings.auth_file
    #####: 6115:                                                                           , strerror(errno));
    #####: 6116:                exit(EXIT_FAILURE);
    #####: 6117:                break;
    #####: 6118:            case AUTHFILE_OOM:
    #####: 6119:                fprintf(stderr, "Out of memory reading password file: %s", settings.auth_file);
    #####: 6120:                exit(EXIT_FAILURE);
    #####: 6121:                break;
    #####: 6122:            case AUTHFILE_MALFORMED:
    #####: 6123:                fprintf(stderr, "Authfile [%s] has a malformed entry. Should be 'user:password'", settings.auth_file);
    #####: 6124:                exit(EXIT_FAILURE);
        -: 6125:                break;
        -: 6126:            case AUTHFILE_OK:
        -: 6127:                break;
        -: 6128:        }
        -: 6129:    }
        -: 6130:
        -: 6131:    /* initialize other stuff */
      104: 6132:    stats_init();
      104: 6133:    logger_init();
      104: 6134:    conn_init();
      104: 6135:    bool reuse_mem = false;
      104: 6136:    void *mem_base = NULL;
      104: 6137:    bool prefill = false;
      104: 6138:    if (settings.memory_file != NULL) {
        2: 6139:        preallocate = true;
        -: 6140:        // Easier to manage memory if we prefill the global pool when reusing.
        2: 6141:        prefill = true;
        2: 6142:        restart_register("main", _mc_meta_load_cb, _mc_meta_save_cb, meta);
        4: 6143:        reuse_mem = restart_mmap_open(settings.maxbytes,
        2: 6144:                        settings.memory_file,
        -: 6145:                        &mem_base);
        -: 6146:        // The "save" callback gets called when we're closing out the mmap,
        -: 6147:        // but we don't know what the mmap_base is until after we call open.
        -: 6148:        // So we pass the struct above but have to fill it in here so the
        -: 6149:        // data's available during the save routine.
        2: 6150:        meta->mmap_base = mem_base;
        -: 6151:        // Also, the callbacks for load() run before _open returns, so we
        -: 6152:        // should have the old base in 'meta' as of here.
        -: 6153:    }
        -: 6154:    // Initialize the hash table _after_ checking restart metadata.
        -: 6155:    // We override the hash table start argument with what was live
        -: 6156:    // previously, to avoid filling a huge set of items into a tiny hash
        -: 6157:    // table.
      104: 6158:    assoc_init(settings.hashpower_init);
        -: 6159:#ifdef EXTSTORE
      104: 6160:    if (storage_enabled && reuse_mem) {
    #####: 6161:        fprintf(stderr, "[restart] memory restart with extstore not presently supported.\n");
    #####: 6162:        reuse_mem = false;
        -: 6163:    }
        -: 6164:#endif
      208: 6165:    slabs_init(settings.maxbytes, settings.factor, preallocate,
        -: 6166:            use_slab_sizes ? slab_sizes : NULL, mem_base, reuse_mem);
        -: 6167:#ifdef EXTSTORE
      104: 6168:    if (storage_enabled) {
        8: 6169:        storage = storage_init(storage_cf);
        8: 6170:        if (storage == NULL) {
        1: 6171:            exit(EXIT_FAILURE);
        -: 6172:        }
        7: 6173:        ext_storage = storage;
        -: 6174:        /* page mover algorithm for extstore needs memory prefilled */
        7: 6175:        prefill = true;
        -: 6176:    }
        -: 6177:#endif
        -: 6178:
      103: 6179:    if (settings.drop_privileges) {
      103: 6180:        setup_privilege_violations_handler();
        -: 6181:    }
        -: 6182:
      103: 6183:    if (prefill)
        9: 6184:        slabs_prefill_global();
        -: 6185:    /* In restartable mode and we've decided to issue a fixup on memory */
      103: 6186:    if (settings.memory_file != NULL && reuse_mem) {
        1: 6187:        mc_ptr_t old_base = meta->old_base;
        1: 6188:        assert(old_base == meta->old_base);
        -: 6189:
        -: 6190:        // should've pulled in process_started from meta file.
        1: 6191:        process_started = meta->process_started;
        -: 6192:        // TODO: must be a more canonical way of serializing/deserializing
        -: 6193:        // pointers? passing through uint64_t should work, and we're not
        -: 6194:        // annotating the pointer with anything, but it's still slightly
        -: 6195:        // insane.
        1: 6196:        restart_fixup((void *)old_base);
        -: 6197:    }
        -: 6198:    /*
        -: 6199:     * ignore SIGPIPE signals; we can use errno == EPIPE if we
        -: 6200:     * need that information
        -: 6201:     */
      103: 6202:    if (signal(SIGPIPE, SIG_IGN) == SIG_ERR) {
    #####: 6203:        perror("failed to ignore SIGPIPE; sigaction");
    #####: 6204:        exit(EX_OSERR);
        -: 6205:    }
        -: 6206:    /* start up worker threads if MT mode */
        -: 6207:#ifdef PROXY
        -: 6208:    if (settings.proxy_enabled) {
        -: 6209:        proxy_init(settings.proxy_uring);
        -: 6210:        if (proxy_load_config(settings.proxy_ctx) != 0) {
        -: 6211:            exit(EXIT_FAILURE);
        -: 6212:        }
        -: 6213:    }
        -: 6214:#endif
        -: 6215:#ifdef EXTSTORE
      103: 6216:    slabs_set_storage(storage);
      103: 6217:    memcached_thread_init(settings.num_threads, storage);
      103: 6218:    init_lru_crawler(storage);
        -: 6219:#else
        -: 6220:    memcached_thread_init(settings.num_threads, NULL);
        -: 6221:    init_lru_crawler(NULL);
        -: 6222:#endif
        -: 6223:
      103: 6224:    if (start_assoc_maint && start_assoc_maintenance_thread() == -1) {
    #####: 6225:        exit(EXIT_FAILURE);
        -: 6226:    }
      103: 6227:    if (start_lru_crawler && start_item_crawler_thread() != 0) {
    #####: 6228:        fprintf(stderr, "Failed to enable LRU crawler thread\n");
    #####: 6229:        exit(EXIT_FAILURE);
        -: 6230:    }
        -: 6231:#ifdef EXTSTORE
      103: 6232:    if (storage && start_storage_compact_thread(storage) != 0) {
    #####: 6233:        fprintf(stderr, "Failed to start storage compaction thread\n");
    #####: 6234:        exit(EXIT_FAILURE);
        -: 6235:    }
      103: 6236:    if (storage && start_storage_write_thread(storage) != 0) {
    #####: 6237:        fprintf(stderr, "Failed to start storage writer thread\n");
    #####: 6238:        exit(EXIT_FAILURE);
        -: 6239:    }
        -: 6240:
      103: 6241:    if (start_lru_maintainer && start_lru_maintainer_thread(storage) != 0) {
        -: 6242:#else
        -: 6243:    if (start_lru_maintainer && start_lru_maintainer_thread(NULL) != 0) {
        -: 6244:#endif
    #####: 6245:        fprintf(stderr, "Failed to enable LRU maintainer thread\n");
    #####: 6246:        free(meta);
    #####: 6247:        return 1;
        -: 6248:    }
        -: 6249:
      199: 6250:    if (settings.slab_reassign &&
       96: 6251:        start_slab_maintenance_thread() == -1) {
    #####: 6252:        exit(EXIT_FAILURE);
        -: 6253:    }
        -: 6254:
      103: 6255:    if (settings.idle_timeout && start_conn_timeout_thread() == -1) {
    #####: 6256:        exit(EXIT_FAILURE);
        -: 6257:    }
        -: 6258:
        -: 6259:    /* initialise clock event */
        -: 6260:#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
        -: 6261:    {
      103: 6262:        struct timespec ts;
      103: 6263:        if (clock_gettime(CLOCK_MONOTONIC, &ts) == 0) {
      103: 6264:            monotonic = true;
      103: 6265:            monotonic_start = ts.tv_sec;
        -: 6266:            // Monotonic clock needs special handling for restarts.
        -: 6267:            // We get a start time at an arbitrary place, so we need to
        -: 6268:            // restore the original time delta, which is always "now" - _start
      103: 6269:            if (reuse_mem) {
        -: 6270:                // the running timespan at stop time + the time we think we
        -: 6271:                // were stopped.
        1: 6272:                monotonic_start -= meta->current_time + meta->time_delta;
        -: 6273:            } else {
      102: 6274:                monotonic_start -= ITEM_UPDATE_INTERVAL + 2;
        -: 6275:            }
        -: 6276:        }
        -: 6277:    }
        -: 6278:#endif
      103: 6279:    clock_handler(0, 0, 0);
        -: 6280:
        -: 6281:    /* create unix mode sockets after dropping privileges */
      103: 6282:    if (settings.socketpath != NULL) {
       93: 6283:        errno = 0;
       93: 6284:        if (server_socket_unix(settings.socketpath,settings.access)) {
    #####: 6285:            vperror("failed to listen on UNIX socket: %s", settings.socketpath);
    #####: 6286:            exit(EX_OSERR);
        -: 6287:        }
        -: 6288:    }
        -: 6289:
        -: 6290:    /* create the listening socket, bind it, and init */
      103: 6291:    if (settings.socketpath == NULL) {
       10: 6292:        const char *portnumber_filename = getenv("MEMCACHED_PORT_FILENAME");
       10: 6293:        char *temp_portnumber_filename = NULL;
       10: 6294:        size_t len;
       10: 6295:        FILE *portnumber_file = NULL;
        -: 6296:
       10: 6297:        if (portnumber_filename != NULL) {
        3: 6298:            len = strlen(portnumber_filename)+4+1;
        3: 6299:            temp_portnumber_filename = malloc(len);
        3: 6300:            snprintf(temp_portnumber_filename,
        -: 6301:                     len,
        -: 6302:                     "%s.lck", portnumber_filename);
        -: 6303:
        3: 6304:            portnumber_file = fopen(temp_portnumber_filename, "a");
        3: 6305:            if (portnumber_file == NULL) {
    #####: 6306:                fprintf(stderr, "Failed to open \"%s\": %s\n",
    #####: 6307:                        temp_portnumber_filename, strerror(errno));
        -: 6308:            }
        -: 6309:        }
        -: 6310:
       10: 6311:        errno = 0;
       10: 6312:        if (settings.port && server_sockets(settings.port, tcp_transport,
        -: 6313:                                           portnumber_file)) {
        1: 6314:            if (settings.inter == NULL) {
    #####: 6315:                vperror("failed to listen on TCP port %d", settings.port);
        -: 6316:            } else {
        1: 6317:                vperror("failed to listen on one of interface(s) %s", settings.inter);
        -: 6318:            }
        1: 6319:            exit(EX_OSERR);
        -: 6320:        }
        -: 6321:
        -: 6322:        /*
        -: 6323:         * initialization order: first create the listening sockets
        -: 6324:         * (may need root on low ports), then drop root if needed,
        -: 6325:         * then daemonize if needed, then init libevent (in some cases
        -: 6326:         * descriptors created by libevent wouldn't survive forking).
        -: 6327:         */
        -: 6328:
        -: 6329:        /* create the UDP listening socket and bind it */
        9: 6330:        errno = 0;
        9: 6331:        if (settings.udpport && server_sockets(settings.udpport, udp_transport,
        -: 6332:                                              portnumber_file)) {
    #####: 6333:            if (settings.inter == NULL) {
    #####: 6334:                vperror("failed to listen on UDP port %d", settings.udpport);
        -: 6335:            } else {
    #####: 6336:                vperror("failed to listen on one of interface(s) %s", settings.inter);
        -: 6337:            }
    #####: 6338:            exit(EX_OSERR);
        -: 6339:        }
        -: 6340:
        9: 6341:        if (portnumber_file) {
        3: 6342:            fclose(portnumber_file);
        3: 6343:            rename(temp_portnumber_filename, portnumber_filename);
        -: 6344:        }
        9: 6345:        if (temp_portnumber_filename)
        3: 6346:            free(temp_portnumber_filename);
        -: 6347:    }
        -: 6348:
        -: 6349:    /* Give the sockets a moment to open. I know this is dumb, but the error
        -: 6350:     * is only an advisory.
        -: 6351:     */
      102: 6352:    usleep(1000);
      102: 6353:    if (stats_state.curr_conns + stats_state.reserved_fds >= settings.maxconns - 1) {
    #####: 6354:        fprintf(stderr, "Maxconns setting is too low, use -c to increase.\n");
    #####: 6355:        exit(EXIT_FAILURE);
        -: 6356:    }
        -: 6357:
      102: 6358:    if (pid_file != NULL) {
        1: 6359:        save_pid(pid_file);
        -: 6360:    }
        -: 6361:
        -: 6362:    /* Drop privileges no longer needed */
      102: 6363:    if (settings.drop_privileges) {
      102: 6364:        drop_privileges();
        -: 6365:    }
        -: 6366:
        -: 6367:    /* Initialize the uriencode lookup table. */
      102: 6368:    uriencode_init();
        -: 6369:
        -: 6370:    /* enter the event loop */
      665: 6371:    while (!stop_main_loop) {
      563: 6372:        if (event_base_loop(main_base, EVLOOP_ONCE) != 0) {
        -: 6373:            retval = EXIT_FAILURE;
        -: 6374:            break;
        -: 6375:        }
        -: 6376:    }
        -: 6377:
      102: 6378:    switch (stop_main_loop) {
        2: 6379:        case GRACE_STOP:
        2: 6380:            fprintf(stderr, "Gracefully stopping\n");
        -: 6381:        break;
        -: 6382:        case EXIT_NORMALLY:
        -: 6383:            // Don't need to print anything to STDERR for a normal shutdown.
        -: 6384:        break;
    #####: 6385:        default:
    #####: 6386:            fprintf(stderr, "Exiting on error\n");
        -: 6387:        break;
        -: 6388:    }
        -: 6389:
      102: 6390:    stop_threads();
      102: 6391:    if (settings.memory_file != NULL && stop_main_loop == GRACE_STOP) {
        1: 6392:        restart_mmap_close();
        -: 6393:    }
        -: 6394:
        -: 6395:    /* remove the PID file if we're a daemon */
      102: 6396:    if (do_daemonize)
        1: 6397:        remove_pidfile(pid_file);
        -: 6398:    /* Clean up strdup() call for bind() address */
      102: 6399:    if (settings.inter)
        6: 6400:      free(settings.inter);
        -: 6401:
        -: 6402:    /* cleanup base */
      102: 6403:    event_base_free(main_base);
        -: 6404:
      102: 6405:    free(meta);
        -: 6406:
      102: 6407:    return retval;
        -: 6408:}
